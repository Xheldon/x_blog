<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xheldon Blog</title>
    <description>The Answer to Life, the Universe and Everything is...</description>
    <link>https://www.xheldon.com/</link>
    <atom:link href="https://www.xheldon.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 12 Aug 2022 09:37:40 +0800</pubDate>
    <lastBuildDate>Fri, 12 Aug 2022 09:37:40 +0800</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>Chrome 常用调试方法及其他</title>
        <description>&lt;p&gt;Chrome 是一款浏览器，对前端工程师来说也是一款调试利器，下面的几个功能是我在工作中最常用到的几个，下面逐个介绍。&lt;/p&gt;

&lt;h3 id=&quot;断点&quot;&gt;断点&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个应该是用的最多的基础功能，但是我面试过的很多外包同学并不知道如何使用 Chrome 的断点调试，或者听说过，但是不知道怎么用，下面简单介绍一下基本操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加断点可以直接在代码中硬编码，增增加一行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debugger&lt;/code&gt; 表达式即可，代码执行到此处会断到此处：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/B64AFAEF-676F-4AB6-BFD9-163096FFD511_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 VSCode 中，黄色下划线表示警告。一般不会使用此方式，因为此方式跟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt;  并没有明显的优势，甚至还不如前者简单，因为你用完之后还得删了，不然代码是不可用的。&lt;/p&gt;

&lt;p&gt;还有一种方式是直接在 devtools 中的 source tab 中找到源码，一般是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt; 输出后，点击控制台右侧的文件名，可以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sources&lt;/code&gt; tab 中看到源码，点击左下角格式化之后，在代码左侧行号出点击标记断点，即可调试，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/C987CDFD-FF9E-45BE-AE3B-BADD657DE1B9_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;断点后，图中红色部分的按钮，从左向右依次的含义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;继续执行&lt;/code&gt; ：点击后，断点将直接执行到下一个断点处。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setp over&lt;/code&gt; ：如果当前断点所在位置不是函数，则跟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; 一样，执行到下一行；如果是函数，则会跳过该函数继续执行到下一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setp into&lt;/code&gt; ：如果没有异步代码，则跟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setp&lt;/code&gt; 一样，执行到下一行；如果有异步代码，但它会进入到异步代码的内部第一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step out&lt;/code&gt; ：点击后，跳出当前函数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setp&lt;/code&gt; ：执行下一行同步代码，跟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step into&lt;/code&gt; 不一样， 它会跳过异步代码的执行；如果当前断点在函数处的话，会进入到函数调用内部第一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;暂时停用/激活断点&lt;/code&gt; ：首次点击后会临时禁止断点功能，就像没有打断点一样代码不会停止执行，下方的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Breakpoints&lt;/code&gt; 中的断点会整体置灰：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/91E6FC8D-D932-4412-9D5D-EBC5E92BD8EA_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/0AC85FEA-3449-49A8-8BF9-A619CF2D924E_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;将断点停在报错处&lt;/code&gt; 点击高亮后启用，代码将会自动停止到任何 throw error 的地方，无论是否是被 catch 住，也无论是 http 错误还是什么错误。注意必须把下面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pause on caught exceptions&lt;/code&gt; 勾选才行，不勾选等于无效：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/D99CEF49-A530-412E-B632-307C291C75E0_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此功能最好是在代码执行一遍完成后，页面载入完成后，开始交互的时候打开，否则可能一进入页面就会报错，包括 React 中的合法报错等，导致无法正常加载页面。&lt;/p&gt;

&lt;p&gt;直接放一张官方断点的图：&lt;/p&gt;

&lt;p caption=&quot;官方图👆🏻&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/17ED1675-13EA-42A3-8B4D-83587390D7EF_2.png&quot;  alt=官方图👆🏻 title=官方图👆🏻 /&gt;&lt;/p&gt;

&lt;p&gt;上图中上述的按钮下面有一系列的 toggle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;‣&lt;/code&gt; 三角号可以点击，依次为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Watch&lt;/code&gt; 可以监测断点处的任何可访问到的上下文变量以供显示，如果变量不存在或者无法访问，如访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.b.c&lt;/code&gt; 的时候，a 不存在，那么会显示不可用。当断点断的时候，该位置输入的变量会自动显示，而不用鼠标悬浮上去（像上面官方图一样）查看变量，很方便。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Breakpoints&lt;/code&gt;  表示已经有的断点。checkbox 打勾的是可用的断点，未打勾的是暂时忽略的断点（可以临时打勾或者取消掉）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/5F3A5468-63E9-47EF-9E80-461D5988E2C3_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当前执行到的断点，背景是黄色的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Threads&lt;/code&gt; 表示当前调用的文件线程，当期页面 JavaScript 线程表示为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main&lt;/code&gt; 中。此部分一般用不到，只是用来调试&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web Worker&lt;/code&gt; 比较有用，也可以用来在当前页面调试 Chrome 浏览器插件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scope&lt;/code&gt; 显示当前断点处的可访问到的变量值。因为 JavaScript 的闭包和调用栈的特性，会显示很多闭包中的变量：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/54D3E302-A251-4411-B366-D69B4C7B6CEE_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Call Stack&lt;/code&gt; 即函数的调用栈，最顶层的是最近的调用，可以通过点击不同的函数在其之间来回跳。需要注意的是，跳转的时候不会真的再次执行到那个位置，只是方便你查看那个位置的闭包变量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ui-断点&quot;&gt;UI 断点&lt;/h3&gt;

&lt;p&gt;有些情况下，你不知道或者无从定位一个 UI 问题为什么会这么变化。比如，你的同事写了一个 hover 到按钮上之后，按钮颜色变化的代码。你需要为这个逻辑添加新的逻辑，但是你并不知道他的代码逻辑写在哪个文件（他没有交接工作就休假了，可恶！）。&lt;/p&gt;

&lt;p&gt;你发现 hover 到按钮上的时候，按钮会增加个 class 类名，于是你可以使用 dom 断点进行调试，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elements&lt;/code&gt; tab 中，你需要检查的那个元素上右键：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/C9A19CAE-BEC6-4180-B618-73CA95E0CA90_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UI 断点可以将代码停到你指定的 UI 事件所执行的代码发生之前的那一刻，UI 事件包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;子树修改：如果子树有任何修改，如增加、属性变更等，会将代码断到该逻辑即将执行的地方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;属性修改：如果当前右键的元素有任何修改，会将代码断到该逻辑即将执行的地方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;节点移除：如果当前右键的元素移除，会将代码断到该逻辑即将执行的地方。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个例子，飞书文档中，如果 block 聚焦，则会在节点上添加一个 focus 类名：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/3690BB50-7AB1-4798-AEE3-98D1EEC495B3_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/C7500F06-2A4D-47A5-8DE6-2ED7CB43868B_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时就可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute modifications&lt;/code&gt; 进行断点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/9A783370-A839-4995-A5E3-2C1D4421ED7D_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，默认情况下线上代码是压缩后的，点击左下角的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; 就会格式化：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/A4049060-72F8-476F-A1D2-A21B099EF177_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;格式化之后，Chrome 会新建一个 tab，在文件后面加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:formatted&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/CD25F7CA-7ABD-4B32-A28D-0E60935DB707_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要注意的是，如果你右键的元素在变更的时候是父节点变更，如父节点整体移除，则 UI 断点不会执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;overwrite&quot;&gt;Overwrite&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Charles 有类似的功能叫 Map js（没记错的话），ProxyMan 的类似功能叫 Map Local，都是一个意思。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有时候，因为上线/测试链路比较长（尤其是编辑器这种基础工具组件，需要发包），想快速验证一个 case 的时候就会比较麻烦，因此可以使用 Chrome 的 Overwrite 功能。&lt;/p&gt;

&lt;p&gt;此功能类似于 Charles 的 Map js 功能，即可以将本地文件作为页面的请求进行响应，你需要先在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sources&lt;/code&gt; 中启用该功能，当然，如果没有执定本地的文件存储的位置，需要先让你指定位置才行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/B5ADFA65-51E3-44AD-967F-311A3604D016_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时 Chrome 会提醒你需要本地该路径的完全访问权限，同意即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/416C9680-96DF-40AF-861B-6C74EFC6C1DF_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择一个本地文件夹后，（这里我选用的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Developer/Overwrite&lt;/code&gt; 文件夹）就可以启用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Overwrite&lt;/code&gt; 功能：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/362CACE4-9BBD-41B3-80FD-A69C85EF8209_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后转到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network&lt;/code&gt; tab，选择一个资源，如 css/js，我这里选择的是 js：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/31AB1FF1-4016-4818-AFB3-3B823209319E_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意，如果没有在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sources&lt;/code&gt; 中启用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Overwrite&lt;/code&gt; 的话，这里是不会显示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save for overrides&lt;/code&gt; 的。&lt;/p&gt;

&lt;p&gt;之后就可以各种修改该文件，然后刷新页面查看修改后的效果了。&lt;/p&gt;

&lt;p&gt;需要注意的是，如果 js 文件请求后有时间戳，则 Overwrite 不会生效，因为 Chrome 是使用严格的路径匹配来 map 文件的。&lt;/p&gt;

&lt;h3 id=&quot;snippet&quot;&gt;Snippet&lt;/h3&gt;

&lt;p&gt;准确说，这个不算是「调试方法」，但是平常有个代码验证的片段，我也会存到这个里面，相当于一个 Sublime（可以对输入过的变量进行自动补全），挺好用的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/E231449D-FED8-4E4E-8446-D6A3AAEC87A4_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;filesystem&quot;&gt;Filesystem&lt;/h3&gt;

&lt;p&gt;该功能跟上面几个在同一个位置，用来实时同步浏览器中的修改到本地文件系统。该功能适合一个简单的 HTML Web 服务，如 Express 这种服务端返回 js/css/html 等的本地调试时候用。&lt;/p&gt;

&lt;p&gt;但是该功能官方明确说了，不适合 React App。因为现在基本项目都是 React、Vue 等的现代框架构建的，因此此功能用的较少，这里仅放个官方截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/image.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;h3 id=&quot;macvim&quot;&gt;MacVim&lt;/h3&gt;

&lt;p&gt;上面的 Overwrite 来的 js 一般都是压缩后的线上代码，有些可能会比较大，所以我一般会用 Vim 打开后格式化一下。Vim 配置起来太费劲，而 MacVim 提供了开箱即用的体验，稍加改造即可为己更好的所用。为什么用 MacVim 是因为它性能非常强，格式化大到几十 Mb 的文件都是几秒钟的事情。我一般都会配置一个 js-beautify 进行格式化，虽然叫 js-beautify，但是它可以格式化 js、css、html。&lt;/p&gt;

&lt;p&gt;使用 js-beautify 需要先安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim-plug&lt;/code&gt; ，它是一款 vim 插件管理器：&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;https://github.com/junegunn/vim-plug&lt;/a&gt;，使用步骤见：&lt;a href=&quot;https://github.com/junegunn/vim-plug/wiki/tutorial&quot;&gt;https://github.com/junegunn/vim-plug/wiki/tutorial&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：安装需要魔法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js-beautify&lt;/code&gt; 使用这个：&lt;a href=&quot;https://github.com/beautify-web/js-beautify&quot;&gt;https://github.com/beautify-web/js-beautify&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这是我的 vim 配置，我使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; 快捷键作为调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js-beautify&lt;/code&gt; 的方式，这样就不用每次都输入命令了：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;set number
set relativenumber
set smartindent
set autoindent
set hlsearch
set display=lastline
set scrolloff=3
set laststatus=2
set showmatch
set ruler
set guifont=Monaco:h12
syntax on
autocmd FileType *.js setlocal equalprg=js-beautify\ --stdin
nmap [] :%!js-beautify&amp;lt;CR&amp;gt;
colorscheme evening
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')
Plug 'jelera/vim-javascript-syntax'
call plug#end()
if !has('gui')
    set term=$TERM
endif

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vscode&quot;&gt;VSCode&lt;/h3&gt;

&lt;p&gt;VSCode 也有断点调试功能（感谢 Chrome 内核），但是只能调试 Node 应用（可以配合浏览器插件调试 Web 应用，但是没必要，因为已经有 Chrome 了），基本使用方法跟 Chrome 类似，这里就不介绍了，放个图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/D7AD7683-F0C4-46D2-8632-2ADB519B230C_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Aug 2022 20:39:47 +0800</pubDate>
        <link>https://www.xheldon.com/tech/the-use-of-chrome-devtools.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/the-use-of-chrome-devtools.html</guid>
        
        <category>技术</category>
        
        <category>Chrome</category>
        
        <category>调试</category>
        
        <category>技巧</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>差生的学习问题</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文是作为职业高中的教师老爹写的，虽然不是教语文，但是平常也爱写点教学感悟、生活体会什么的。此类文章也许投稿到某个报纸的教育专栏会更好，但是一方面苦于没有这方面的门路，一方面即使投稿后也想将其放到网上以让更多人看到，因此他让我帮他放到我的博客中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;差生是指那些听不懂课，看不懂书，作业不会做，考试成绩差的学生。这样的学生一般学习态度差，给人的感觉是不求上进。其实这只是表面现象，其背后的原因是学习困难。因为听不懂课，看不懂书，做作业太难，所以不愿意做作业。别的学生几分钟就能完成的作业，他需要很长的时间也做不好。由于学习困难，产生了厌学的情绪。这种情况首先找到学习困难的原因，帮助他克服困难，使学习过程变得轻松愉快，克服厌学情绪，他的成绩才能有所提高。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1560785496-3c9d27877182.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;一听不懂课怎么办&quot;&gt;一、听不懂课怎么办?&lt;/h2&gt;

&lt;h3 id=&quot;听不懂课是常见的现象&quot;&gt;听不懂课是常见的现象&lt;/h3&gt;

&lt;p&gt;原因是基础知识有欠缺，理解能力差，如果听不懂课，那一定要趁课下时间把课本看懂，遇到不懂的地方，就问老师，或同学。老师会及时发现教学中的一些问题，以改善以后的教学工作。老师讲课，要降低学生理解知识的难度，要从简单的、初步的、直观的知识开始讲起，多补习基础知识。&lt;/p&gt;

&lt;p&gt;教师的教学语言，要贴近学生的生活经验，让学生有真情实感。只有真情实感才能触动学生的内心，才能抓住学生的注意力。&lt;/p&gt;

&lt;h3 id=&quot;教学要符合认识的规律&quot;&gt;教学要符合认识的规律&lt;/h3&gt;

&lt;p&gt;理性认识必须以感性认识为基础，教学上要先建立感性认识，没有条件也要积极创造条件，让学生在实践中学习，实地观察，动手操作，通过思考分析原因，对观察到的现象做出准确的描述和科学合理的解释，从而总结出概念和规律。在感性认识的基础上建立理性认识。举例说明问题不能脱离学生的生活经验。&lt;/p&gt;

&lt;p&gt;要经常对教学效果进行检测，及时发现学生的掌握情况不断改进教学方法。&lt;/p&gt;

&lt;p&gt;不能让困难积累，遇到困难要及时解决，一些同学听不懂课，下课也不看书，不会就算了。这样知识欠缺就会越来越多，学习就会越来越困难。&lt;/p&gt;

&lt;p&gt;课能听懂，书能看懂，题通过努力能够做会，学习是件快乐的事情。有个学生在普通高中上学，因为学习成绩差，听不懂课，学校要求又严格，就不愿上学了。他的家长就把他送到职高上学，在职高上一段时间，他家长发现孩子变得快乐了，每天唱歌回家，以前在家从不学习，家长怎么劝都不听，现在居然开始学习了，做作业看书到夜里十点多。他爸说职业高中的老师比普通高中的老师教的好。不是职高的老师教的好，而是他的孩子能学会，职高的教材比普高的教材简单，孩子在普高学不会所以不学，在职高能够学会，所以开始学习了。&lt;/p&gt;

&lt;h3 id=&quot;学习难度应与学习能力相匹配&quot;&gt;学习难度应与学习能力相匹配&lt;/h3&gt;

&lt;p&gt;学习内容不能太简单，也不能太难，要让学生感觉通过努力可以学会。学习能力强，可以跳级，学习能力差就要留级，人们喜欢做具有一定挑战性的活动，从中能获得快感。如果学习内容难度太大，通过努力也学不会，就会产生厌学的情绪。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1605711285791-0219e80e43a3.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二正确的学习方法读书与做题&quot;&gt;二、正确的学习方法：读书与做题&lt;/h2&gt;

&lt;h3 id=&quot;书山有路勤为径学海无涯题作舟&quot;&gt;书山有路勤为径，学海无涯题作舟&lt;/h3&gt;

&lt;p&gt;学习方法是多读书多做题。首先把课本读懂，一遍一遍地读，读一遍是不行的，多读几遍才能记住，才能把知识融会贯通。书读懂了就等于学会了。如果书读不懂怎么办？那是因为你的知识有欠缺的地方，就像看电视剧，如果不是一集接着一集连着看的，故事情节看着看着就看不懂了。你需要把欠缺的知识补起来。&lt;/p&gt;

&lt;p&gt;其次是做题，看懂书还要多做题，才能灵活运用所学的知识。从简单的题开始做。如果感觉做题比较困难，就先看例题，看有答案的习题，要看那种有详细分析和解题步骤的学习资料。看会了，自己再做一遍，再思考一下有没有其他的解题方法，做到能举一反三。&lt;/p&gt;

&lt;p&gt;要做到每做一道题，要达到真正会做，不要似懂非懂，真正弄明白方法原理，而不是死记硬背。有时候感觉自己学会了，再做一遍还不会做。做数学题的时候经常发生这种现象。数学差的学生特别擅长死记硬背，学习数学也使用死记硬背的方法。数学有数学的思维方法，数学是不需要死记硬背的，而更强调的是思维方法和运算。结果是根据条件用用公式，定理数学方法算出来的。采用死记硬背的方法学习数学就不灵了。&lt;/p&gt;

&lt;p&gt;小学初中高中的知识是相互连贯的，如果有一部分有欠缺，遇到这方面的问题就无法理解，学习就会遇到困难，就会产生听不懂课，看不懂书，题不会做的情况。哪里有欠缺就从哪里开始补起。&lt;/p&gt;

&lt;p&gt;有位在大学教数学的教授介绍他的学习经验，他上高中时刚刚恢复高考，由于小时候不重视学习，他的基础知识很差，做数学题时感觉困难很大，这也不会那也不会，连乘法口诀都忘了，就从小学开始自学乘法，遇到解方程等不会的问题，就把初中的书找来看，从基础知识开始学起，基础知识掌握牢固之后，做题越来越容易了，学习上遇到的困难也少了。如果你能够自己学习，任何困难都不能阻挡你的进步。&lt;/p&gt;

&lt;h3 id=&quot;温故而知新学而时习之&quot;&gt;温故而知新，学而时习之&lt;/h3&gt;

&lt;p&gt;「习」的意思就是多复习过去学过的东西，把基础知识打牢。基础知识扎实了，理解新事物的能力就会增强。学习之后要经常练习，练习多了才能记得牢，才能灵活运用。学过知识要经常复习，把新学的知识和过去的知识进行融会贯通，总结出规律，便于理解和记忆。&lt;/p&gt;

&lt;h3 id=&quot;学而不思则罔思不学则殆&quot;&gt;学而不思则罔，思不学则殆&lt;/h3&gt;

&lt;p&gt;一道题不会所有类型的题都不会，一道题会了所有类型的题都会了。做一道题一定要彻底搞明白做题的方法和步骤，不要似懂非懂，一知半解。做题不一定要多但一定要做到能够消化吸收。&lt;/p&gt;

&lt;p&gt;读书是学习的过程，做题时思考的过程，把读书和做题结合起来，也就是把学习和思考相结合，自古以来都被当作最有效的学习方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1560785477-d43d2b34e0df.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三背书的方法先记住文字的意思再记怎样叙述&quot;&gt;三、背书的方法：先记住文字的意思，再记怎样叙述&lt;/h2&gt;

&lt;h3 id=&quot;正确理解&quot;&gt;正确理解&lt;/h3&gt;

&lt;p&gt;如果要背一段文字就先理解文字的意思，记住文字的意思，再记怎样叙述。先用自己的话把意思说出来，再按课本上的叙述把意思说出来。如果说不出来，是因为关键词没有掌握。关键的名称，动作，状态，不知道用什么词语描述。&lt;/p&gt;

&lt;p&gt;在背书时，理解文字的意思很重要，如果不理解文字的意思就记不住文字的意思，记不住文字的意思也就不能叙述文字的意思，记忆起来就比较难。经常出现叙述混淆颠倒甚至逻辑错误的情况。叙述的和原来的意思大相迳庭。例如在物理上要叙述电磁继电器的工作原理，书上是这样叙述的，电磁继电器的线圈通电产生磁场，将街铁吸合，带动开关动作。线圈断电，磁场消失，衔铁在拉力弹簧的作用下释放，开关复位。如果理解意思了就知道电磁继电器事实上是电磁力控制的开关，就可以用自己的话来叙述：线圈通电产生电磁吸力，将开关吸合，线圈断电磁吸力消失，开关复位。&lt;/p&gt;

&lt;p&gt;有个同学不理解意思，他叙述说线圈通电开始膨胀，开关闭合，线圈断电收缩，在弹簧的作用下开关断开。还有同学说线圈通电开关闭合，产生磁场，线圈断电，开关断开，磁场消失，把因果关系搞错了。为什么会出现这种现象呢？那是几年以前的事情，学校的仪器设备十分缺乏，该做的实验不能做，上课全靠老师在黑板上写画，教学中用到的东西学生都没有见过，该动手操作的没有动手操作，没有产生对知识的感性认识，上课就是要求学生死记硬背课本上的内容。不求甚解的死记硬背，记起来非常难，好不容易记住了，明天就忘了。现在情况好多了，国家很重视教育，教学上所用的仪器设备学校都有了，教室里还有大屏幕电子白板，通过实物演示和电脑动画学生一看就知道工作原理。&lt;/p&gt;

&lt;h3 id=&quot;准确叙述&quot;&gt;准确叙述&lt;/h3&gt;

&lt;p&gt;知道工作原理，下一步就是叙述。但是，知道电磁继电器的工作原理不一定会叙述，就像我们看到的现象不一定能把它很好地叙述出来。因为你还得记住一些事物的名称，不知道哪个部分叫线圈，哪个部分叫衔铁，虽然知道意思，但不知道关键的东西叫什么名字，只能说那个东西通电，那个东西动作，就像看一场篮球比赛，看着很热闹，但一个人也不认识怎么去说呢，只能说那个人，这个人，或者那个高个，那个胖子，那个穿什么衣服的人等等。文学大师能写出好文章，为什么我们写不出来呢？因为虽然是我们天天见到的现象，但是在我们知识库里没有足够的词汇来描述。所以记住关键词很重要，一些东西怎样称呼，一些动作用什么语言描述，一些状态用什么语言形容。意思弄明白了，关键词也记住了，叙述起来就不会出错了。&lt;/p&gt;

&lt;p&gt;记忆是对感觉的记忆，感觉越丰富，记忆越牢固。回忆起来就越容易。如果感觉比较单一，就越容易遗忘，因为联想的线索太少了。感觉越丰富，联想的线索就越多，越容易联想，所以就不容易忘记。有时拿在手里的东西，刚放下一小会儿就找不到了，不是因为你得了健忘症，而是联想的线索太少了。记不住的东西就通过一件事去记忆。实地观察，动手操作，和别人讨论，这样会增加联想的线索，回忆起来就容易。&lt;/p&gt;

&lt;p&gt;不求甚解的死记硬背，不仅占用大量的学习时间，而且非常耗费精力，是造成学生厌学的原因。遇到必须要背的东西要弄明白道理，记住一些关键的词语，和事物之间的逻辑关系。这些做到了，记起来就简单了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1599493782407-2fe53235d2c8.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;四教与学态度决定一切&quot;&gt;四、教与学：态度决定一切&lt;/h2&gt;

&lt;p&gt;教学过程是教师和学生双向互动的过程。教师教学就是帮学生理解所学的知识，记住所学的知识，达到灵活运用的目的。学生对知识理解了，记住了，会灵活运用了，就学会了。&lt;/p&gt;

&lt;h3 id=&quot;学生是教学的主体教学以学生为主&quot;&gt;学生是教学的主体，教学以学生为主&lt;/h3&gt;

&lt;p&gt;只有学生积极主动的学习，教师的教学才能起到作用。就像鸡蛋在外部条件下变成小鸡，教师教学是外因，学生主动学习是内因。外因通过内因起作用。教师讲课一定要让学生能够理解，能够听懂。学生听不懂，不理解，就不能启发学生思考，教学是没有效果的。学生要主动积极的学习，如果学生不愿意学习，对所学的内容不感兴趣，就不会认真听课，老师讲的再多也没有用。无论外界条件怎样，石头不会变成小鸡。学习是学生自己的事，是不可强求的，也是不可代替的。&lt;/p&gt;

&lt;h3 id=&quot;学生要主动学习态度积极教学才有意义&quot;&gt;学生要主动学习，态度积极，教学才有意义&lt;/h3&gt;

&lt;p&gt;子曰：不愤不启，不悱不发。举一偶不以三偶反则不复也。翻译过来就是，孔子说：教导学生不到他想弄明白而不得的时候就不去开导他，不到他想说出来而说不出来的时候就不去启发他，交给他一方面的东西他却不能举出其他三方面的东西就不要再教他了。意思是如果学生不主动积极的学习，对学习不感兴趣，就不要去教他。教他他也不学，他不学你教不会，徒劳无功。学习态度非常重要。学习态度积极的学生，有不会的问题会主动向老师问，这样的学生自学能力很强，能主动积极的学习。从来不问问题的学生，遇到不会的问题，不会就算了。也没有打算学会。刚考过的试卷再做一遍还是不会，该考多少分还是考多少分。考试就是查漏补缺的，好不容易发现一个自己不会的问题应该立即解决才对，自己不去解决，该不会的还是不会，永远也进步不了。学习是自己的事，要靠自己努力，就像学习体育的运动员，如果自己不刻苦训练，力量和技术就不会进步。学习也是这样，是不能由别人代替的，老师教的再好也教不会不学习的学生。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1546410531-bb4caa6b424d.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;差生成绩差不是一朝一夕形成的。长期的学习困难没有克服，困难日积月累就会越来越多，就会对学习失去信心，从而放弃学习，上课看小说，下课玩手机，作业不做，成绩越来越差。遇到学习困难要及时解决，才不至于积累起来，困难越来越大。&lt;/p&gt;
</description>
        <pubDate>Thu, 26 May 2022 19:10:28 +0800</pubDate>
        <link>https://www.xheldon.com/life/the-problem-of-poor-student.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/life/the-problem-of-poor-student.html</guid>
        
        <category>生活</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>AppleScript 初体验</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;最近新买了 Mac Studio，配备了 M1 Max 芯片和 64G 的内存，性能非常强。与此同时，之前的 &lt;a href=&quot;/tech/my-blog-ci-in-2022.html&quot;&gt;博客处理流程&lt;/a&gt; 中，因为需要使用 Github Action 将从 Craft 拉取的图片（这一步很快，毕竟二者都在国外），往腾讯云 COS传的时候，经常遇到网络过慢的问题&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/FBB4B556-8472-4C92-8EFD-E07015DC5FBB_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;调研了一番发现，Github 貌似 &lt;a href=&quot;https://github.community/t/is-there-a-way-to-specify-virtual-machine-region/120438&quot;&gt;不支持设置 Action 服务器的区域&lt;/a&gt;。鉴于此，所以打算之后将发布流程放到本地，，以加快构建流程，遂有此文。下面的 AppleScript 简称 AS。&lt;/p&gt;

&lt;h2 id=&quot;为什么用-applescript-而不是其他&quot;&gt;为什么用 AppleScript 而不是其他？&lt;/h2&gt;

&lt;p&gt;首先，我当然是想尽可能的缩短操作路径和复杂度，因此先规定了操作步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;点击 Craft 中的发布按钮。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;本地构建，同时显示出构建 log 在终端。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将构建结果推送到 github。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于需要在一个 App 中通过链接调用另一个 App，因此使用 AppleScript 是唯一选择。不过，虽然使用的是 AS，但是其实执行的还是已有的 js 文件，只是将 &lt;a href=&quot;https://github.com/Xheldon/craft_publish_ci/blob/master/.github/workflows/publish.yml&quot;&gt;craft_publish_ci 中的 workflow任务&lt;/a&gt; 挪到了本地执行而已。&lt;/p&gt;

&lt;h2 id=&quot;applescript-简介&quot;&gt;AppleScript 简介&lt;/h2&gt;

&lt;p&gt;概念图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/6C1FA0DD-5875-4C15-BCA8-495B34F5F699_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;applescript-能做什么&quot;&gt;AppleScript 能做什么&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;能与用户交互，如响应用户输入、通知中心发送通知等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;能控制其他 app ，如果其他 app 提供了相关 AS 接口可以直接控制，如果没有提供相关接口则需要通过 AS 语法来获取界面上的按钮等操作元素进行操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;能执行自动化任务如发送邮件、执行定时脚本、打开音乐播放器、锁屏、响应自定义的 URL Scheme 后执行脚本等。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;基本语法&quot;&gt;基本语法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;每行的前面加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;---&lt;/code&gt;（三个短横线）或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; 表示注释本行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(*&lt;/code&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxx*&lt;/code&gt;&lt;/em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt; （括号+星号）包裹的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxx&lt;/code&gt; 表述块注释掉 xxx 的内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他的基本跟口头预类似，不过如果你对英文语法不自信，比如不清楚 besides against over 等在具体语境中的意思，建议还是老老实实使用基本语法。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;applescript-的形式&quot;&gt;AppleScript 的形式&lt;/h3&gt;

&lt;p&gt;AppleScript 常用的有两种形式，Script（脚本）、Application（应用），这里只介绍前两种，Script bundle 和 Text 我没用这里不展开。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/08F57517-C6AC-49C1-9B5E-9606F2DD2A8E_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：这里需要说明一点的是，即使是相同的代码，保存成脚本运行和保存成应用运行，界面是不一样的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;脚本&quot;&gt;脚本&lt;/h4&gt;

&lt;p&gt;脚本顾名思义就是像 js 一样的可执行文件，不同的是 as 是在 Mac 桌面环境执行，而 js 是在 Chrome 中执行的。双击即可运行。下图是脚本 process 显示进度的界面，通过点击脚本右上角的「运行」按钮运行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/A8E4D5D2-C4A6-4E6D-80DA-7E3A0EFA7D41_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;应用&quot;&gt;应用&lt;/h4&gt;

&lt;p&gt;保存成 Application 的 AS 的后缀名跟普通的应用如 Safari、Chrome、微信等应用一样，会以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.app&lt;/code&gt; 结尾，也可以查看包内容。有多种运行方式如 URL Scheme 调用、双击、拖拽内容到 app 图标上，你需要写相关的事件函数来响应相关用户操作。下图是 应用process 显示进度的界面，通过双击 「xxx.app」运行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/E0B4F2DA-21AA-4EF1-B059-9C500E18B67C_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;p&gt;除了上述两者，其他的不常用，不过如果你需要将 script 保存成服务以在状态栏或者任意界面的右键的服务中能够调用该脚本，这需要上述两者之外的形式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/D09A2EEB-72DC-4CA1-8812-59E4BC4206DB_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你可以选择将脚本保存成系统 Service，此时上述 process 代码运行的时候，进度条会显示在顶部状态栏：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/B936F8C6-DCA3-4B98-B995-7F4F3F013E74_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;常用操作代码&quot;&gt;常用操作代码&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;以下操作基于「应用」类型的 AS，下列的语法在终端中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osascript -e '语法内容'&lt;/code&gt; 可以快速验证。需要注意的是，类似于多行的表达如 process 进度条的显示，osascript 是没办法做到的，虽然你可以在很多多行命令如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tell&lt;/code&gt; 中使用多个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; 参数来串联如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osascript -e ‘tell application “Finder”’ -e ‘end tell’&lt;/code&gt; ，但是此语法对 process 进度条无效。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;用户交互&quot;&gt;用户交互&lt;/h3&gt;

&lt;h4 id=&quot;在通知中心显示信息&quot;&gt;在通知中心显示信息&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;display notification &quot;通知内容&quot; with title &quot;通知 title&quot; subtitle &quot;通知副标题&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/AC96218F-E238-4695-9220-7933C27BC841_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;弹窗&quot;&gt;弹窗&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;display dialog &quot;这是个通知&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/B945A1B9-4704-4F39-9A68-C0287846A061_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;获取用户输入&quot;&gt;获取用户输入&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;display dialog &quot;What's your name?&quot; default answer &quot;&quot; with icon note buttons {&quot;取消&quot;, &quot;确认&quot;} default button &quot;确认&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/F4002573-AD3C-4D4E-BF98-9B6696788442_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：AS 没有办法生成类似表单一样的组件，只能生成上面这种对话框，类似网页中的 prompt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;播放给定文本&quot;&gt;播放给定文本&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;say &quot;What is your name?&quot; using &quot;Alex&quot; speaking rate 140 pitch 42 modulation 60
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;其他-1&quot;&gt;其他&lt;/h4&gt;

&lt;p&gt;让用户选择文件夹、文件、颜色、从列表中选择一项等，暂时省略。&lt;/p&gt;

&lt;h3 id=&quot;执行命令行&quot;&gt;执行命令行&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;do shell script &quot;echo $PATH&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意，命令行中的 PATH 环境变量为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin:/bin:/usr/sbin:/sbin&lt;/code&gt; ，因此无法在其中执行诸如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt; 、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvm&lt;/code&gt; 等后来安装的命令，这些命令执行的时候需要手动指定命令所在位置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;执行 node 脚本：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;set node to &quot;/Users/x/.nvm/versions/node/v14.19.1/bin/node&quot;
set appPath to &quot;/Applications/Xhelper.app/Contents/Resources/Scripts/&quot;
do shell script node &amp;amp; &quot; &quot; &amp;amp; appPath &amp;amp; &quot;index.js&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;获取上一个语句的输出结果&quot;&gt;获取上一个语句的输出结果&lt;/h3&gt;

&lt;p&gt;直接在上一句语句后立即使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result&lt;/code&gt; 表示结果即可：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;do shell script &quot;echo $PATH&quot;
display dialog result with title &quot;通知&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/6214E292-E4CB-49BC-B8D2-945C135E5B45_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;显示调试信息&quot;&gt;显示调试信息&lt;/h3&gt;

&lt;p&gt;直接使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; 语句即可，然后在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Script Editor&lt;/code&gt; 下方的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Replies&lt;/code&gt; 中获取输出信息，可以在这里看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell script&lt;/code&gt; 命令执行的过程中，脚本向控制台输出的内容，如执行 js 脚本的时候的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt; 等。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;log do shell script &quot;echo $PATH&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/1089533E-DE38-418F-A20C-592669941C2D_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;显示进度&quot;&gt;显示进度&lt;/h3&gt;

&lt;p&gt;显示进度用到 progress ，语句相对来说比较复杂，因为需要显示不同的状态进度，需要多行：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;set progress total steps to 3
set progress completed steps to 0
set progress description to &quot;处理中...&quot;
delay 1
set progress completed steps to 1
delay 1
set progress completed steps to 2
delay 1
set progress completed steps to 3
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;相关的截图可以在上面看到。&lt;/p&gt;

&lt;h3 id=&quot;延迟一段时间后执行&quot;&gt;延迟一段时间后执行&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;delay n
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;  表示秒数，支持小数。一般用来模拟用户操作的时候的延迟操作，否则可能因为脚本操作过快页面还未来得及显示等。一些奇怪的问题也可以通过延迟执行来解决，此语句可以类比于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; 大法。&lt;/p&gt;

&lt;h3 id=&quot;调用其他应用&quot;&gt;调用其他应用&lt;/h3&gt;

&lt;p&gt;注意，此处会有系统警告，需要你确认才能执行:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/898D7F67-700E-40F2-AC6C-D999F5543578_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;确认后可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;设置-安全与隐私-隐私-自动化&lt;/code&gt;中确认：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/47444D53-68E4-4518-87FD-521AE42B737F_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以调用其他应用来执行相应的操作，下面是唤起 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Terminal&lt;/code&gt; 应用后，激活然后执行命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;tell application &quot;Terminal&quot;
	if not (exists window 1) then reopen
	activate
	do script &quot;echo $PATH&quot; in window 1
end tell
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此语句做了一个判断，如果第一个打开的窗口存在，则激活之，然后在其内执行命令（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do script&lt;/code&gt; ）；如果不存在的话则会新建一个窗口然后在其内执行命令。因为每个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do script&lt;/code&gt; 都会打开一个新的 Terminal 这个判断可以保证复用窗口。不过需要注意的是，如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window 1&lt;/code&gt; 内已经有一个已经存在的进程（如 server 未中断），那么这个命令是不会执行的，还需要额外的判断，此处不展开。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/8701C38B-8CE9-479A-816A-9126692B313D_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;响应-url-scheme&quot;&gt;响应 URL Scheme&lt;/h3&gt;

&lt;p&gt;有些时候你不想先找到 AS 脚本，然后双击运行；或者有时候你需要从另一个应用中调起你写的 AS 应用，这个时候就用到了 URL Scheme，少数派有 &lt;a href=&quot;https://sspai.com/post/31500&quot;&gt;一篇介绍&lt;/a&gt;，可以看看。&lt;/p&gt;

&lt;p&gt;首先你需要修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; 文件，可以在 Script Editor 的右侧，右键 「显示在 Finder」 中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/E1F3DFE5-54E3-4615-9A74-1B084686CC37_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后向上一级，可以看到该文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/DE5F9B08-4F60-4B2A-9645-DF37B420C96B_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;内容是一个类似 XML 的东西编辑之，在其内加入如下字段：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;array&amp;gt;
	&amp;lt;dict&amp;gt;
		&amp;lt;key&amp;gt;CFBundleURLName&amp;lt;/key&amp;gt;
		&amp;lt;string&amp;gt;Open File&amp;lt;/string&amp;gt;
		&amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
		&amp;lt;array&amp;gt;
			&amp;lt;string&amp;gt;xhelper&amp;lt;/string&amp;gt;
		&amp;lt;/array&amp;gt;
	&amp;lt;/dict&amp;gt;
&amp;lt;/array&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后确认一下，用 XCode 打开该文件可以看到类似的条目：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/901047E8-38AA-4B9C-BA60-680EC60864F5_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;表示添加成功。&lt;/p&gt;

&lt;p&gt;这个操作的意思是，将该 AS 应用响应以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xhelper&lt;/code&gt; （可以任意修改成你想要的开头，不要与已有的重复即可）开头的 URL。&lt;/p&gt;

&lt;p&gt;设置完成后，需要在 Script Editor 中保存一下，或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd + L&lt;/code&gt; 一下或者运行一次（或者都做一遍），重新编译，然后才能生效。&lt;/p&gt;

&lt;p&gt;然后，为了让 AS 响应该 URL，需要设置一个事件监听：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;on open location this_URL
	display dialog this_URL
end open location
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this_URL&lt;/code&gt; 即为以你 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xhelper&lt;/code&gt; 打开的链接。&lt;/p&gt;

&lt;p&gt;此时在浏览器中（截图是 Chrome）测试一个链接：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/01F724A1-041B-4143-80CC-5F4F3D6ECFC8_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后 AS 应用就会响应然后弹窗显示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xhelper://你好！&lt;/code&gt; ，注意这里是不用 encode 编码的。&lt;/p&gt;

&lt;h2 id=&quot;我的使用&quot;&gt;我的使用&lt;/h2&gt;

&lt;p&gt;在这里放出我自己的 Craft build 代码，用的是上述的 URL Scheme，其中的 node 执行的 js 都是从 &lt;a href=&quot;/tech/my-blog-ci-in-2022.html&quot;&gt;之前的工作流&lt;/a&gt; 改造的，没有什么新逻辑。另外 AS 的语法比较口语化，直接看就能看懂每句话是什么意思，这里就不一一解释了。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;on open location this_URL
	try
		set startOffset to offset of &quot;://&quot; in this_URL
		set the content to text from (startOffset + 3) to -1 of this_URL
		set node to &quot;/Users/x/.nvm/versions/node/v14.19.1/bin/node&quot;
		set appPath to &quot;/Applications/Xhelper.app/Contents/Resources/Scripts/&quot;
		--- 如果有两个参数表示需要发布到 wechat，如果只有一个参数则参数即为 base64 编码的内容
		set AppleScript's text item delimiters to &quot;&amp;amp;&quot;
		set arguments to every text item of the content
		set AppleScript's text item delimiters to &quot;&quot;
		set listLength to the length of arguments
		if listLength = 2 then
			set realContent to item 2 of arguments
			do shell script &quot;echo &quot; &amp;amp; realContent &amp;amp; &quot; &amp;gt; &quot; &amp;amp; appPath &amp;amp; &quot;content.base64.txt&quot;
			tell application &quot;Terminal&quot;
				if not (exists window 1) then reopen
				activate
				set alive to do script node &amp;amp; &quot; &quot; &amp;amp; appPath &amp;amp; &quot;index.js&quot; in window 1
				--- 等待上一个脚本执行完毕后再执行下一个脚本
				repeat
					delay 0.1
					if not busy of alive then exit repeat
				end repeat
				beep
				do script node &amp;amp; &quot; &quot; &amp;amp; appPath &amp;amp; &quot;wechat.js&quot; in window 1
			end tell
		else
			do shell script &quot;echo &quot; &amp;amp; content &amp;amp; &quot; &amp;gt; &quot; &amp;amp; appPath &amp;amp; &quot;content.base64.txt&quot;
			tell application &quot;Terminal&quot;
				if not (exists window 1) then reopen
				activate
				do script node &amp;amp; &quot; &quot; &amp;amp; appPath &amp;amp; &quot;index.js&quot; in window 1
			end tell
		end if
	on error error_message
		display dialog error_message buttons {&quot;Cancel&quot;} default button 1
	end try
	
end open location
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/F7A4DDFF-2698-4E1E-8D72-C8B3D0EC5020_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html#//apple_ref/doc/uid/TP40016239-CH56-SW1&quot;&gt;Mac Automation Scription Guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/releasenotes/AppleScript/RN-AppleScript/RN-10_10/RN-10_10.html#//apple_ref/doc/uid/TP40000982-CH110-SW8&quot;&gt;AppleScript 10.10 Changes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983-CH208-SW1&quot;&gt;Introduction to AppleScript Language Guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42815166/customize-applescript-app-icon&quot;&gt;Customize AppleScript app icon&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ohdoylerules.com/snippets/using-node-in-applescript/&quot;&gt;Using Node.js in an AppleScript&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://apple.stackexchange.com/questions/21602/where-can-i-access-official-applescript-documentation&quot;&gt;Where can I access official AppleScript documentation?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://apple-dev.groups.io/g/jxa/wiki/3202&quot;&gt;关于使用 JavaScript 写 AS 的相关资料&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.notion.so/AppleScript-c07b90f850ea42e990b3ea2333f9b252&quot;&gt;AppleScript 教程&lt;/a&gt; （Write on Notion）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sspai.com/post/44425&quot;&gt;在 macOS 中制作自己的 URL Schemes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AppleScripe 简明基础教程（iDoraemon Nathan 编著）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 03 May 2022 13:38:32 +0800</pubDate>
        <link>https://www.xheldon.com/tech/applescript-simple-use.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/applescript-simple-use.html</guid>
        
        <category>技术</category>
        
        <category>AppleScript</category>
        
        <category>初体验</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>我的家庭观影之路</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;看电视是家里必不可少的娱乐活动，但是如何舒服的看自己想看的内容却不是一件简单的事，有时候甚至有钱都买不来舒心，更别提诸如会员专属广告、会员还需要额外购买观影券来看当前热播的剧等喂屎行为。于是此处记录一下有关家庭观影的折腾记录，一来可以给大家一个思路，二来可以帮助大家提高生活质量。&lt;/p&gt;

&lt;h2 id=&quot;我的基本情况&quot;&gt;我的基本情况&lt;/h2&gt;

&lt;p&gt;这里先介绍一下我的基本情况，如果情况和你相符的话可以继续看下去；如果与你的需求不甚吻合，也可以继续看下去做个参考。&lt;/p&gt;

&lt;h3 id=&quot;设备&quot;&gt;设备&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;索尼 65X90J 电视作为播放设备，京东 618 买的，￥6000+，实际任意电视均可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apple TV 4K 2021 款作为附属播放设备，京东国际买的 ￥1300，Infuse 只在苹果平台有，直接在电脑上播放也行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;联通宽带送的普通 ZTE WiFi6 路由器作为主路由，免费。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NanoPi R4S 作为&lt;a href=&quot;https://baike.baidu.com/item/%E8%BD%AF%E8%B7%AF%E7%94%B1/4824918&quot;&gt;软路由&lt;/a&gt;，OpenWrt 系统，淘宝买的 ￥500左右，其他软路由系统/硬件均可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://firecore.com/infuse&quot;&gt;Infuse Pro 订阅&lt;/a&gt; 软件做为播放客户端，Apple 美区买的，订阅一年 ￥70 左右，其他支持 WebDAV 等协议的播放软件均可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;联通宽带作为基础设施。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：我的 R4S 的连接方式是 &lt;a href=&quot;https://sspai.com/post/59708&quot;&gt;旁路由&lt;/a&gt; 方式，这样家里一些无需特殊上网的设备就不会异常，比如家里的 360监控摄像头、华为智能灯、小米晾衣架、小天鹅智能洗衣机等，这些智障硬件在家里网络特殊的情况下，无法连接网络，尤其是 360监控摄像头。因此这些设备必须直连，所以只能使用旁路由的方式，大部分的设备默认走直连，少部分设备特殊配置后走特殊网络即可。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;需求&quot;&gt;需求&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;吃饭的时候看央视新闻等电视直播。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;看老旧的美剧、英剧如《老友记》、《权利的游戏》，对新出的美剧不感兴趣，不追剧。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;看会被阿里网盘和百度网盘和谐的电影/电视剧，比如当下正在影院放映的电影、流媒体正在热播的电视剧、爱国敬业诚信友善的电影等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;无聊的时候就想听个响，随便放点动画什么的如《猫和老鼠》、《哆啦A梦》、《蜡笔小新》等每集独立的电视节目等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;看一些蓝光画质的纪录片。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;流畅播放不能卡。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置一次之后，后续不需要再操心，喜欢稳定和一劳永逸。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不想到处找资源下载电影/电视剧，又怕电脑下载迅雷等 BT 下载，会对 SSD 固态硬盘有损害。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对电脑软件有洁癖，能不装尽量不装新软件，如果一个软件能解决的，不会装两个；即使装软件，也尽可能的不影响电脑的环境（此处特指从 Github 上下载的软件），因此优先考虑 &lt;a href=&quot;https://www.docker.com/get-started/#&quot;&gt;Docker&lt;/a&gt; 安装。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：有些人喜欢自动化，比如使用 Sonarr + Jackett + qBittorrent ，设置好之后就可以实现自动追剧，即剧集有更新后自动下载，全程不用手动，但是我的需求没这么强烈，因为我看的大多数剧集大多数都是能通过阿里云盘转存看的国内的剧集，比如一些CCTV 的纪录片和常见的国外剧集如一些 BBC 的纪录片、老友记之类的。因此我没有使用此自动化方案，一来是因为需要额外购买大容量硬盘，二来是因为我主力看电影途径还是通过阿里云盘进行的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前期的无效折腾&quot;&gt;前期的无效折腾&lt;/h2&gt;

&lt;p&gt;想了想，为了避免大家少走弯路，这里还是放上我走过的弯路，给大家个经验教训。如果对此不感兴趣，直接跳到下一节即可。&lt;/p&gt;

&lt;h3 id=&quot;emby&quot;&gt;Emby&lt;/h3&gt;

&lt;p&gt;一开始的时候，鉴于画面优美性、配置简便性，我想使用 &lt;a href=&quot;https://post.smzdm.com/p/735222/&quot;&gt;Emby 服务&lt;/a&gt;，但是市面上的公共的、收费的此类服务，要么是需要特定方式连接，要么是需要特定方式使用（如定时签到、按时回答问题等），最头痛的是此类服务的速度非常差，尤其是看那种蓝光高清的电影，动不动 20G+ 容量起步的时候；或者是晚上观看高峰期，服务质量会非常恶劣。再加上其他的问题如 infuse 客户端会进行扫库操作（当然这个不是 Emby 的锅），因此在我 &lt;a href=&quot;https://www.xheldon.com/life/apple-tv-using-and-problem.html#:~:text=infuse%20%E9%A6%96%E6%AC%A1%E4%BD%BF%E7%94%A8%E6%97%B6%EF%BC%8C%E7%99%BB%E9%99%86%E5%AE%8C%20Emby%20%E6%9C%8D%E5%8A%A1%E5%90%8E&quot;&gt;折腾了一次&lt;/a&gt; 之后就放弃了此种方案。&lt;/p&gt;

&lt;h3 id=&quot;iptv&quot;&gt;IPTV&lt;/h3&gt;

&lt;p&gt;想观看一些各个地方的电视台的直播，于是想到可以使用 &lt;a href=&quot;https://baike.baidu.com/item/iptv/113036&quot;&gt;IPTV&lt;/a&gt;，一般办宽带时候，运营商会有介绍其各自提供的 IPTV 服务，只是运营商的需要额外收费，我用的是免费的。如何免费呢？首先需要下载一个客户端，我用的是 iPlay TV for Apple TV，5.99 美元。然后在 Github 上搜一些直播源的地址填进去（页面 README 会有些怎么使用这些地址），这些地址都是好心人从网络上抓取的运营商的 IPTV 地址。&lt;/p&gt;

&lt;p&gt;但是这个方案的坏处是，直播源是不稳定的，时不时的你就需要手动更新地址，或者地址里面的某个播放源就无效了，经历过几次之后就很头痛，于是后续的看央视直播，我都是要么手机投屏，要么就是用安卓电视安装的 新视听 app 看央视直播。&lt;/p&gt;

&lt;h2 id=&quot;当前方案&quot;&gt;当前方案&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意，下面的所有设置的基础的前提是，家里的设备如 Apple TV、 R4S 、Mac 都在同一个网段，否则无法相互识别。我目前的网段地址是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.7.x&lt;/code&gt; ，比如 R4S 位于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.7.2&lt;/code&gt; 主路由位于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.7.1&lt;/code&gt; ，从一个路由出来的都是在同一个网段，因此此处无需特别关心，此处只是提醒一下，如果总是设置不对，可能有这方面的原因。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;配合 R4S，通过阿里云盘提供的&lt;a href=&quot;https://baike.baidu.com/item/WebDAV/4610909?fr=aladdin&quot;&gt; WebDAV 协议&lt;/a&gt;，使用 Infuse 进行电影观看，只需要网上搜索想看的电影名 + 阿里云盘 转存即可，高阶一点的，电视剧的话搜 电视剧名 + 阿里云盘 + 刮削（意即整理好剧集名和海报、演员表、每季的海报介绍等各种信息了，可以直接在 Infuse 上以电视剧的形式查看）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配合 R4S，通过 qBittorrent 配合 Jackett 搜索插件和软路由的外接硬盘，实现将电影下载到外接硬盘上观看，这样也不会损害电脑的 SSD，同时也不用在电脑上多下一个软件等，此途径是为了弥补上面阿里云盘因为一些原因而被和谐的电影的一种方案。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/869A0533-9AE7-463E-9664-D9A61AD17D47_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;具体实践&quot;&gt;具体实践&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;下面说的全部 R4S 软路由的插件，都是购买的时候商家已经给刷好的系统，可以让商家帮忙刷，无需自己手动安装。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;阿里云盘&quot;&gt;阿里云盘&lt;/h3&gt;

&lt;p&gt;使用 R4S 的阿里云盘插件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;阿里云盘 WebDAV&lt;/code&gt; ，&lt;a href=&quot;https://github.com/messense/aliyundrive-webdav&quot;&gt;项目地址&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/FAD4964F-C3B3-4DA1-8E22-59CC9F206DE8_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;插件装好后非常简单配置一下即可，主要是两个配置，一个是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Refresh Token&lt;/code&gt; 这个需要使用 Chrome 手动打开阿里云盘的 Web 页面，按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opt&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; 打开控制台，然后在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application&lt;/code&gt; Tab 中，点击左侧的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local Storage&lt;/code&gt; 查找 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; 这个键，在下方的值中找到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refresh_token&lt;/code&gt; 的值，粘贴到上图中即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/A081D0DA-BD8E-4440-8E88-304941A8182C_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：这个 refresh_token 顾名思义，是用来获取真正 token 的值，我看过其代码，其逻辑是每 117 分钟重新获取一次（可能 token 是 2 小时过期），否则的话 token 就会过期。因此如果 R4S 断电、网络断开之后，如果发现阿里云盘无法访问了，需要重新获取一次该 refresh_token 填入。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;端口的话，就随便写一个不会冲突的即可，我这里设置的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8982&lt;/code&gt; ，然后勾选 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;启用&lt;/code&gt; 后，点击右下方的保存并应用，即配置完毕。此时你可以直接使用浏览器访问（假设家里路由器地址是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.7.2:8982&lt;/code&gt; ）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/C09F1F1F-4743-4F33-8400-36E0E237814F_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后再在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Infuse&lt;/code&gt;  中配置，让其识别到局域网的这个 WebDAV 服务即可，操作如下，进入设置-网络-共享-添加共享：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/61069572-196F-4874-8122-BAD70096CE68_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;位址就是刚刚的局域网 ip 地址，下方高级中填写端口。然后进入设置-媒体库，把阿里云盘中的文件夹都打上勾，这样就可以在首页看到文件夹了，记住，每次如果有文件删除和新增，如果想及时看到的话，都需要执行一次打勾/取消打勾的操作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/C12D97E3-66AB-41F5-B1CF-559752C3B721_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首页视图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/48F4102C-C6AA-4DB0-8372-8FF271EC5CF5_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其他 Infuse 的使用可以自己发掘一下。&lt;/p&gt;

&lt;h3 id=&quot;qbittorrent&quot;&gt;qBittorrent&lt;/h3&gt;

&lt;p&gt;有时候阿里云盘因为一些众所周知的原因，部分资源会被和谐掉，因此为了下载一些热门剧，或者下载国外的一些剧集的话，只能采用此种方法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/qbittorrent/9179482&quot;&gt;qBittorrent&lt;/a&gt; 支持磁力下载和 BT 下载，可以直接在电脑上安装此软件，但是 BT 下载对 SSD 是有损伤的，我不想直接在新买的 Mac Studio 上使用，于是就将其放到软路由上，然后在 R4S 挂载外接硬盘使用。需要配置一下，才能在路由器上使用此软件，过程如下：&lt;/p&gt;

&lt;h4 id=&quot;挂载外接硬盘&quot;&gt;挂载外接硬盘&lt;/h4&gt;

&lt;p&gt;家里有一个大学时期买的 500G 的机械硬盘（磁盘分区类型建议是 &lt;a href=&quot;https://baike.baidu.com/item/exFAT&quot;&gt;exFAT&lt;/a&gt;，Mac 的 APFS 不被识别，可以使用 Mac 的磁盘管理工具进行格式化），一直放在抽屉吃灰，于是拿来用了。硬盘直接插到 R4S 上可以识别，但是需要挂载，这是个 &lt;a href=&quot;https://baike.baidu.com/item/%E6%8C%82%E8%BD%BD&quot;&gt;计算机概念&lt;/a&gt;，就好比是对软路由来说，有一个外接的硬件通过通用协议 USB 接入到系统中，但是并不知道接入后要如何对待这个硬件。因此此处外接硬盘后，软路由会显示一个挂载点虚拟挂载点（下方的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda&lt;/code&gt; ），表示这个硬盘挂载到路由系统的这个路径下，然后你需要配置一下要将该挂载点映射到实际位于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/&lt;/code&gt; 物理挂载点的哪个路径，才能正确访问该路径下的该外接硬盘设备。&lt;/p&gt;

&lt;p&gt;进入到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;系统-磁盘管理&lt;/code&gt; ，可以看到已经设备了外接硬盘（红框指示的地方），这时需要点下方的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;挂载点&lt;/code&gt; 然后添加该设备即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/7EEFE44B-F57F-4FC9-AF8A-FEB0D88B90A1_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;系统-挂载点&lt;/code&gt; ，如图可以看到下方有个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;挂载点&lt;/code&gt; ：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图中我是已经挂载了，所以会有第一个红框，默认是没有的，你在下方的挂载点添加后即可在上面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;已挂载的文件系统&lt;/code&gt; 中看到。 注：Linux 外接设备挂载的路径一般都是位于 /mnt 下的，添加后注意看容量是否是外接硬盘的容量即可。因为分区的原因，虚拟挂载点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda&lt;/code&gt; 下可以挂载的物理硬盘有两个，一个是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/sda1&lt;/code&gt; 只有几百 M，一个是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/sda2&lt;/code&gt; 才是真正的可读写硬盘。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/54303E2E-02EC-4EFA-8156-3356B8E458AD_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后如果你使用的是 Mac，就可以直接在 Finder 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;网络&lt;/code&gt; 中发现该设备了，因为 R4S 默认带了一个 SMB 共享的程序，即下面说的配置，如果你想更定制一点，可以修改该共享配置（不过在 R4S 中你能修改的也只有名称了）&lt;/p&gt;

&lt;h4 id=&quot;配置-samba-共享&quot;&gt;配置 Samba 共享&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;此处先配置路由器的&lt;a href=&quot;https://baike.baidu.com/item/samba/455025&quot;&gt; Samba 共享&lt;/a&gt;（也即 SMB 协议）的原因是，这样的话就不用使用 SSH 终端登陆路由器来通过命令行修改配置文件了，对小白比较友好，因此将这一步放到首位。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;浏览器进入到路由器配置页面，然后进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;网络存储-网络共享&lt;/code&gt; ， 进行如下填写，其中主机名是显示在 Finder 中的名字，描述和工作组默认就可以，可以看到默认状态下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;自动共享&lt;/code&gt; 选项是打开的，也就是我上一节说的这一步其实不是很需要。但是如果默认自动共享的话，是共享的根目录，会将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/sda1&lt;/code&gt; 也显示出来，我这个强迫症一定要改掉，于是配置下方的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;共享目录&lt;/code&gt; 即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/7C7C0A2E-520C-4B00-9374-36214F11E288_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此处需要注意的是，需要配置一下本页面的第二个 Tab，即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;编辑模板&lt;/code&gt; 然后将需要使用密码和 security 共享类型为 User 的配置改成不需要使用密码和共享类型是 Share 即允许匿名连接，否则需要输入账号密码，麻烦：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/79FA04AC-4689-412A-8C81-EBE17EF8A0D8_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后点击右下角的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;保存并应用&lt;/code&gt; 即可。&lt;/p&gt;

&lt;p&gt;做完以后，直接在 Mac 中的 Finder-网络 就可以看到：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/AD4BFF23-BC65-4601-B44B-DEAB0D0E27C6_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也可以手动连接服务器，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/F81F6D6A-210E-41E4-84A5-BE6F7828E555_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/7CF3B88C-09B8-42F8-96ED-FCDE506F539A_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;配置-qbittorrent&quot;&gt;配置 qBittorrent&lt;/h4&gt;

&lt;p&gt;进入软路由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;网络存储-qBittorrent&lt;/code&gt; 插件中，根据上面的挂载点和挂载目录为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/sda2/&lt;/code&gt; 按如下配置即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/A1529EB2-17DE-4825-8DB5-8EC285616B16_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主要配置的是 配置文件存放路径 和 下载文件存放目录，改成外接硬盘的地址 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/sda2&lt;/code&gt; 下面的路径即可（上图中是已经启动后的界面，未启动的话不会有 「打开 Web 页面」和「qBittorrent 运行中」的提示）。设置完成后点击保存，先不要应用，然后进入到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;下载设置&lt;/code&gt; tab中，将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;启用临时目录&lt;/code&gt; 选项关闭，否则会产生大量的临时文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/C64A0BF2-23FB-4F40-AB39-9757904C1010_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后点击保存并应用即可。&lt;/p&gt;

&lt;p&gt;之后，进入到 qBittorrent 的 Web 管理界面，即路由器地址+刚刚设置的端口号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.7.2:9091&lt;/code&gt; ：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/5C47B593-D0D6-4B0D-BFAE-3B2CF21FAB32_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此就安装完成了，你有什么网上搜到的磁力链接或者 torrent 种子都可以进行下载。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你还是不想到处找种子，或者说网上搜到的磁力链接都是死链，无法下载，那么继续看下面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;设置-qbittorrent-的-jackett-搜索插件&quot;&gt;设置 qBittorrent 的 Jackett 搜索插件&lt;/h4&gt;

&lt;p&gt;该插件可以直接在 qBittorrent 中调用 Jackett 服务搜索资源然后右键下载，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/D10C0DCC-31AB-405D-B7E9-8FEA68D23414_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是这并不是默认配置（好像如果直接下载 qBittorrent 的 Win 或者 Mac 客户端，Jackett 搜索插件是默认启用的，但是路由器没有带任何默认插件），需要单独安装，步骤如下，直接看图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/0C025BE5-98C1-4260-9F38-C0AB79199FD5_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击安装新插件后，会让你输入一个地址，该地址可以从 &lt;a href=&quot;https://github.com/qbittorrent/search-plugins/wiki/How-to-configure-Jackett-plugin&quot;&gt;这里获取&lt;/a&gt; ，或者直接填写这个地址也行，都一样： https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/jackett.py&lt;/p&gt;

&lt;p&gt;之后就会在已安装的搜索插件中出现该插件的列表。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：上述安装只是安装了 qBittorrent 的 Jackett 插件，以让 qBittorrent 配合 Jackett 使用，好比是 Safari 安装了迅雷插件一样，此时还不能使用，还要安装迅雷软件本身，Jackett 插件也是一样，只装插件是不行的，还要装 Jackett 服务才行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;安装-jackett-服务&quot;&gt;安装 Jackett 服务&lt;/h4&gt;

&lt;p&gt;在路由器上直接装 Jackett 这一步我没搞定，总是报错，应该是缺少某个环境配置，最后也不想搞了，因为我会使用 &lt;a href=&quot;https://baike.baidu.com/item/Docker&quot;&gt;Docker&lt;/a&gt; 在 Mac 本地，因此我将这一步放到了 Mac 本地，只需要配置一下 qBittorrent 的 Jackett 插件即可。&lt;/p&gt;

&lt;p&gt;Docker 可以在官网&lt;a href=&quot;https://www.docker.com/get-started/#&quot;&gt; 这里下载&lt;/a&gt;，下载后可以在终端命令行输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; 测试是否环境变量安装成功。&lt;/p&gt;

&lt;p&gt;在 Docker 中安装 Jackett 很简单，步骤在官方的 &lt;a href=&quot;https://github.com/Jackett/Jackett#installation-using-docker&quot;&gt;这个地方&lt;/a&gt;，这里简述一下即可：&lt;/p&gt;

&lt;p&gt;打开终端，复制在官方的安装步骤中的 docker cli 代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker run -d \
  --name=jackett \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=Asia/Shanghai \
  -e AUTO_UPDATE=true `#optional` \
  -p 9117:9117 \
  -v &amp;lt;本地硬盘路径（去掉本句左右两侧尖括号）&amp;gt;:/config \
  -v &amp;lt;本地硬盘路径（去掉本句左右两侧尖括号）&amp;gt;:/downloads \
  --restart unless-stopped \
  lscr.io/linuxserver/jackett
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;比如上面的配置，我的本地硬盘路径就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Code/Docker/config&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Code/Docker/downloads&lt;/code&gt; 。这个配置简单解释一下就是，映射本机端口 9117 到 Docker 容器的 9117 端口，启用自动更新，禁止重启停止除非已经意外停止。&lt;/p&gt;

&lt;p&gt;之后就可以在 Docker 中看到这个服务了（默认直接启动了）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/5CD0C81A-15D4-46F6-B174-C158A782675D_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在浏览器访问该地址： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1:9117&lt;/code&gt; （或者如下图访问本机局域网 ip 也行，是一样的）即可看到 Jackett 的 Web 配置页面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/6DAB50B8-BBFC-442C-A707-D7E2E542808E_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里记住这个 API Key，下一步会用到，接下来配置 qBittorrent 中的 Jackett。&lt;/p&gt;

&lt;p&gt;因为 Jackett 是安装在本地的，因此如果想让安装在路由器的 qBittorrent 的插件能够访问安装在本地的 Jackett，需要知道本机的局域网 ip，可以在系统设置中查看：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/13072C1C-51B3-4AA2-94AA-7F6380094D6A_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后，在 Finder 中打开 qBittorrent 的配置目录（还记得刚才设置 qBittorrent 的配置目录吗？我们存放在了软路由外接硬盘中），Finder 路径是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/qBittorrent/data/nova3/engines/jackett.json&lt;/code&gt;设置该地址和端口：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/7B4A1D7C-6A2F-44C4-A486-4839C7604284_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后刷新 qBittorrent 的页面，打开插件设置，就可以看到该地址和该插件已经配置成功了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/5EA4A29E-0CD0-4ED6-9AAA-43BF96F70307_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此配置完毕。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：配置完 Jackett 后，还要在 Jackett 服务中添加 Indexer ，让 Jackett 知道从哪些网站搜索种子，这个过程比较简单，如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;点击 Add Indexer 然后从弹出来的界面，右侧点击 + 即可，我是将所有类型是 Public 的同时语言是中文或者英文的站点都加入了（加入后这个待加入列表就不显示已经加入后的了，所以截图中很少有中文、英文和 Public 的站点）。Private 的需要会员 cookie：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/9643CEC0-1D25-4931-8411-B37EB09F96FF_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/35B84985-B043-4FD8-B153-45DD8F75EDA8_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Categories 顾名思义就是网站资源类型，其中 XXX 是 你懂的，不过这种资源下载的人比较少，所以比较难用 BT 下载到，因为 BT 的原理是下载的人越多，下载越快。&lt;/p&gt;

&lt;p&gt;另外因为一些历史原因，国内的资源很少，而国外的资源无论多旧，总是很多且很快，哎，大环境下我们每个人都有责任，这里不多说。&lt;/p&gt;

&lt;p&gt;比如下载一个旧的两年前的国产电影《疯狂的外星人》：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/6F54A106-42DB-40AB-A8D9-A9DD5A7E5F66_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;做种和资源都很少，但是下载一个十几年前的国外电影 Harry Potter 却很多：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/3A378FA4-66BD-474D-A38B-CA2DF8FA6CE8_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/8DB69130-0789-43E4-B192-BB8E73DA74B7_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此路由器端配置结束，接下来就是最后一步，在播放端如 Infuse 中添加软路由外接硬盘，观看上面的电影了。&lt;/p&gt;

&lt;h4 id=&quot;配置-infuse&quot;&gt;配置 Infuse&lt;/h4&gt;

&lt;p&gt;这一个步骤就比较简单了，用的还是刚才的配置 WebDAV 的那个方式，只是这次把 WebDAV 协议换成了 SMB 协议，直接上图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/A467446C-B096-4ADD-B14E-E6454425FA34_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;位址&lt;/code&gt; 就是软路由地址，我的就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.7.2&lt;/code&gt;. 端口默认 445 即可。&lt;/p&gt;

&lt;p&gt;下面是效果图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/DA2FBBEA-E138-4BD0-A330-4F3C17A98AFD_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/1A6CBC88-BD46-4F11-8058-E7B41ABD4644_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;

&lt;p&gt;试试阿里云盘的网速测试：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/1BC91F6C-490D-4F64-9B97-7CEFE566C169_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;试试软路由外接硬盘的网速测试：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-way-to-watching-tv/5EC99DBA-D277-4FC4-9F36-CA1B0ADCF42D_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本地外接硬盘（走的是局域网）还没有远端挂载阿里云盘（走的是 HTTP）的速度快的原因是，SMB 有速度限制。&lt;/p&gt;

&lt;h2 id=&quot;后话&quot;&gt;后话&lt;/h2&gt;

&lt;p&gt;电子产品或者软件的目标应该是以人为中心进行服务的，而不是让人来适应软件。这也是 MacOS 口碑比 Windows 好的原因。我相信没有人愿意每天折腾这些东西，谁都想有一个开箱即用的电视、电视盒子、电视软件，但现实的种种使我们无法做到省心，此时不要怕麻烦，为了哪些不会折腾的人而折腾（比如家人），给他们提供一种开箱即用的电视、电视盒子、电视软件，也是一种幸福。&lt;/p&gt;

&lt;p&gt;祝大家都能观影自由！&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Apr 2022 00:57:15 +0800</pubDate>
        <link>https://www.xheldon.com/life/the-way-to-watching-tv.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/life/the-way-to-watching-tv.html</guid>
        
        <category>生活</category>
        
        <category>Apple</category>
        
        <category>折腾</category>
        
        <category>软路由</category>
        
        <category>自由</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>豆角焖面</title>
        <description>&lt;h2 id=&quot;食材&quot;&gt;食材&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;豆角 1 斤左右，太多不好吃&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;大葱、姜、花椒&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;西红柿半个，调味用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;五花肉或臀尖 1 斤左右，其实猪肉都可以&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;盐 2 克&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生抽、老抽、料酒&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;面条 两人份，细的比较好，多了不容易熟，我一般买 3 块钱的&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;准备工作&quot;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;豆角，掰掉两头的尖儿，然后顺势往下拉，把豆角丝儿给去掉：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/28175445-50CD-488F-80ED-F01B139DD3B5_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/1E302DB0-D199-423E-BF67-9F5410FD9F90_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后把豆角手动掰成 4~5 厘米的长度即可，然后用水冲洗干净放在一遍备用：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/671FE42B-3523-4C48-891F-8E91FB1AF1B2_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;五花肉切成块，大葱切碎，姜切片，西红柿切片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/F4514241-9778-4098-A2A8-C1F867BED547_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此处理完毕。&lt;/p&gt;

&lt;h2 id=&quot;开始干&quot;&gt;开始干&lt;/h2&gt;

&lt;p&gt;把锅用水冲一遍，然后擦干：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/4C1462B7-3ABB-4DD0-BED0-1FC223F6990E_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后大火把锅烧干，看不到水之后，放入适量油，所谓「适量」，差不多就是基本能盖住锅底即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/8AD313F5-F2C9-4051-8073-964F191808A7_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;放入葱、姜、花椒，炒一下香一香锅，然后放入肉。&lt;/p&gt;

&lt;p&gt;注意，刚放入肉的时候，肉会粘底，此时不要铲它，稍微等个几秒钟再铲，就可以轻松铲起来而不会粘底了（经验之谈）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/2545D3C9-8BAF-4FC5-9313-A62F69346298_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时可能火比较大，葱姜略糊了些，因此可以倒点料酒，顺便去去肉腥味，一举两得：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/B08B1090-E4DC-4BD1-ADE4-746B8E42A268_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;翻炒均匀，肉炒白以后，倒入生抽提味：&lt;/p&gt;

&lt;p&gt;翻炒均匀，炒半分钟左右后，放入西红柿，目的是提鲜：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/2BBBAD00-BE53-46EB-9F99-7FB5090A57FC_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/27D10E5A-0EA2-47FC-B7C9-07E9960080FE_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;翻炒均匀，大概炒半分钟后，加入半勺盐（约 1 克）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/4C5055FA-4C55-486A-A5F2-0056322E160C_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;继续翻炒均匀，直到西红柿变软到皮都掉，西红柿肉变烂，然后加入豆角：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/FE8C37AD-430A-47EA-AE39-08E2BB99CA72_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;翻炒均匀，至豆角都沾上锅内的食材的味道后，加入老抽上色：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/36EF7CE4-78E3-4022-9E88-E553909129B3_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时再加入半勺盐（约 1 克）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/4E6D7E77-6130-4024-AFEC-F159F6D3711D_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;翻炒均匀，然后加入食用水至刚好没过食材：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/93846377-B686-4184-800B-79380961CDEF_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后盖盖，小火煮 20 分钟：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/5C254E48-FDB8-4E37-A76F-E24C66FAE219_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;干完以上活儿之后，随手擦干净灶台：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/CCE94AE1-46AD-4A34-B17B-190CC53D9BFD_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;时间到了差不多的时候，看食材基本熟了后，尝一尝咸淡，没问题之后，保证水刚好处在食材下面一点（不能过少，也不能没过食材）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/1398C533-B68D-4DE5-B7E2-EA36EFF99EB4_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后放入面条，摊均匀，注意不要把面条接触到锅，不然锅的温度比较高，而且没有水，比较容易糊：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/53397255-EC27-42B3-BB32-1A105F812223_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;盖上盖子，继续煮个5分钟：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/F2717211-4D4A-495C-BF7B-DE050B8D72F0_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在此过程中，不要走开，随时观察水量的多少（如果对水蒸发的速度没有把握的话），水不要烧干，要还有一点水，这样可以适当浸润面条，然后将食材和面条搅拌均匀，就可以出国了。&lt;/p&gt;

&lt;h2 id=&quot;成品欣赏&quot;&gt;成品欣赏&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/dou-jiao-men-mian/0E24E86D-52ED-4770-BFD9-3D077E4D183F_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;关键点&quot;&gt;关键点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;一定要加西红柿，这是秘方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后的水，不要太多，也不要太少。太多的话，面条会比较咸，太少的话，面条又太干。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 11 Apr 2022 23:07:19 +0800</pubDate>
        <link>https://www.xheldon.com/life/dou-jiao-men-mian.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/life/dou-jiao-men-mian.html</guid>
        
        <category>生活</category>
        
        <category>美食</category>
        
        <category>主食</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Apple TV 使用体验及相关问题</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;房子刚装修完要添置家具家电，因此电视肯定是必不可少的。以我这么些年买东西的经验，电子产品的话国产的品牌肯定是不考虑的，因为 &lt;a href=&quot;https://baike.baidu.com/item/%E6%87%82%E5%BE%97%E9%83%BD%E6%87%82/53156849&quot;&gt;懂得都懂&lt;/a&gt;。因此最后理所当然的选择了高端电视品牌——索尼——的低端型号：XR-65X90J，是所谓次世代 XR 芯片的入门款。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/9CD31EF6-CA60-4BBB-BA88-B92485438867_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然买的是国外的牌子，但毕竟是国行的产品，因此按照广电总局一贯的尿性，会阉割一些功能。由于我在研究电视之前忽略了这一点，在电视上墙装好开机准备使用的时候才发现其原本支持的 AirPlay 功能被阉割了，这导致如果要想在电视上看视频，要么买一个乐播投屏的会员用手机上的视频会员投屏到电视上观看，要么再在电视上买一个各种视频服务的 TV 版本。&lt;/p&gt;

&lt;p&gt;乐播投屏，据称使用的是&lt;a href=&quot;https://www.v2ex.com/t/793532&quot;&gt;破解版的 AirPlay 协议&lt;/a&gt;，因此在安卓设备上（电视使用的都是安卓系统）可能会有一些视频的声画不同步，且不支持 4K 画质，而且还得额外下载软件，很不优雅。而再买一个各种视频服务的 TV 版…「我为什么花了 6000 多买电视之后，还要在同一家视频服务提供商手机和电视上掏两份钱，就因为安卓的电视动了某些人某些部门的蛋糕？」——媳妇儿的原话。&lt;/p&gt;

&lt;p&gt;因此，最终本着宁可把钱扔水里听响也不惯着国内的某些恶心服务的反骨原则，买了 Apple TV。至于为什么不买国产盒子，一个是因为家里设备都是苹果生态，还一个是因为「&lt;a href=&quot;https://zh.moegirl.org.cn/index.php?title=%E6%88%91%E6%98%AF%E8%AF%B4%E5%9C%A8%E5%BA%A7%E7%9A%84%E9%83%BD%E6%98%AFoo&amp;amp;variant=zh-hans&amp;amp;mobileaction=toggle_view_desktop&quot;&gt;恕在下直言，我不是针对谁，我是指国产的所有电视盒子&lt;/a&gt;」都是低价卖硬件，然后通过植入广告追回成本的电子垃圾。&lt;/p&gt;

&lt;p&gt;这里分享一个我之前使用乐视电视遇到的奇葩经历。我有次在用 Switch 连接电视玩儿塞尔达，Switch 跟电视之间的连接当然使用的是 HDMI 线连接。就在我肆无忌惮的在海拉鲁大陆耍流氓的时候，乐视电视屏幕的下方突然弹出来一个 XXX 剃须刀的广告。这让我大为震惊：Switch 输出信号到电视的时候，乐视电视居然能做到将广告浮层覆盖掉游戏信号，这种肆无忌惮的广告行为，简直太离谱了！&lt;/p&gt;

&lt;p&gt;加上其他一些原因如，开机广告、4K 支持、软件生态、以及最重要的，一个智能电视盒子该有的样子：简单和省心，而不是和电视盒子开发商、视频服务提供商斗智斗勇，因此最终选择了 Apple TV。&lt;/p&gt;

&lt;p&gt;我购买的 Apple TV 是直接从京东国际买的 32G 支持 4k 的 2021 最新款，用了大概半个月才邮到。需要注意的是京东国际买的东西不支持 7 天无理由退换货。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/111CFE67-B728-4917-8436-B0931BDB4C0D_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;网上有个关于 Apple TV 的笑话，大致意思是嘲讽苹果的这个命名方式，即叫 XX TV 却不是 TV（电视）。这个笑话不是没有道理，因为 Apple TV 其实就是一个和小米盒子、机顶盒一样的电视盒子而已。只不过它是苹果生态的东西，因此如果有其他苹果的设备，体验会无缝一点，除去这一点之外客观上讲没有其他优点。你说它支持 4K 视频输出、WiFi 6？&lt;a href=&quot;https://store.google.com/us/product/chromecast_google_tv?hl=en-US&quot;&gt;谷歌 TV 盒子&lt;/a&gt; 和 &lt;a href=&quot;https://www.amazon.com/fire-tv-stick-with-3rd-gen-alexa-voice-remote/dp/B08C1W5N87&quot;&gt;亚马逊火棒&lt;/a&gt; 也都支持。&lt;/p&gt;

&lt;h2 id=&quot;使用条件&quot;&gt;使用条件&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里说的使用条件，如果不满足并不是说不能用，而是说会缺少很多很棒的体验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;非国区账号&quot;&gt;非国区账号&lt;/h3&gt;

&lt;p&gt;首先「因为一些众所周知的原因」，Apple TV 是没有国区国行的，这也是为什么你只能买海外版的原因。因此，你拿到设备后登陆中国的 Apple ID 账号后会发现，你甚至不能装任何软件（没有 App Store），而只能纯粹的用来当成一个 AirPlay 的设备。&lt;/p&gt;

&lt;p&gt;鉴于此，你需要一个非国区的 Apple ID，推荐使用美区的账号，应用比较全。因为需要和爱人组成家庭共享，所以我的主力账号是国区账号。而 Apple TV 使用的是美区的账号，充值是在苹果的美国官网上通过 Visa 信用卡购买充值卡进行充值（单独使用 Apple TV 不需要充值，只是这里多提一句，购买部分 App 的时候才需要付费，很多软件是免费的，比如 Youtube 等）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/E7325139-665F-4F0D-9A20-700B1145F956_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;科学上网的路由器和机场&quot;&gt;科学上网的路由器和机场&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;什么是科学上网？点击查看 &lt;a href=&quot;https://baike.baidu.com/item/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/56550286?fr=aladdin&quot;&gt;百度百科的解释&lt;/a&gt; ，本文的科学上网指的是&lt;strong&gt;合法的使用代理软件&lt;/strong&gt;，为了&lt;strong&gt;符合社会主义核心价值观的目的&lt;/strong&gt;，&lt;strong&gt;合法的访问国际互联网&lt;/strong&gt;的行为。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;什么是机场？点击查看 &lt;a href=&quot;https://baike.baidu.com/item/%E6%9C%BA%E5%9C%BA/74273?fr=aladdin&quot;&gt;百度百科的解释&lt;/a&gt;，本文的机场指的是提供代理节点的服务商，需要配合科学上网使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为 Apple TV 的封闭，其系统名叫 tvOS，基本可以认为是阉割版的 iOS 系统，且其没有开放系统代理的接口。因此你无法通过像在 iOS 单独安装小火箭、QuanX 等代理软件的方式让 Apple TV 科学上网。因此如果你想有一个较好的体验如在电视上看 Youtube、NetFlix、HBO 等服务的时候，你一定是需要一个科学上网的路由器。&lt;/p&gt;

&lt;p&gt;这个过程看似很麻烦，不过好在这个成本是一次性的，一劳永逸，因此值得投资。我用的是朋友推荐的 R4S 软路由的方式，以旁路由的方式进行连接。&lt;/p&gt;

&lt;h2 id=&quot;硬件介绍&quot;&gt;硬件介绍&lt;/h2&gt;

&lt;p&gt;包装内只有一个 Apple TV 本体、一个遥控器和 DC 电源线，因此你拿到手之后还需要一根 HDMI 的线才可以连接电视（买电视会带 HDMI 的线）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/D0D65DC4-7A09-47F9-8FF5-420F52A0730F_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;apple-tv-本体&quot;&gt;Apple TV 本体&lt;/h3&gt;

&lt;p&gt;本体接口有三个，DC 电源接口、HDMI 接口、网线接口，具体参数可以上网查。需要注意的是，你最好使用一根 HDMI2.1 的线连接电视，才能保证输出 4K 的视频（当前视频得是 4K的）。&lt;/p&gt;

&lt;h3 id=&quot;遥控器&quot;&gt;遥控器&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/4D193C9F-5404-4D0E-B93A-7C23F94867C6_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2021 最新款的遥控器相比于上一个版本移除了陀螺仪。其在右侧有一个 Siri 的按钮，但是 Siri 语音有限制，需要将系统语言设置为支持的语言才行，否则是不可用的。不过好在我也没有在 Apple TV 上使用 Siri 的场景。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/550701FF-6652-44B4-A6AB-90520A0BC068_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/45E7926C-5290-48FE-9909-C2ACF215CFA7_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外，我始终没有搞明白苹果的这个账号体系之间的关系。&lt;/p&gt;

&lt;p&gt;我的播客和照片是跟着国区 id 的，打开可以看到是我的主力国区账号的内容，但是音乐和 App Store 是美区的。我之前一直以为播客和音乐及 App Store 和 iTunes 是跟着 iTunes id 的，照片是跟着 iCloud id 的，看来我还是不够了解苹果的账号体系。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/95B42D16-2181-4CE6-A349-A97AB7681E83_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/85C81340-5ED6-4C6C-9FED-54EBDFF90021_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;新购 Apple TV 送三个月的苹果自产的视频服务 Apple TV+ 和三个月的 Apple Music。&lt;/p&gt;

&lt;h2 id=&quot;安装软件&quot;&gt;安装软件&lt;/h2&gt;

&lt;p&gt;安装软件和在 iOS 一样在 App Store 中搜索即可，没有上手成本。&lt;/p&gt;

&lt;p&gt;不过这里需要注意的是，如上所言，推荐在 Apple TV 上对 App Store （iTunes Store）单独登陆非国区账号，而&lt;strong&gt;设备账号（iCloud 账号）还是使用国区的账号&lt;/strong&gt;较好（如果你的主力账号是国区的话），这样的话你的照片应用中显示的是国区账号的照片，可以在 TV 上查看照片（否则白白浪费了一个应用）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/AA65E53B-E17C-4B63-BD7E-EF20BCF76DC0_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外这么做的最大的好处是，当时在 TV 上需要使用键盘的时候，你登陆相同 Apple ID 的手机或平板会自动显示出一个通知（仅限当设备在附近的时候），提示你可以通过手机键盘输入内容，甚至不用手机解锁也可以使用，体验非常好（相信你肯定有过使用遥控器在电视上输入内容的糟糕体验了）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/22C1A388-7EAE-4F48-9CB8-CAE3793AFCFC_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;手机会弹出如下界面，直接输入即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/FB9FB5B6-2EA1-47BD-8E56-7E1DF62936FE_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;视频&quot;&gt;视频&lt;/h2&gt;

&lt;p&gt;我通过 Apple TV 看视频的方式有四种，分别是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;AirPlay&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;视频整合服务，代表是 Emby 等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;直接下载视频软件观看&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用国内支持 WebDAV 协议的网盘观看（我目前使用的方案），如 阿里云盘。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;airplay&quot;&gt;AirPlay&lt;/h3&gt;

&lt;p&gt;最直接也最简单的方式是 AirPlay，毕竟是苹果生态的东西，体验都是无缝的，可以将手机上的任何内容投屏到 TV 上观看，需要在同一 Wifi 下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/5BB8B979-8DA3-42D2-9FF9-D3D52C6A5956_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过这里需要注意的是，由于国内各大视频服务提供商的一贯尿性，如果你是直接通过手机系统级的投屏，放到 TV 上进行观看，优点是手机上的全部内容都会显示在 TV 上，包括弹幕和手机的通知等，但是缺点也是很大的，即无法全屏：视频的上下总会有黑边，无法放大无法铺满。&lt;/p&gt;

&lt;p&gt;而如果使用视频服务提供商提供的投屏服务（一般在视频播放的右上角），会有一定几率出现无法投屏或者手机上显示已经投屏但是电视只有声音的情况，这个现象我目前没有发现必现的路径，纯粹是运气，不过好在一般情况下还是支持良好的，十次有七八次是成功的。不过这个方式的缺点是无法显示弹幕，如果要显示弹幕则必须在安卓电视上（不是 Apple TV 上）使用对应视频服务提供商的 TV 版本才行，手机上的视频客户端投屏（也是使用的 AirPlay）无法显示弹幕。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/6086592B-D350-4288-AAE4-1052C960B011_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正常播放应该是这样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/21166625-89F6-4493-B831-2613E5755B9E_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外一点是，有些视频因为受版权保护，视频服务提供商是不提供投屏的功能的，此种情况常见于一些当下热门的剧，此时也只能使用第一种方式（可能也无法实现，因为软件会检测到是否当前正在投屏）。&lt;/p&gt;

&lt;p&gt;从这里也可以看出，如果厂商不想让你投屏，是完全有能力进行限制的。&lt;/p&gt;

&lt;h3 id=&quot;视频整合服务&quot;&gt;视频整合服务&lt;/h3&gt;

&lt;p&gt;此类服务有很多，违法是肯定违法的，但是因为比较难判定，比如我纯粹做慈善不收费（但是需要保持活跃度）的人很多，所以算是法律的灰色地带，另外一般情况下热门剧是不会立即上的，因为那段时间视频服务提供商是严堵时期，因为直接侵犯了其合法权益，不过如果是一个过气的剧集，就没这么麻烦了。另外这类服务大部分是国外的未过审的剧集如权利的游戏（未删减版）、武大头未删减版等等。&lt;/p&gt;

&lt;p&gt;当然，所谓存在即合理。当前版权问题愈发严重，有时候你只是为了看某一个平台的独占剧但是该平台其他的剧都很垃圾不感兴趣（点名优酷的甄嬛传）而不得不开通它的会员的话，就非常浪费钱了，因此就出现了一个可以整合各个视频服务的私有平台。&lt;/p&gt;

&lt;p&gt;窃以为此类服务没有受到国内各大视频服务提供商的围剿的一个很大的原因是，它太小众了，且里面的内容大多数是国外流媒体平台的内容，对国内的厂商没有直接的利益损失。&lt;/p&gt;

&lt;p&gt;我使用的服务是一个叫 Emby 的东西，它是一个协议，其设计目的是用来给个人构建家庭点播影院，类似于 NAS 的东西，不过也可以用来对外提供收费视频服务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/84DD7704-7AFF-4103-BF31-72A350E9B9B4_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基本原理就是将尽可能多的电影存到硬盘里面（此类硬盘通常以 T 甚至 PB 来计数），然后在连接上网络之后，就可以点播硬盘上任意一部电影，非常适合电影收集癖或者追求高级，非8K 电影、非杜比音效不看的人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/9CFAE45F-DBA5-4CB2-85D5-4F49373BBDC3_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有些 Emby 服务的提供商属于是自产自销类型的（我目前主力机场服务即是），即一边卖科学上网节点的（其靠流量收费），同时提供免费的 Emby 服务，然后限制使用此 Emby 服务观看视频需要使用它们的特定节点进行连接，这就消耗了它们的流量，于是你就需要付费购买流量，形成了一个闭环。&lt;/p&gt;

&lt;p&gt;说到这就说一下我的经历，在我使用的这家机场还未提供 Emby 服务的时候，我购买的套餐一个月有 500G 的流量，我平常只是查查资料、看看文档、看看 TED 和 Youtube、刷刷 Tiktok，每月最多使用10 G 的流量，非常浪费。然而当机场提供 Emby 服务之后，我一个周六就可以消耗 70G 的流量，可见该自产自销策略的成功之处。&lt;/p&gt;

&lt;p&gt;于是有些人就发现了商机。这些人专门提供 Emby 视频服务，然后和机场服务合作，让其将 Emby 当作一项增值服务提供给它的机场用户，如此一来，既提高了机场用户的粘度，又能让 Emby 服务商专心做 toB 的服务，解决了用户群体的问题，简直双赢。此类服务以 普拉斯影业 为代表。&lt;/p&gt;

&lt;p&gt;现在网上有很多号称免费提供 Emby 服务的播放源，懂得都懂，它们并不免费，消耗的是你的精力和时间（如需要回答问题、定时签到做任务、保持活跃度否则销号等，简直把人当猴耍），因此这里建议找一些靠谱的朋友，去买一个口碑较好的 Emby 服务提供商（从实际情况看，因为违法，因此此类服务并不能通过搜索引擎得到，需要注意甄别假冒骗钱的网站，靠已经在使用的朋友推荐是最保险的办法）。&lt;/p&gt;

&lt;p&gt;目前我在 Apple TV 上使用的支持 Emby 协议的客户端是大名鼎鼎的 Infuse 7。此类软件的最大好处一个是即点即播，一个就是可以给你自动匹配你想要的字幕，不用你再单独上网找字幕然后设置为与视频同名来挂载了，还会自动下载元数据。它的元数据不是根据你的视频名，而是根据你的视频内容来拉取的，具体是怎么实现的不清楚。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/9AFF44A0-6796-4ADA-B5F6-1DE5EDDDA1E0_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也即，即使你下载了一个名叫《夏洛T烦恼》（懂得都懂，热门剧刚出的时候，用迅雷下载防和谐会故意将名字改名），它也能正确给你匹配出影片的信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/A642EE4B-CE4A-4DE0-B6AE-5CB58FEDBA9B_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该软件需要付费订阅或者买断。我选择的是按年一年 9.99 美元，一个月不到 6 元人民币。其服务可以试用一个月，过期后将无法再看视频，点播放的时候会直接跳到付费页。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/E4E8CE18-2FF8-4B11-A012-B8D5975DF451_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要额外说一句的是，这个价格只是你的软件价格，视你的美区账号设置的地区情况，你可能需要额外再缴一笔税：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/1D875C5F-9D7B-4055-A147-48E05476D45B_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;infuse 首次使用时，登陆完 Emby 服务后，会进行一个扫库操作，也即是将该 Emby 服务中的所有电影都扫描一遍 meta 信息，建立索引，以方便你通过搜索进行电影查找。该扫库过程视节点速度、网络带宽、是否高峰期等因素影响，这个过程中右上角的搜索 icon 会一直 loading 转圈，此过程进行的过程中无法播放视频（因为没完全建立索引）。我的 Emby 服务提供商库里面约有 17万部电影，机场峰值速度据称是 300Mbps，扫库这个操作花了大概 1 个小时左右的时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/FEAEE241-DDC0-479D-A4BF-AD7A725BBF37_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里需要注意的是，infuse 如果看多了视频的话，似乎很占用空间，我的 Apple TV 是32G 版本的，除去系统占用和其他 App，怎么着也得有个 20G 的空间，但是有一次我打开 infuse 的时候，软件居然提示我文件因为占用空间过多被系统清理了，因此又重头进行扫库操作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/64A8E3C7-A5DE-4E89-B3FA-A53EF4B82FDD_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个软件还大概一个月约两三次的时候，打开会提示正在优化空间和 meta 信息，需要等几分钟才能使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/A76CE877-8D49-4741-8380-CCE90F8E3A57_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不知道这个跟我的 32G 空间太小有关，还是软件设计如此。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/9B557ECC-AB37-44B1-A1BF-A061AACF2387_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;播放效果（跟片源和电视有关）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/6F924E4B-8D8A-44AA-8DB7-DB452D5CA567_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外，还可以使用一个叫 Emby 的 App，不过它经常抽风打不开（就是一直在 Loading 界面），而且无法拖动进度条（后来才知道是视频服务提供商的锅）我就没用了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/2A7966B3-F09B-4256-8C72-50DAA2ADC959_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果有幸能使用的话，播放界面也很精美：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/DAE61178-D292-4C8F-B8C6-30D29DE34270_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/98EA12E1-B7A3-4B47-A3B5-0E3018DCE436_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是，因为这类服务是需要机场的，&lt;strong&gt;因此服务并不稳定&lt;/strong&gt;，一直 Loading 加载是常用的事情，所以除非觉得网速非常好，所以一般跟媳妇儿一起看电影的时候，我不使用此方案，因为看一会儿就 Loading 的时候很影响心情，会被骂。&lt;/p&gt;

&lt;h3 id=&quot;视频软件&quot;&gt;视频软件&lt;/h3&gt;

&lt;p&gt;当然，你也可以选择直接在 Apple TV 上安装视频软件，但是美区的 App Store 无法下载国内的各大视频软件如爱奇艺、腾讯视频等，你只能下到这些视频的海外版。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/8BF071E5-7B34-4770-AD8F-CBC51F1AE046_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这些国内视频服务提供商的提供的海外版本，没有广告，或者广告非常短（相比于国内 30s 视频让你看 45s 广告而言），但与此相对应的，视频内容也少的可怜，猜测可能是版权问题如当前热剧只能在大陆播放，且会员费用很贵（因为是按国外的收入标准收费的，换算成人民币当然很贵）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/F581090E-0280-489D-970C-1B572E9F94DB_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此方案用来追国内剧属于是不可用的，我只是拿来说说，因为指不定万一哪天文艺复兴、晋太元中、大清亡了呢？国外剧的话可以直接下载 Netflix 等软件即可，因为国外的视频服务提供商对版权保护很严格，比如美洲的剧不能在亚洲播放，因此你的机场要购买能够解锁这类视频服务的才行，购买机场服务的时候此功能会被当作一个卖点拿出来说的（下图中的机场价格属于是高端产品了，请无视）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/IMG_0022.jpeg.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外如果你不追剧，只是看一些博主的话，直接在 Apple TV 上下载 YouTube 就可以了，不像在安卓电视上得单独下载 YouTube for TV（也叫什么 smart Youtube）。安卓电视直接下载 YouTube 的话会因为缺少谷歌套件无法使用出现闪退的情况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/CBAB1105-B9B1-48A2-81CF-18016684CDFD_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外，Apple 也有自己的自制剧，该服务叫 Apple TV+，只需要订阅即可（跟订阅 NetFlix 一个道理），新购 Apple TV 送一个月的会员（还是三个月我忘了，之前都是送一年的），有一些苹果的自制剧如《看见》（马王主演）、《基地》、《为了全人类》等，我没兴趣，所以试用了一个月后就取消了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/847B3C92-5C9D-4DCA-A0B1-056AB1A866D0_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/AE2EED5B-0F2A-4B2B-82B3-93DE99CCBEE9_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;支持-webdavsmb-等协议的云盘或者本地共享&quot;&gt;支持 WebDAV、SMB 等协议的云盘或者本地共享&lt;/h3&gt;

&lt;p&gt;此类以阿里云盘为代表（此处点一下 百度网盘），其不限速的同时支持 WebDAV 协议，使用一个支持 WebDAV 协议的 Apple TV 客户端即可观看网盘里面保存的视频。上面说的 Infuse 软件「恰好」就支持 WebDAV。加上由于是国内的网速，因此观看 4K、蓝光等片源是非常棒的体验。缺点是无法看违禁电影会被和谐。&lt;/p&gt;

&lt;p&gt;另外此方案有一个门槛是，你必须有一个软路由/Docker 来进行一个所谓的中转服务的作用，直接使用客户端是不行的（阿里云盘不提供直接对外的 WebDAV 服务）。因此这里我还是使用 R4S 软路由，装了 Github 上的阿里云盘 WebDAV 插件，简单配置一下，即可构建一个本地的 WebDAV 服务，然后在 Infuse 中填写本地软路由的 ip 和端口号即可播放。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/434E2D9C-7661-4BB6-A829-F0F2D38BED07_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还可以通过电脑的 SMB 共享的方式，让 Infuse 播放电脑上下载的电影：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/D0234040-BB60-409C-B6E4-77EDCCACCF3F_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;其他方案&quot;&gt;其他方案&lt;/h3&gt;

&lt;p&gt;有一些非正式的、比较 HACK 的方案，我自己没精力搞，各位看官有兴趣可以研究下，如：&lt;/p&gt;

&lt;h4 id=&quot;在-apple-tv-上刷-b-站miao-项目-网图&quot;&gt;在 Apple TV 上刷 B 站：&lt;a href=&quot;https://github.com/Paladinfeng/MiaoProject&quot;&gt;miao 项目&lt;/a&gt; （网图）&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/3BB01686-1848-475B-B4A2-12F2C1537730_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;电视直播&quot;&gt;电视直播&lt;/h2&gt;

&lt;p&gt;有些时候是有看直播的需求的，比如春节联欢晚会、冬奥会开幕式等，此时 Apple TV 就有明显的不足了，你可以淘宝购买一些直播源（如 IPTV 的），然后通过特定软件观看，但是终归不是正途，且这些直播源基本都是有时效性的，很快就会过期，这里不推荐。&lt;/p&gt;

&lt;p&gt;如果非要使用的话，可以使用 iPlayTV 这款软件，美区价格 5.99 美元，可以在 github 找一些播放源，如 &lt;a href=&quot;https://github.com/imDazui/Tvlist-awesome-m3u-m3u8&quot;&gt;这里&lt;/a&gt; ，直接添加地址即可，如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/94283D89-0867-4BE5-BE82-843DD9F2A6DF_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/518E6DBA-D33A-4635-849A-5C8059C76C8B_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/301C07D2-42EF-4D33-9E90-069805E3628B_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/64F471F8-25D0-404E-9A0C-3F0D2B95B1A8_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更推荐的方式是直接在安卓电视上安装软件，我在电视上安装的软件叫 「央视频」，偶尔看看 CCTV-1 的直播，找回一下小时候的感觉，还是不错的。&lt;/p&gt;

&lt;h2 id=&quot;游戏&quot;&gt;游戏&lt;/h2&gt;

&lt;p&gt;是的，Apple TV，一个电视盒子是可以打游戏的，不过最新款（2021款）的Apple TV 的遥控器取消了陀螺仪的体感加速计传感器，因此无法使用遥控器玩儿一些需要体感的游戏如赛车了，不过你可以用上一代的遥控器，或者外接配对手柄，手柄我目前自测的支持 PS4，我还有一个 XBox 的手柄，但是没做测试，理论上应该也支持。&lt;/p&gt;

&lt;p&gt;不过，Apple TV 总归是个电视盒子，其主力并不是用来玩儿游戏，因此其机能十分有限（从它才 1000 多的售价就能看出来），因此除了最开始的好奇心之外，我一直没有用它来玩游戏。&lt;/p&gt;

&lt;p&gt;Apple TV 上玩游戏跟手机上一样，下载相应游戏 App 即可，没有上手成本。&lt;/p&gt;

&lt;h2 id=&quot;其他使用问题&quot;&gt;其他使用问题&lt;/h2&gt;

&lt;h3 id=&quot;apple-tv-无法控制电视音量&quot;&gt;Apple TV 无法控制电视音量&lt;/h3&gt;

&lt;p&gt;有些老旧的电视（如我之前用过的乐视电视），Apple TV 的遥控器无法控制电视音量，因此需要特别在 Apple TV 的系统设置中单独设置，基本操作是会让你使用电视遥控器先调到最低印象，再调到某一个音量，即可完成设置，之后你就可以通过 Apple TV 的遥控器控制电视音量。我买的索尼电视比较新，因此默认支持无需设置。&lt;/p&gt;

&lt;h3 id=&quot;打开-apple-tv-自动打开电视&quot;&gt;打开 Apple TV 自动打开电视&lt;/h3&gt;

&lt;p&gt;有些老旧的电视（如我之前使用过的乐视电视）无法做到，因此当时只能依次打开二者。这其实是靠一个通用的协议来实现此功能的，稍微新点的电视均支持。&lt;/p&gt;

&lt;h3 id=&quot;软件强退&quot;&gt;软件强退&lt;/h3&gt;

&lt;p&gt;有些时候软件会卡死，此问题尤其是我用 infuse 的时候经常出现，比如按了播放之后，进入播放 loading 界面，然后在还未开始播放的时候我按了暂停，之后再按播放就无法播放了，只能强退后重新进，而强退后大概率是需要重新 loading 的，非常烦人，我都想放弃 infuse 了。软件强退的方式是双击 home 键，也即返回键右侧的那个键即是，然后和 iOS 一样，上滑退出：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/apple-tv-using-and-problem/8B3D08CD-72B7-42F7-AD76-9CB6E73B754F_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;其他想到的，在这里补充。&lt;/p&gt;

&lt;h2 id=&quot;写在后面&quot;&gt;写在后面&lt;/h2&gt;

&lt;p&gt;本文整体上写了使用 Apple TV 可能会遇到的各种问题，有些问题如果没有一些技术背景可能很难解决。不过，只要想解决，你总会有办法的。&lt;/p&gt;

&lt;p&gt;本文内容并不全面，有一些还没有谈到的东西，欢迎交流。&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Mar 2022 10:16:48 +0800</pubDate>
        <link>https://www.xheldon.com/life/apple-tv-using-and-problem.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/life/apple-tv-using-and-problem.html</guid>
        
        <category>Apple</category>
        
        <category>生活</category>
        
        <category>使用体验</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>【泡脚时间】第一期：为什么主流国产历史剧让人感觉非常假？</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;因为工作的原因，爱人每天会比我早出门一个小时，而下班会比我早到家两个小时。因此除了吃早饭的短暂时间外，在工作日的时候，我们两人交流的时间很少。因此，所谓「泡脚时间」即是每天下班回来后，给爱人烧水泡脚的时候，两人交谈的短暂时间，话题无所不包，语言也大部分是口语没有逻辑可言。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;正所谓，两个苹果交换，双方还是只有两个苹果；而两个思想交换，却不止两种思想产生。因此在这里我将我们交谈的部分观点写出来，有两个目的，一个是为了不愿做「沉默的大多数」而愿意作为一个普通人发声，另一个原因是我觉得在当前这个舆论环境下，我们大多数人可能都会有一种错觉：我身边认识的这些线下的同事、同学、朋友，为什么和网络上的人的言论和行为，有如此大的割裂感？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为我和爱人都是双非本科毕业，她是艺术类院校，我是工科类院校，没有读过很多社科、哲学、人文之类的书，因此有些观点是非常市井的，所谓屁股决定脑袋，所以我能意识到有此问题存在。不过正如上面所言，我说是普通人的话，想的是普通人的事情，皇帝是否用金勺掏粪，我不关心。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;为什么有些国产历史剧让人感觉非常假&quot;&gt;为什么有些国产历史剧让人感觉非常假？&lt;/h2&gt;

&lt;p&gt;在众人锤头丧气的时候他慷慨激昂，义愤填膺；在其他人都说不好的时候，他却说好；在炮弹纷飞中他泰然自若，闲庭信步；炸弹总能准确无误的躲开他。你觉得这种历史剧能让人看得下去吗？&lt;/p&gt;

&lt;p&gt;伟人之所以不同于普通人，更重要的一点是时事造英雄，而不是他本来的剧本就是一个伟人。用一个比较形象的说法就是「养蛊」：一个蛊里面有很多虫子，其中有些虫子很强，有些虫子很弱，但是谁也没有一统全蛊的实力，它们在蛊里面厮杀，较强的杀死了较弱的，然后体力消耗了一些，于是又被其他虫子杀死。不管里面的虫子有哪些特长，经历过什么虫生变故，最终他们其中的只有一些甚至只有一个会活到最后。于是，我们称这个虫子为「伟人」。之后，这个虫子的后代就会分析，它的先辈是如何在艰苦卓绝的环境中，排除种种错误选项，站在时代的高度，脱颖而出，最终活下来的。&lt;/p&gt;

&lt;p&gt;这种分析有意义吗？&lt;/p&gt;

&lt;p&gt;我这么说并不是蔑视伟人在历史进程中的地位。相反，&lt;strong&gt;我非常赞同，伟人是伟大的&lt;/strong&gt;，他们经历了常人没有经历的人生，并最终为世人所知。但是这里面却并不全都是个人努力的结果，而又一部分是运气的成分，但是有意无意的，人们会选择性的主动或被动的忽略运气的成分，甚至是决定性成分，有愿意只相信伟人的伟大。&lt;/p&gt;

&lt;p&gt;另外，就像「文明」这个游戏中的规则一样，一段时期内，伟人总会产生，也许今天这个伟人不出现，二十年后会有另一个我们认为的伟人出现。因此如果我们盲目的相信「伟人」，去搞个人崇拜，是非常狭隘的。&lt;/p&gt;

&lt;p&gt;很多人认为，如果不是 邓 的出现，中国的改革开放进程不能说没有，而是会被推迟几年甚至几十年。但是我也想说，也许在另一个平行宇宙，有另一个叫 X 小平的人，他相比于我们这个宇宙而言提前了 8 年，在「那场革命」只发生两年的时候，就使之终止了，然后开始了改革开放，也未尝不可能。&lt;/p&gt;

&lt;p&gt;诚然，历史剧是一种艺术表现形式，如果不这么拍的话，那第一集就全剧终了。因此适当的夸张和艺术升华是有必要的。但是，也许我们普通人想看到的是另一种历史剧：炸弹在自己身边爆炸的时候，并不是那么的泰然自诺，甚至吓的手中的筷子都掉了；战略出现失误的时候，并不是那么的风轻云淡，也会表现出一种担心和焦虑，甚至有那种交代身边的人，如果他死了，谁接替他的工作这种剧情；也会有整宿睡不着觉的时候；也会有对未来，对人生的迷茫的时候。但是伟人相比于普通人，更重要的是，如何战胜这些情绪，而成为「伟人」。&lt;/p&gt;

&lt;p&gt;就像人们在对一个犯罪案件中，往往会想象有一个「完美受害者」一样，人们也热衷于想象有一个「完美伟人」。&lt;/p&gt;

&lt;p&gt;推荐下，我的团长我的团，不能说没有缺点，但是表现出了当时的真实情况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/time-to-talk-episode-1/6188D793-9FFE-4998-AF52-FB3DA6CB8DFE_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;洗脑和教育冲突吗&quot;&gt;洗脑和教育冲突吗？&lt;/h2&gt;

&lt;p&gt;洗脑是什么？我的爱人常常在我不干家务活的时候，说我没有家庭责任感，于是当我试图狡辩说男人在外挣钱很辛苦，在家不想干家务的时候，她就会对我说我这是在给她洗脑。&lt;/p&gt;

&lt;p&gt;于是我得出一个结论：洗脑和教育并不冲突。虽然在一些形式上非常相像，但是可以通过一点加以区分，即「洗脑」是主观恶意的，利己的（这种利己可能不是为了赚钱）；而「教育」是主观善意的，是利他的（广义利他，并不是父母口中的「为她好」的利他）。&lt;/p&gt;

&lt;p&gt;我一直相信，上头的一些政策的出发点都是好意，不然中国的经济和国民生活水平不会有这么大的变化。但是，一些政策具体到执行的时候就变了味。这也是为什么会有地方会有各种司法解释和执行条例的原因。例如，如果爱国教育是走过场，是敷衍了事，是形式主义，那么很容易就变成了洗脑教育：你并不是真的爱国，并不是真的想让我们祖国的下一代热爱祖国，而仅仅是想完成上头给你的任务，这是利己的主观恶意。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/time-to-talk-episode-1/E60BF4A9-1CC0-4EAB-A7D2-FF6120F04722_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;真相重要吗&quot;&gt;真相重要吗？&lt;/h2&gt;

&lt;p&gt;真相对当事人重要，因为他们除了真相一无所有。但是对非当事人不重要，因为大家更看重的是社会影响。&lt;/p&gt;

&lt;p&gt;举个实际的例子，大街上摔倒的老人，你扶不扶？第一反应肯定是，不敢。为什么？因为有南京彭宇案作为前车之鉴。但是，彭宇本人到底有没有将老太太撞到，老太太到底是不是讹人，真相我们也许永远都不知道。但是这个事情在法院判决的时候，虽然说法律是公正的，但是是不可能不受舆论影响的。显然，事实告诉我们，法院采取了公正判决，而没有受到舆论的影响。这就产生了一个比较坏的社会影响，以后老人摔倒都没人搀扶了。&lt;/p&gt;

&lt;p&gt;真相，是一个美好的词，类似的还有 希望、奋斗，但现实是残酷的，所以我觉得那些认为「不管怎样，真相就是真相」的人是「原教旨主义者」，太理想，太极端了。也许这也是国人如此支持如今遍地都是监控摄像头的原因：如果你问心无愧，就不怕被别人看见；如果你害怕被人看见，你一定是做了亏心事。我相信政府也一定是这么认为的：社会影响比真相更重要，因此附上南京彭宇案后续：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2007年10月15日下午，中共江苏省委书记李源潮在十七大江苏省分组讨论会上发表讲话，专门提到了彭宇案，以其为案例介绍江苏省“大调解”机制，作为其工作政绩的展现。此讲话可视为省政府影响此案调解、审理结果的证据。同时标示着官方公开表示此案以庭外“和解”告结。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;和解结果：和解结果并未对媒体公布，相关细节不得而知。据悉，该案和解的结果是彭宇承担了10%的责任（原本法院判了40%，4万多元），赔偿1万余元，传言为“第三方”支付，但此传言未获官方确认。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/time-to-talk-episode-1/D264829D-CCFC-482C-97A8-9A7EDD925079_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;我非常讨厌又笨又努力的人&quot;&gt;我非常讨厌又笨又努力的人&lt;/h2&gt;

&lt;p&gt;👆🏻这是一个我的观点。一直以来，你能接触到的人类的所有传播介质，如书籍、广播、互联网、广告、动漫、电影电视剧，都会有一个共同的观点，那就是即使你很笨，但是也应该努力。&lt;/p&gt;

&lt;p&gt;为什么？因为你不努力的话永远只能维持在现状，而努力之后才可能突破现状。但是这个「可能」的概率是多少，没有人知道。有人说，重点在奋斗的过程，于是说「人的一生应该这样度过…」。&lt;/p&gt;

&lt;p&gt;诚然，政府宣传这种思想是有自己的考虑，因为这是有助于社会和经济发展的。你见过哪一个政府/民族会不鼓励人民努力奋斗？（因为那些鼓励随遇而安听天命的民族都默无声息的消失了）那些写出普通人放弃奋斗的真实心声的书籍，根本无法出版。但是鼓励奋斗的前提却鲜少有人提及，那就是&lt;strong&gt;一定要有自知之明&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;有一个事实是，丑小鸭之所以能变成白天鹅，一个是大家对它的误解，因为「丑」小鸭的丑，是以一只鸭子的长相来评判的，二则是因为它本身就是一直白天鹅。你鼓励一只癞蛤蟆说你只要努力，一定可以变成白天鹅，这是害人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/time-to-talk-episode-1/47FE921E-A280-405F-9DE9-18A0FFE7D98C_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;美貌的诅咒&quot;&gt;美貌的诅咒&lt;/h2&gt;

&lt;p&gt;很多人羡慕长的好看的人，但是他们忘了事物的两面性。美貌诚然可以在一些事情上有非常大的别的长处无法比之的便利性，但是它也有一个缺陷是，它会蒙蔽你的眼睛，让你觉得有些事情是如此的简单，好像它本就理所应当，这个错觉在一些时候，是非常危险的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/time-to-talk-episode-1/F9ACF836-B2AE-4788-B17F-18DF3895808E_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Feb 2022 23:10:35 +0800</pubDate>
        <link>https://www.xheldon.com/life/time-to-talk-episode-1.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/life/time-to-talk-episode-1.html</guid>
        
        <category>泡脚时间</category>
        
        <category>生活</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>2022年我的博客自动化流程</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;2021 年的时候，写了一个篇 &lt;a href=&quot;https://www.xheldon.com/tech/my-blog-ci.html&quot;&gt;关于博客自动化&lt;/a&gt; 的文章，但是当时没有处理好 Craft 图片的问题，而且逻辑分散到多个仓库，不具有可参考性。在那之后验证了一下直接从 Craft 传图的可行性（答案是不行），于是最近花了一个周末搞定了一下图片转存到腾讯云的问题，加上换到了 Vercel 而不是用 Github Pages，速度变快了不少，遂记录如下。&lt;/p&gt;

&lt;p&gt;注：可能后续还会有诸如「202x年我的博客自动化流程」之类的文章，毕竟技术在迭代，时代在进步，我也在折腾 🤣&lt;/p&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;h3 id=&quot;总体流程&quot;&gt;总体流程&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/my-blog-ci-in-2022/FE7B98E8-BFDB-4E80-8BC6-C1294930F9B5_2.jpeg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;详细解释&quot;&gt;详细解释&lt;/h3&gt;

&lt;h4 id=&quot;-craft-文档&quot;&gt;⓵ Craft 文档&lt;/h4&gt;

&lt;p&gt;指的是按特定格式写的博客文档，特定格式是指，需要满足以下条件，才能正确同步到仓库：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;文档的第一个元素是包含 meta 信息的 table元素。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;meta 信息中，title 不用写，我直接从文档数据中获取，header-img 和 img 的版权信息（如果是从 unsplash 上传的）也不用写。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不支持 Drawing 元素（因为它无法生成有效图片后缀名的文件），如果存在的话不会上传到 COS，会无法正常展示（因为它是 Craft 的私有文件类型） 。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;-craft-插件仓库公开&quot;&gt;⓶ Craft 插件仓库（公开）&lt;/h4&gt;

&lt;p&gt;指的是应用于 Craft 的插件，用来获取 Craft 文档内容，以将内容处理后上传到仓库。关于 Craft 插件的更多信息在 &lt;a href=&quot;https://developer.craft.do/&quot;&gt;这里&lt;/a&gt;，关于我写的这个私有插件的地址在 &lt;a href=&quot;https://github.com/craft-extension/craft-github-extension&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;插件的作用是将 Craft 的文档内容，生成 Markdown 格式的文档，然后使用 Github REST API 发送到&lt;strong&gt;固定的&lt;/strong&gt;仓库位置，即 craft_publish_ci 仓库的 content.md 文件，如果该文件存在则会替换其内容，仓库地址公开，在 &lt;a href=&quot;https://github.com/Xheldon/craft_publish_ci&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;-craft_publish_ci-仓库公开&quot;&gt;⓷ craft_publish_ci 仓库（公开）&lt;/h4&gt;

&lt;p&gt;此仓库主要使用 Github Action 来处理图片，接收到来自插件的内容之后（也即是 content.md 文件更新后），读取该文件的内容，将 Markdown 文件中的图片（以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![&lt;/code&gt; 开头的块级元素被判定为图片，以及特殊的 header-img 开头的头图）get 到之后转存在腾讯云 COS 中。其中，为了统一和方便，我拿到图片后会在 action 中统一转成 jpg 格式的，这样也好处理如果没有图片需要上传（仅修改文本）的时候，直接替换文档中图片地址的逻辑，因为有些图片后缀不是常用的图片格式如 png jpg，甚至没有后缀名等。我曾经尝试使用拉取图片的响应 content-type 来给图片添加后缀名，但是发现有些图片是 tiff 格式的，content-type 返回的是 application/octce-stream（没拼错的话），而且这个方案需要先&lt;strong&gt;全部&lt;/strong&gt;拉取文档中的图片，怕被 ban，于是先将需要上传的都转成 jpg。然后拿到 CDN 地址后，将文档中对应的图片地址替换成 CDN 图片地址。完成之后再将文件内容发送到真正的博客仓库，也即 x_blog_src。&lt;/p&gt;

&lt;h4 id=&quot;-x_blog_src-仓库私有&quot;&gt;⓸ x_blog_src 仓库（私有）&lt;/h4&gt;

&lt;p&gt;此仓库接收到 push 更新后，执行 Action，build 出 HTML 文件，发送到博客公开仓库 x_blog，这么做的原因，详见 &lt;a href=&quot;https://www.xheldon.com/tech/the-using-of-github-pages.html#:~:text=%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E5%89%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E6%BA%90%E7%A0%81%E6%94%BE%E5%9C%A8%20repo%20%E4%B8%AD%EF%BC%8C%E4%BD%BF%E7%94%A8%20Github%20Pages%20%E6%8F%90%E4%BE%9B%E7%9A%84%E9%BB%98%E8%AE%A4%E7%9A%84%20Jekyll%EF%BC%8C%E7%84%B6%E5%90%8E%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E3%80%82%E4%BD%86%E6%98%AF%E8%BF%99%E6%A0%B7%E6%9C%89%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%9A&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;-x_blog-仓库公开&quot;&gt;⓹ x_blog 仓库（公开）&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Xheldon/x_blog&quot;&gt;此仓库&lt;/a&gt; 授权给 Vercel 读取其内容，然后部署。绑定了自定义域名，因此可以通过访问 www.xheldon.com 来访问。不使用 Github Pages 的原因是前者更专业，且有专门的全球 CDN 加速，而 Github Pages 一个是域名解析慢，一个是没有 CDN 加速，做个文档网站还好，做个博客没有任何优化感觉不合适。&lt;/p&gt;

&lt;h3 id=&quot;其他细节&quot;&gt;其他细节&lt;/h3&gt;

&lt;p&gt;博客中存在异步请求 Notion 数据源的页面，如 &lt;a href=&quot;https://www.xheldon.com/subscribe/&quot;&gt;订阅管理&lt;/a&gt; 页面，该过程同样是使用 Vercel 的 serverless，在服务端请求 Notion 的 database 做一层转发，这个接口我做成通用的了，使用 POST 发送 Notion database 的 表头 和 databaseId，方便我自己后续有更多的页面需要异步请求 Notion 的情况。&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Feb 2022 15:55:30 +0800</pubDate>
        <link>https://www.xheldon.com/tech/my-blog-ci-in-2022.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/my-blog-ci-in-2022.html</guid>
        
        <category>集成</category>
        
        <category>插件</category>
        
        <category>Craft</category>
        
        <category>CI</category>
        
        <category>技术</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>The Craft Markdown and The Github Markdown</title>
        <description>&lt;p&gt;This article shows the Markdown rendering effect of Github, &lt;a href=&quot;https://www.craft.do/s/ElIshjFMH6lusC&quot;&gt;this address&lt;/a&gt; is the rendering effect of Craft Web client, you can see the difference between the two is still quite obvious.&lt;/p&gt;

&lt;h1 id=&quot;titles&quot;&gt;TITLES&lt;/h1&gt;

&lt;h1 id=&quot;title&quot;&gt;Title&lt;/h1&gt;

&lt;h2 id=&quot;subtitle&quot;&gt;Subtitle&lt;/h2&gt;

&lt;h3 id=&quot;heading&quot;&gt;Heading&lt;/h3&gt;

&lt;h1 id=&quot;content&quot;&gt;CONTENT&lt;/h1&gt;

&lt;h4 id=&quot;strong&quot;&gt;Strong&lt;/h4&gt;

&lt;p&gt;Body&lt;/p&gt;

&lt;h5 id=&quot;caption&quot;&gt;Caption&lt;/h5&gt;

&lt;h1 id=&quot;groups&quot;&gt;GROUPS&lt;/h1&gt;

&lt;h1 id=&quot;page&quot;&gt;Page&lt;/h1&gt;

&lt;p&gt;This is an empty page!&lt;/p&gt;

&lt;h1 id=&quot;card&quot;&gt;Card&lt;/h1&gt;

&lt;p&gt;This is an empty Card!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;text-style&quot;&gt;TEXT STYLE&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Strike&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InlineCode&lt;/code&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Todo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Toggle&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Unorderlist One&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unorderlist Two&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Orderlist One&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Orderlist Two&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Align Left&lt;/p&gt;

&lt;p&gt;Align Center&lt;/p&gt;

&lt;p&gt;Align Right&lt;/p&gt;

&lt;p&gt;This is a sentence with an indent&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;decorations&quot;&gt;DECORATIONS&lt;/h1&gt;

&lt;p&gt;Decorations Focus&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Decorations Block&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;insert-block&quot;&gt;INSERT BLOCK&lt;/h1&gt;

&lt;p&gt;Plain Text&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Table&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1642249268006-9e05029c9262?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=max&amp;amp;fm=jpg&amp;amp;ixid=MnwxNDIyNzR8MHwxfGNvbGxlY3Rpb258MXwzMTcwOTl8fHx8fDJ8fDE2NDI1ODg2ODg&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=1080&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// Code Block with Javascript language

let CodeBlock = &quot;Hello Craft!&quot;;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;The Formula
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Devide👇🏻&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;nesting&quot;&gt;NESTING&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Decoration Focus &amp;amp; Block&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Decoration Focus &amp;amp; List&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Decoration Block &amp;amp; List&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;…too many to show&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;what-i-think&quot;&gt;What I Think？&lt;/h1&gt;

&lt;h3 id=&quot;important-part&quot;&gt;Important part:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The Decoration，no matter Focus or Block should converted to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blockquote&lt;/code&gt;  in markdown syntax.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Caption, there is no corresponding markdown syntax, just render as Body, not H5.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The CodeBlock, should take the language like ```javascript.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The nesting List, not the flat list!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;not-important-part&quot;&gt;Not important part:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The Align, ignore it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Indent, ignore it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The formula, emmmm ignore it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-i-plan-to-do&quot;&gt;What I Plan to do?&lt;/h1&gt;

&lt;p&gt;I will create a npm package to convert Craft data to Github Markdow correctly 🤪.&lt;/p&gt;

&lt;h3 id=&quot;anyone-any-idea&quot;&gt;Anyone any idea?&lt;/h3&gt;
</description>
        <pubDate>Wed, 19 Jan 2022 20:17:59 +0800</pubDate>
        <link>https://www.xheldon.com/tech/craft-markdown-api-test.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/craft-markdown-api-test.html</guid>
        
        <category>测试</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>「译」Ace，CodeMirror 和 Monaco：Web 代码编辑器的对比</title>
        <description>&lt;p&gt;我已经为 Replit 工作了大约有六年的时间，随着团队的发展，我一直专注于产品的 IDE （我们称之为「工作区」）部分。理所当然的，我就越来越专注于代码编辑器。虽然我们考虑过创建一个满足我们需求的代码编辑器，但是开发代码编辑器的复杂性、可用的开源选项的丰富性以及我们员工的规模使其成为一个充满未知挑战的事情，因此我的时间可能不会花在构建一个我们自己的编辑器这方面。我有幸（和痛苦）在生产环境中使用 &lt;a href=&quot;https://ace.c9.io&quot;&gt;Ace&lt;/a&gt;、&lt;a href=&quot;https://microsoft.github.io/monaco-editor/&quot;&gt;Monaco&lt;/a&gt; 和 &lt;a href=&quot;https://codemirror.net/6/&quot;&gt;CodeMirror&lt;/a&gt; 这三种代码编辑器，有时候是同时使用（稍后会有详细介绍）。在本文章中，我将回顾一些 Replit 的历史和我使用编辑器的经验，以及这二者是如何相互作用的。&lt;/p&gt;

&lt;p&gt;如果你看这篇文章只是为了直接比较这三种代码编辑器，那么请直接跳到最后，我将总结和比较放到了那里。&lt;/p&gt;

&lt;h2 id=&quot;故事&quot;&gt;故事&lt;/h2&gt;

&lt;h3 id=&quot;前奏ace&quot;&gt;前奏：Ace&lt;/h3&gt;

&lt;p&gt;在 Replit 早期，大约在 2011 年，是没有代码编辑器的。我们使用一个纯粹的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Read–eval–print_loop&quot;&gt;REPL&lt;/a&gt; 界面，一个带有简单输入框的控制台。添加代码编辑器显然是迫在眉睫的，特别是如果我们想要创造更加复杂的程序的情况下。代码编辑器为我们提供了语法高亮显示、编辑器快捷键、自动缩进、搜索和替换等功能。Cloud9 当时发布了 Ace，它是一个功能齐全、性能出色的基于 Web 的代码编辑器。截止目前为止，Ace 编辑器仍然在积极维护中；它有着丰富的生态系统，支持多语言、按键绑定，并且在浏览器中运行良好。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👇🏻原始的 Replit的界面和 Ace 代码编辑器对比，该截图由我们的社区成员提供，他们从 2011 年开始，重新托管了 Replit 的开源版本 &lt;a href=&quot;https://www.repldotit.com&quot;&gt;https://www.repldotit.com&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/a-comparison-of-code-editor/FCE24555-97DB-4453-9DA4-A8C9BE00FF52_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们一直使用 Ace，一直到 2017 年左右我们才切换到 Monaco。虽然 Ace 仍然在维护中，但是它的维护者只有一个人。亚马逊收购 Cloud9 之后，他们似乎重新调整了开源项目的优先级。编辑器不再像之前一样有那么多的更新，Github 上的 issue 也开始堆积，同时维护人员也几乎没有再添加任何新的功能。总体而言，Ace 的 API 开始让开发人员感到过时和笨重。它的维护者很棒，但是他能做的也只是如此了。&lt;/p&gt;

&lt;h3 id=&quot;插曲monaco&quot;&gt;插曲：Monaco&lt;/h3&gt;

&lt;p&gt;你也许已经知道的是，VSCode 使用的就是 Monaco 编辑器；其实，是微软围绕 Monaco 构建了 VSCode。如果我们把代码编辑器切换到 Monaco，我们认为我们将能够从 VSCode 的开发大佬那里获得所有很酷的更新和功能。Monaco 拥有更多与我们的网站相匹配的炫酷的现代用户界面，JavaScript、HTML、CSS 都有很棒的自动完成功能，而且他们似乎有 API 可以轻易的为 LSP （Language-Server-Protocal）编写相应的语言客户端。他们的 API 文档很棒，附带了 Typescript 的定义，从开发角度来看具有更多的可扩展性功能。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👇🏻Monaco 编辑器截图（默认配置），注意干净和整洁的 UI 界面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/a-comparison-of-code-editor/DE35EC5C-5470-49D5-ADFE-8FCAD8A71B29_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从 Ace 切换到 Monaco 是有代价的，后者缺失了 Ace 的很多功能，但是我们相信，凭借社区的热度和贡献，它将立即超过 Ace。（相比较 Ace 而言）Monaco 的第一个问题是它缺少很多语言支持；即使 VSCode 有很多语言支持，但是他们是依赖于 NodeJS/Electron 的能力，而不是浏览器。因此，我们开始为 Monaco 贡献代码以让其支持更多语言。我们添加了 Scala、Julia、Scheme、Clojure 等各种语言支持，以及像 Python 这种的各种语言的 Bugfix。我为 Monaco 写了一个语法高亮显示器，以通过一个适配器来支持 Ace 支持的所有语言。最后，Monaco 相较于 Ace 缺失的特性是 Vim 和 Emacs 的按键绑定，不过应该过不了多久就会有人在 NPM 上发布支持这些特性的包。&lt;/p&gt;

&lt;p&gt;Monaco 的另一个问题是构建工具。虽然微软使用 Web 技术构建了 Monaco，但是它与 Web 当前的生态系统和构建工具并没有很好的融合起来。我不得不将 Monaco 预编译为 Webpack Dll，并添加许多 Webpack 的配置，它才能正常工作。这些东西添加起来很痛苦，这也增加了我们构建系统的复杂性和成本。几个月后，微软为 Monace 发布了一个 Webpack 插件，这让它稍微好了点，但是并不完美，特别是当我们将前端挪到了 Next.js 的时候。不幸的是，Monaco 也没有一个简单的方法来懒加载和拆分代码，因此将代码拆分成小的文件然后提升加载速度并不可用。这个问题使我们的项目增加了高达 5M 的体积，这并不是一个我们可以轻易忽略的事情。&lt;/p&gt;

&lt;p&gt;Monaco 在移动端也不太好用。我们尝试将这部分代码外包出去，但是没人接单。然后我想自己处理这个事情，于是就在那个时候我意识到，很难去查看、阅读 Monaco 的代码库。它与 VSCode 代码库的其他部分耦合的太多了，Monaco 编辑器本身就像是先构建了 VSCode 后，再从中剥离出来的一样。即使是 VSCode，它本身的代码写的也不是很好，它可能是&lt;a href=&quot;https://web.archive.org/web/20150502200822/https://www.zdnet.com/article/microsofts-browser-based-dev-toolbox-how-monaco-came-to-be/&quot;&gt;最古老的 Typescript 项目&lt;/a&gt;之一，并且被&lt;a href=&quot;https://www.youtube.com/watch?v=FyCYva9DhsI&quot;&gt;微软以一个大企业的风格&lt;/a&gt;编写的。虽然我们确实在移动端做到了一个还算可以用的东西，但是我并不想维护一个 VSCode 的分支，因为我们对 VSCode 所做的修改不会被合入到 VSCode 的主干分支中去，而且当前的移动端距离可用于生产环境还有很长的路要走。因此，我决定最好的方案是，在手机上继续使用 Ace 编辑器。它也许并不完美，但是没关系（又不是不能用）。&lt;/p&gt;

&lt;p&gt;因此，我们在 Replit 上最终有两个代码编辑器：一个用于 PC 端，另一个用于移动端。每个 PC 的新功能都必须移植到 Ace（手机端）上。我们必须为 Ace 编写支持 LSP 功能的语言客户端，并且我们必须为 Ace 编写操作转换适配器（译者注：OT 转换？），以支持多个用户同时编辑，等等。在很多情况下，我们根本没有时间移植东西。例如，我们从未将代码多线程的功能移植到移动端。&lt;/p&gt;

&lt;h3 id=&quot;后幕codemirror&quot;&gt;后幕：CodeMirror&lt;/h3&gt;

&lt;p&gt;2018 年底，Marijn 宣布&lt;a href=&quot;https://web.archive.org/web/20180830201622/https://codemirror.net/6/&quot;&gt;重写 CodeMirror&lt;/a&gt;，以将其版本更新到 6，并附上了&lt;a href=&quot;https://web.archive.org/web/20181109055050/https://codemirror.net/6/design.html&quot;&gt;出色的设计文档&lt;/a&gt;。重写的主要动机之一是增加对触摸设备的支持。在此期间，我们认识到移动端（普遍意义上的）是我们战略的重要组成部分；如果我们想让接下来的 10 亿软件创作者在线，我们必须让移动端能够使用才行。CodeMirror 将通过依赖原生浏览器的文本编辑能力（通过 contenteditable），而不是完全在 JavaScript/库层面（就像 Google Docs 的 Google Clouser 一样）来实现移动端的可用性。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://prosemirror.net&quot;&gt;ProseMirror &lt;/a&gt;启发了 CodeMirror 6 的 API 设计，它是 Marijn 的另一个项目。我之前在我当时开发的 WYSIWYG 项目中使用过，我很喜欢它。ProseMirror 有一个非常小的核心，而其他的一切都是通过其插件系统实现的。作为一个编辑器库而言，它是模块化的、可插拔的、函数性的，并且具有难以置信的使用授权。因此，我决定让公司赞助新版的 CodeMirror 的开发，我甚至亲自资助了该项目。&lt;/p&gt;

&lt;p&gt;去年，CodeMirror 6 发布了测试版，我非常兴奋的开始将其添加到 Replit中，团队的其他成员也是如此。我们开始玩弄编辑器，虽然它的学习曲线有点陡，但是当你最终「得到」它的时候，你会感觉自己像一个 超级-代码编辑器-开发者。为了让 CodeMirror 6 能够应用到项目中，我开始在项目中逐步的使用它。我们首先在 Relpit 上，将其添加为只读的编辑器，然后开始将其添加到网站的其他可以编辑代码的地方。&lt;/p&gt;

&lt;p&gt;今年早些时候，我们开始了「信仰之跃」（译者注：刺客信条的梗），开始将 CodeMirror 集成到我们的移动环境中。从用户的角度来看，CodeMirror 客观上讲比手机上的任何其他编辑器都要好。尽管它尚未支持我们支持的所有语言和其他一些功能，但是将其集成到移动端依然是值得的。这个集成之后的用户反馈比我们预想的更好。参与 CodeMirror 使用的用户中（译者注：可能是灰度小流量测试，也可能是提供了新版和旧版切换的入口以统计不同编辑器的用户使用情况），移动端用户占比将近 70%！它（CodeMirror）比在移动端使用 Ace 更能留住用户。有了 CodeMirror 的可插拔性（提供的无限可能性），很明显，（上述的）这些（令人振奋的结果）只是我们在移动端提供更多有价值的事情的开始而已，我们将首先从在移动端缺失的 PC 端的功能移植到移动端的 CodeMirror 开始。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/a-comparison-of-code-editor/7F0728B9-BE37-44CF-A518-F4020E276758_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CodeMirror 6 的社区依然处于起步阶段，因此我们必须自己写很多东西，或者为特定的功能赞助一些钱以及与 Marijn 一起解决 bug。我们希望通过我们的贡献帮助引导和回报 CodeMirror 社区。我在这里列举一些我们正在积极开发的功能清单：Vim Mode、Emacs Mode、LSP 客户端、缩进标记、CSS 颜色选择器、语言解析器，以及我们将在未来发布桌面端 CodeMirror 的时候，在帖子中宣布的许多其他的事情。我认为人们对新的 CodeMirror 感到兴奋，我们将在未来一到两年内看到社区和生态系统用户数量的激增，许多人急于在生产环境中使用它。&lt;/p&gt;

&lt;p&gt;我们非常兴奋能够在 CodeMirror 上构建越来越多的功能，并使其成为我们让代码更具访问性这一环节的不可或缺的一环。我们总是说，我们最终必须开发自己的编辑器，才能以我们喜欢的方式来打造用户体验。尽管如此，我认为我们对使用 CodeMirror 能做到的事情感到很开心。&lt;/p&gt;

&lt;h2 id=&quot;battle-环节&quot;&gt;Battle 环节&lt;/h2&gt;

&lt;p&gt;让我总结一下，以让你更容易找到适合你的代码编辑器。同样，这只是我的个人经历，它可能无法反映你的经历。&lt;/p&gt;

&lt;p&gt;对于每个部分，我都会给编辑器打 1 到 3 分，其中 3 分是最好的。&lt;/p&gt;

&lt;h2 id=&quot;稳定性&quot;&gt;稳定性&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编辑器&lt;/th&gt;
      &lt;th&gt;评分&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ace&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;非常的稳定和可靠。该编辑器经过了历史的检验，为许多工具提供了 10 多年的支持，在我使用它的所有时间里，我从未经历过任何 break change。可能有一些版本引入了一些小错误，但是它们很快就被修复了。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Monaco&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;Monaco 拥有稳定的编辑体验；当然也有一些 bug，但是会很快随着 VSCode 的发布而快速修复，它的维护人员擅长持续发布新的版本。之所以扣了一分是因为，它的 API 不是最稳定的，经常会有一些小的变化，很烦人。微软尚未发布 Monaco 的 1.0 版本。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CodeMirror 6&lt;/td&gt;
      &lt;td&gt;⭐️&lt;/td&gt;
      &lt;td&gt;CodeMirror 仍然处于测试阶段，该项目有很多微小的错误，但是 Marijn 响应和修复的速度很快。虽然该项目依然处于测试阶段，但是我认为 Marijn 对当前的 API 感到满意，我们不太可能看到重大的 break change。CodeMirror 6 开始被许多功能采用，即使是 Chrome 的开发工具也可能在&lt;a href=&quot;https://github.com/ChromeDevTools/devtools-frontend/commit/6da128c3ae6b6dd0d4602059c23f8c4003823f5b#diff-592cac14b3eeb584a09b80d2696a73223ad0a79e4a8e6765f875a6f4492b4525&quot;&gt;明年开始使用它作为代码编辑器&lt;/a&gt;。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;开箱即用的体验&quot;&gt;开箱即用的体验&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编辑器&lt;/th&gt;
      &lt;th&gt;评分&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ace&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;出色的开箱即用体验，支持如此多的功能和语言，包括一些基本的JavaScript Lint 功能（使用JSHint）和自动完成特性。只是用户界面有点过时，所以你有时候可能感觉有点乱。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Monaco&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;用户界面非常精致。该编辑器内置了很多功能，包括开箱即用的 HTML、CSS 和 JavaScript 的代码提示支持。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CodeMirror 6&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;编辑器需要一些配置才能正常运行。这是一个对项目模块化特性的权衡的过程。有一个 &lt;a href=&quot;https://codemirror.net/6/docs/ref/#basic-setup&quot;&gt;basic-setup 包&lt;/a&gt;，它结合了几个模块，并且重新导出了核心模块。用户界面很不错。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;模块化构建工具和发展轨迹&quot;&gt;模块化、构建工具和发展轨迹&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编辑器&lt;/th&gt;
      &lt;th&gt;评分&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ace&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;Ace 本身很小，也支持模块化，你能够使用懒加载来加载其他模块。然而 Ace 是一个比较旧的项目，它附带了一个自己的模块管理系统，让它在你的程序中工作并不难，但是需要一些配置才行。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Monaco&lt;/td&gt;
      &lt;td&gt;⭐️&lt;/td&gt;
      &lt;td&gt;Monaco 编辑器打包后体积也非常大，大概有 5M 左右。而且据我所知，懒加载是不可能的。Monaco 还需要你在你的构建系统中进行一些特殊的配置，这让它很难与现有系统就行绑定。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CodeMirror 6&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;CodeMirror 是用现代的技术构建的。您甚至可以在不涉及打包工具的情况下使用 ES6 模块来导入它。懒加载功能对它来说轻而易举；您只需要 ES6 的动态导入功能即可。该项目非常模块化，编辑器内核非常小。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;扩展性和高级功能&quot;&gt;扩展性和高级功能&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编辑器&lt;/th&gt;
      &lt;th&gt;评分&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ace&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;Ace 有许多配置项，效果很好，扩展点也很好。虽然它们不是很通用，但是它能让你实现很多高级特性。API 确实感觉有点过时，但是绝对可靠。当我需要快速试验一个项目的时候，我会很轻松的选择 Ace，因为它的代码很容易阅读，而且它的核心代码已经将近 10 年没有变化了。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Monaco&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;Monaco 有很多配置项，并且提供 API 来修改编辑器的行为和基础功能。尽管如此，能够扩展的地方也是有限的以及过于具体了。我经常不得不与编辑器斗智斗勇，需要打一些 hack 补丁，这是非常危险和难以收敛的，因为它的代码库并不容易阅读，其内部代码不断变化。最终，我们不再升级 Monaco，因为它将来也不可能支持我们需要的一些功能。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CodeMirror 6&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;CodeMirror 6 在构建之初就考虑到了可扩展性，这是它的主要设计原则之一；这种可扩展性允许 CodeMirror 模块化。事实上，内核本身（@codemirror/view 和 @codemirror/state）本质上是一个可扩展的 textarea。所有的「代码」功能都是作为扩展实现的。语法高亮显示和行号等基本内容也是作为扩展和软件包实现的。在创建自己的扩展的时候，这些官方的软件包是一个很好的示例资源。使用 CodeMirror 构建花里胡哨的插件是轻而易举的，作为插件开发人员，它为你提供最强大的难以置信的支持！它的扩展点是非常通用的，因此你就是你程序世界的上帝，可以完全自己决定想实现的任何功能并承担后果。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;社区和文档&quot;&gt;社区和文档&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编辑器&lt;/th&gt;
      &lt;th&gt;评分&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ace&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;多年来，Ace 积累了丰富的生态系统和大量的关于 Ace 使用的文章和博客。它支持天底下所有语言的高亮显示功能以及拥有很多社区提供的工具包。它的 API 文档不是最好的，但是对大多数使用场景来说足够了。它结构良好（虽然有点旧）的代码库是一个出色的（文档）补充资源。网上也有一个关于它的入门指南。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Monaco&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;Monaco 在大概 2018 年的时候开始发力，但能感觉到的是它的社区迅速衰落了。你可以在 NPM 上找到一堆社区维护的软件包。Monaco 的 API 文档本身已经很不错了， 但其实还可以更好，因为 Monaco 没有官方指南，所以这让开始入门的人觉得很难。由于该项目的结构复杂，你很难将阅读代码作为阅读 API 文档的补充资源。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CodeMirror 6&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;我看到社区里有很多关于 CodeMirror 6 的开发势头。我们正在试图用一些我们认为对于 CodeMirror 6 至关重要的软件包来帮助社区发展，敬请期待！它的文档很棒，我希望随着时间的推移它会变得更好。文档系统有一篇精彩的入门文章和很多示例，并附带有冗长的解释。我在上面的可扩展性上提到了这一点，它的大多数功能都是通过扩展实现的，这些功能包是你想实现一些功能的时候的「神队友」。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;性能&quot;&gt;性能&lt;/h2&gt;

&lt;h5 id=&quot;免责声明性能表现的评价没有明确的基准测试数据&quot;&gt;免责声明：性能表现的评价没有明确的基准测试数据。&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编辑器&lt;/th&gt;
      &lt;th&gt;评分&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ace&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;Ace 诞生在一个浏览器和机器不如现在这般强大的时候，所以该款编辑器在今天的性能表现非常亮眼。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Monaco&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;Monaco 有很多性能优化，但它可能有点笨重。Replit 有很多低功耗机器的用户，他们一直觉得 Monaco 非常耗电。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CodeMirror 6&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;CodeMirror 到目前为止性能表现很优秀，因为它的作者花了很多时间进行性能优化。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;移动端支持&quot;&gt;移动端支持&lt;/h2&gt;

&lt;p&gt;我不会在这里进行打分，因为如果你想要一个支持移动端的代码编辑器，你唯一的可用选择是 CodeMirror 6。Ace 对移动端的支持并不差，但是并不能用到生产环境，而 Monaco 无法在移动端使用。&lt;/p&gt;

&lt;p&gt;我甚至会说，CodeMirror 甚至可以应用于使用 Webview 组件的原生应用程序中。CodeMirror 中的大多数内容都是可序列化的，因此你可以从原生代码与 Webview 进行交互。&lt;/p&gt;

&lt;h2 id=&quot;感谢阅读&quot;&gt;感谢阅读！&lt;/h2&gt;

&lt;p&gt;这部分是作者打广告时间，暂时不翻译了。&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jan 2022 23:57:18 +0800</pubDate>
        <link>https://www.xheldon.com/tech/a-comparison-of-code-editor.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/a-comparison-of-code-editor.html</guid>
        
        <category>编辑器</category>
        
        <category>翻译</category>
        
        
        <category>tech</category>
        
      </item>
    
  </channel>
</rss>
