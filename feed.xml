<?xml version="1.0" encoding="UTF-8"?>
    <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Xheldon Blog</title>
        <description>The Answer to Life, the Universe and Everything is...</description>
        <link>https://www.xheldon.com</link>
        <atom:link href="https://www.xheldon.com/feed.xml" rel="self" type="application/rss+xml" />
        <pubDate>Sun, 20 Jul 2025 15:05:38 +0000</pubDate>
        <lastBuildDate>Sun, 20 Jul 2025 15:05:38 +0000</lastBuildDate>
        <generator>Hexo v7.3.0</generator>
        
        <item>
            <title>App 开发之旅（一）：摩诃不思议的 Swift</title>
            <description>&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 有人问为什么不是 JavaScript，因为它是脚本语言，没有类型系统等，完全没法儿跟 Swift 比较。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;本人前端开发，对 C、Java、Python 语言仅限入门了解水平，而对 TypeScript（以下简称 TS） 的特性和使用达到了高级水平（自认），因此有些让我震惊的点，可能在各位眼中感觉「只不过是平平无奇的语言特性罢了」，亦或者「莫非设计 TypeScript 的人是天才？」。&lt;/p&gt;
&lt;p&gt;本人不一定会对所有 Swift 中与 TS 有差异的地方强行震惊，因为有些 Swift 跟 TS 的差异是因为 TS 的自身不足，且有些设计在计算机语言中司空见惯（如数字区分 Int 和 Double 而不是只有一种 Number 类型），只是 JS 的设计让人震惊（毕竟是一周内赶工设计出来的），而不是 Swift。&lt;/p&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 本人认为：如果一个语言规则太多、特例太多、保留字太多，那就不是一门好语言。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文按照 Swift 官方语言介绍的顺序进行有序震惊，省略了不震惊或者不懂的的内容，如 &lt;code&gt;附加宏&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;基础知识&lt;/h2&gt;
&lt;h3 id=&#34;注释&#34;&gt;注释&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：XCode 没有 `/** */` 块注释快捷键，只有 `cmd + /` 的行注释。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;VSCode 的块注释快捷键也比较难按，是 &lt;code&gt;Alt + Shift + A&lt;/code&gt; ，难道大家都不常用这个功能？&lt;/p&gt;
&lt;p&gt;当然，VSCode 和 XCode 中，都可以通过按 &lt;code&gt;/**&lt;/code&gt; 后回车，自动生成块注释。&lt;/p&gt;
&lt;h3 id=&#34;可选绑定&#34;&gt;可选绑定&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：我调试的时候想在 `if` 写一个始终为 `true` 的值测试用都不行，`if` 语句的可选绑定，必须是一个可选类型的值。&lt;/p&gt;&lt;/blockquote&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &amp;#123; &amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;// 错误！&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有必要这样？&lt;/p&gt;
&lt;h2 id=&#34;集合类型&#34;&gt;集合类型&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：数组方法中，有个 `sort` 表示原地排序，还有一个 `sorted` 返回新数组。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;一个语言，干了框架干的活儿，很好，很符合苹果的风格，诸如此类的还有很多，就不一一震惊了。&lt;/p&gt;
&lt;h2 id=&#34;控制流&#34;&gt;控制流&lt;/h2&gt;
&lt;h3 id=&#34;if-表达式&#34;&gt;if 表达式&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：为了解决 `if-else` 给同一个变量赋值的情况，它提供了 `if` 表达式的写法，同理，`switch` 也有类似的表达式形式。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Swift 还是做的太多了：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 平平无奇的写法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; str: &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;br&gt;    str &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;小&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt; &amp;#123;&lt;br&gt;    str &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;大&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;    str &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;中&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 简写法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; str &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;小&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;大&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;中&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;switch-的牛逼判断&#34;&gt;Switch 的牛逼判断&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：switch 没有隐式贯穿&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;不过这倒可以理解而且更合理，正常人谁没事儿希望 case 1 如果不额外 &lt;code&gt;break&lt;/code&gt; 会自动跑到 case 2 中去啊？&lt;/p&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：switch 可以判断对象值！&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这其实算是 &lt;code&gt;feature&lt;/code&gt;，而且直觉上更合理，简直内行。&lt;/p&gt;
&lt;p&gt;在 TS 中，因为 &lt;code&gt;switch&lt;/code&gt; 的 &lt;code&gt;case&lt;/code&gt; 语句使用的是全等(===)判断，因此你的 &lt;code&gt;switch&lt;/code&gt; 的括号内一般不会传入一个对象，因为对象判断的是引用，而在 TS 中很少有需要判断对象相等的情况，更别提使用 &lt;code&gt;switch&lt;/code&gt; 语句来判断了。&lt;/p&gt;
&lt;p&gt;但是在 Swift 中，你可以在 &lt;code&gt;case&lt;/code&gt; 语句中「捕获」判定的值（正式称呼为「模式」）：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; somePoint &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;// 一个平平无奇的元组罢了&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 我现在，开 始 判 断：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; somePoint &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;):&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;\(somePoint)&lt;/span&gt; 在原点&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;): &lt;span class=&#34;hljs-comment&#34;&gt;// 忽略第一个值&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;\(somePoint)&lt;/span&gt; 在 x 轴&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;_&lt;/span&gt;): &lt;span class=&#34;hljs-comment&#34;&gt;// 忽略第二个值&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;\(somePoint)&lt;/span&gt; 在 y 轴&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; (&lt;span class=&#34;hljs-operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;): &lt;span class=&#34;hljs-comment&#34;&gt;// 判断元组的两个值是否分别在给定区间，在就匹配成功&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;\(somePoint)&lt;/span&gt; 在盒子内部&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt;:&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;\(somePoint)&lt;/span&gt; 在盒子外部&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 还可以值绑定！&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; somePoint &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; x, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;): &lt;span class=&#34;hljs-comment&#34;&gt;// 匹配第二个值，捕获第一个值&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;x轴值：&lt;span class=&#34;hljs-subst&#34;&gt;\(x)&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; (&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; y): &lt;span class=&#34;hljs-comment&#34;&gt;// 匹配第一个值，捕获第二个值&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;y 轴值：&lt;span class=&#34;hljs-subst&#34;&gt;\(y)&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; x, &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; y): &lt;span class=&#34;hljs-comment&#34;&gt;// 兜底，因为 x 和 y 都是 let，还可以写作 case let (x, y)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;\(x)&lt;/span&gt; 和 &lt;span class=&#34;hljs-subst&#34;&gt;\(y)&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 还可以加 where 限定：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; (x, y) &lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; x &lt;span class=&#34;hljs-operator&#34;&gt;==&lt;/span&gt; y:&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//还可以多个匹配&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;:&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，在 TS 中也支持「多个匹配」但跟 Swift 中的 case 多个匹配完全不同。&lt;/p&gt;
&lt;p&gt;Swift 中的多个匹配，逗号分割的内容只要有一个匹配，就会执行 case 语句，但是 TS 的逗号分割的匹配，它的本质是只匹配最后一个项，因为 TS 中的逗号分割的语句只返回最后一个值：&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; (a) &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;:&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;)&lt;span class=&#34;hljs-comment&#34;&gt;// 此处不会执行，因为此 case 匹配 &amp;quot;b&amp;quot; &lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;函数&#34;&gt;函数&lt;/h2&gt;
&lt;h3 id=&#34;函数的标签参数&#34;&gt;函数的标签参数&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：形参（标签参数）可以同名？？？而且规定（限制又来了，服了）：可变参数的后面的参数必须有参数标签（如果只有一个那么实参就是形参）不能省略。&lt;/p&gt;&lt;/blockquote&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 下面两个 a 标签参数，完全合法（因为是 label 无所谓）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 而且 a b 后面的参数 a c（或者单独的一个参数）必须存在，不能用 _ 省略，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//  也可以理解，要不咋知道是第二个参数，而不是前面的可变参数来的？&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;a&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Double&lt;/span&gt;..., &lt;span class=&#34;hljs-params&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;c&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Double&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Double&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; b.reduce(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;) &lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt; c&lt;br&gt;&amp;#125;&lt;br&gt;a(a: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, a: &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;闭包&#34;&gt;闭包&lt;/h2&gt;
&lt;h3 id=&#34;闭包的n中简写形式&#34;&gt;闭包的N中简写形式&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：闭包的语法糖太多这里就不一一列举，最离谱的是只需要一个 `&gt;` 符号的形式。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;可以这么写的本质是 String 有一个叫做 &lt;code&gt;&amp;gt;&lt;/code&gt;  的函数，是的你没有看错，符号也可以是函数！这一点下面再震惊。&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; num &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;]&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; sortedNum &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; num.sroted(by: &lt;span class=&#34;hljs-operator&#34;&gt;&amp;gt;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;真的离谱。&lt;/p&gt;
&lt;h3 id=&#34;省略-return-的返回&#34;&gt;省略 return 的返回&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：也许你可以理解「单行返回可以省略 return」 ，但是你绝对无法理解「多行也可以省略 return」&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;TS 中的省略 return 的语句，跟 Swift 普通的写法一样，单行省略 return：&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 省略写法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;a&lt;/span&gt; = (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) =&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 正常写法是：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;a&lt;/span&gt; = (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;普通的 Swift 语法：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;a&lt;/span&gt;()-&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// -&amp;gt; 因为单行，所以省略了 return&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是！SwiftUI 中的写法：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;VStack&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;Text&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;)&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;Text&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你没看错，这也是一个尾随闭包函数，其中 &lt;code&gt;VStack&lt;/code&gt; 是一个函数，闭包参数作为最后且唯一的参数，可以省略 &lt;code&gt;VStack&lt;/code&gt; 的括号，但是！它返回了两个 &lt;code&gt;Text&lt;/code&gt; 函数调用，却没有写 &lt;code&gt;return&lt;/code&gt;，为什么？&lt;/p&gt;
&lt;p&gt;因为它用了 &lt;code&gt;ViewBuilder&lt;/code&gt;，这个东西跟后面的 &lt;code&gt;resultBuilder&lt;/code&gt; 一样的语法糖。&lt;/p&gt;
&lt;h3 id=&#34;自动闭包&#34;&gt;自动闭包&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：本来一个平平无奇的闭包赋值没有什么，但是它的延迟计算能力让我不得不为之震惊。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;刚看自动闭包的时候，是拿这个例子介绍的，说什么「延迟计算」能力：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; customersInLine &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Chris&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Alex&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Ewa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Barry&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Daniella&amp;quot;&lt;/span&gt;]&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(customersInLine.count)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 打印 “5”&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; customerProvider &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &amp;#123; customersInLine.remove(at: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(customersInLine.count)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 打印 ”5“&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Now serving &lt;span class=&#34;hljs-subst&#34;&gt;\(customerProvider())&lt;/span&gt;!&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 打印 “Now serving Chris!”&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(customersInLine.count)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 打印 “4”&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我寻思这不就是一个平平无奇的闭包，跟 TS 一样只是 customerProvider 变量被赋值给了闭包而已，相同实现在 TS 中是这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;customerProvider&lt;/span&gt; = (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// 省略逻辑&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后当然是在它调用的时候才会执行闭包的逻辑，这算什么延迟计算！&lt;/p&gt;
&lt;p&gt;但是，它的延迟计算形式在闭包作为参数的时候才是真牛逼：&lt;/p&gt;
&lt;p&gt;平平无奇的显式闭包调用，跟 TS 调用方式基本类似，闭包作为参数，写法还是写在一个大括号中：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// customersInLine 是 [&amp;quot;Alex&amp;quot;, &amp;quot;Ewa&amp;quot;, &amp;quot;Barry&amp;quot;, &amp;quot;Daniella&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;serve&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;customer&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;customerProvider&lt;/span&gt;: () -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Now serving &lt;span class=&#34;hljs-subst&#34;&gt;\(customerProvider())&lt;/span&gt;!&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;serve(customer: &amp;#123; customersInLine.remove(at: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &amp;#125; )&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 打印 “Now serving Alex!”&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是一旦把 &lt;code&gt;customerProvider&lt;/code&gt; 标记为 &lt;code&gt;@autoclosuer&lt;/code&gt; 情况就不一样了，此时你的 &lt;code&gt;serve&lt;/code&gt; 函数调用可以这么写：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// customersInLine 是 [&amp;quot;Ewa&amp;quot;, &amp;quot;Barry&amp;quot;, &amp;quot;Daniella&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;serve&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;customer&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;customerProvider&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;@autoclosure&lt;/span&gt; () -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Now serving &lt;span class=&#34;hljs-subst&#34;&gt;\(customerProvider())&lt;/span&gt;!&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;serve(customer: customersInLine.remove(at: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;))&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 打印 “Now serving Ewa!”&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意最后的 &lt;code&gt;serve&lt;/code&gt; 函数的调用，它的参数 customer 是一个语句 &lt;code&gt;customersInLine.remove(at: 0)&lt;/code&gt; ，在 TS 中，无论什么情况，调用栈都会先求这个值然后再调用 serve 函数。但在 Swift 中，这种写法跟上面的形式仅仅是形式不同，逻辑是一样的，也就是说会先执行 &lt;code&gt;serve&lt;/code&gt; 函数，然后再去内部执行这个语句（当 &lt;code&gt;customerProvider&lt;/code&gt; 调用的时候）。这才是传说中的，&lt;code&gt;延迟计算&lt;/code&gt;吧。&lt;/p&gt;
&lt;p&gt;这种情况如果你写多了，会遇到很多诸如下面的代码：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;a(b.remove(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;))&lt;br&gt;c(d.add4())&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时你难以区分，是先执行括号内的语句，还是外层的函数。因此，Swift 官方文档也做了说明：&lt;/p&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 过度使用自动闭包可能会使您的代码难以理解。上下文和函数名称应明确表示计算正在被推迟。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;真的离谱，既然不推荐，就不要设计出来啊喂！&lt;/p&gt;
&lt;h2 id=&#34;枚举&#34;&gt;枚举&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点: 枚举在其他语言只是为了方便的一种可有可无的用来状态机判断的类型，但是在 Swift 中却是最常用的一等类型，可以在一定功能上取代 Struct 你敢信？&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点2： 枚举是值类型。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;枚举在 TS 就是一个平平无奇的「枚举」罢了，仅仅是把值给列出来，大多数用来在状态机中描述状态：&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; A &amp;#123;&lt;br&gt; B = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;br&gt; C = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，TS 整的花活，在运行时、编译时的一些差异就不说了。在 TS 中，你完全可以使用一个对象来代替枚举：&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; A &amp;#123;&lt;br&gt;  B = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;  C = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; A = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;B&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;C&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;关联值&#34;&gt;关联值&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点: Swift 你这么设计枚举，是要 干！什！么！&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在 Swift 中，枚举的重要性是第一位的，你可以遍历它的所有 case（需要遵循 &lt;code&gt;CaseIterable&lt;/code&gt; 协议）、可以将 case 视作一个函数，然后在调用的时候传值，以让枚举实例处理，此谓之「关联值」：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; b(&lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;// 声明方式好像一个协议（也就是抽象类）&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; c(&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在用的时候可以传值：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; a = A.&lt;span class=&#34;hljs-title function_&#34;&gt;b&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;9527&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;枚举最常用的就是在 switch 语句中，结合震惊的 switch 同样震惊的 case，你可以这么做：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;switch&lt;/span&gt; a &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; .&lt;span class=&#34;hljs-title function_&#34;&gt;b&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; d, &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; f):&lt;br&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;A.b 关联值为:\(d) 和 \(f)&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; .&lt;span class=&#34;hljs-title function_&#34;&gt;c&lt;/span&gt;(g): &lt;span class=&#34;hljs-comment&#34;&gt;// 上面提到的另一种 switch case 写法&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;A.c:\(g)&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一次看反正我是觉得挺抽象的，也想不明白有什么实际使用场景（毕竟我没这么干过）。&lt;/p&gt;
&lt;h3 id=&#34;隐式赋值&#34;&gt;隐式赋值&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点: 枚举的类型声明，声明的不是枚举本身的类型（键值对），而是 case 的类型。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Swift 中的隐式赋值，倒是跟 TS 中或者其他类 C 语言的一致，都是第一个数字是 n，后面的就是 n + 1。&lt;/p&gt;
&lt;p&gt;但 Swift 更近一步的，它会根据你声明的类型才隐式赋值，默认是不会的，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;- 声明了 Int 类型，所以隐式赋值了&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; b, c, d &lt;span class=&#34;hljs-comment&#34;&gt;// b c d 分别为 0 1 2(需要使用 A.b.rawValue 才能访问，这又是另一个震惊点了）&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;B&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;- 声明了 String 类型，所以隐式赋值了&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;case&lt;/span&gt; bb, cc, dd &lt;span class=&#34;hljs-comment&#34;&gt;// bb cc dd分别为 &amp;quot;bb&amp;quot; &amp;quot;cc&amp;quot; &amp;quot;dd&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;TS 中，你甚至不能指定 Swift 中指定的那个 Int 类型（这个类型其实指的是 case 的类型），而只能指定 enum 的类型（一般是 &lt;code&gt;Record&lt;/code&gt; 别处的键值对）。&lt;/p&gt;
&lt;h2 id=&#34;结构体和类&#34;&gt;结构体和类&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：结构体居然是值类型？？？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这个浓眉大眼的结构体，居然是值类型（使用了 &lt;code&gt;Immutable&lt;/code&gt; 的那一套东西来优化性能）：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;a&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; c: &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;带着花括号的东西，怎么看也不像值啊！离谱！震惊！&lt;/p&gt;
&lt;h2 id=&#34;属性&#34;&gt;属性&lt;/h2&gt;
&lt;h3 id=&#34;各种xx属性-包装器-观察器&#34;&gt;各种xx属性/包装器/观察器&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：Swift 做的太多了，类似于计算属性、存储属性、属性包装器（TS 也有）、属性观察器（TS 也有，跟包装器一起的）这类概念，一般都是框架带的，比如 Vue 的 `computed` 、`watch` 等，Swift 自己在 Struct 和 类中实现了，离谱！&lt;/p&gt;&lt;/blockquote&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;- 存储属性，直接有值，在 struct 实例化的时候就确定了&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; c: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; b &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;- 一个只读计算属性，不存储值，因为单行，return 可以省略&lt;/span&gt;&lt;br&gt; &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另：属性包装器对全局变量不可用。&lt;/p&gt;
&lt;h2 id=&#34;下标&#34;&gt;下标&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点: 这个没什么好说的，有「下标」这个概念本身就已经让人震惊了，它提供了一种访问集合、列表、字典元素的快捷方式。甚至，下标可以传多个值，就像函数一样。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;基本上，下标的调用方式可以认为是对数据结构（上述的集合、列表、字典）的函数调用来访问值，不同的是函数调用使用 &lt;code&gt;()&lt;/code&gt; ，而下标使用 &lt;code&gt;[]&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;继承&#34;&gt;继承&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点: 跟之前所有的震惊点都类似，Swift 为了实现各种目的、效果，似乎很随意的添加各种关键字，因此与继承相关的保留字（当然，也不能叫「保留字」，因为 Swift 中保留字都可以拿来用，使用反引号包裹即可，下面再震惊）多不胜数。如: `final`、`override`、`open`、`required`，等等。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;构造过程&#34;&gt;构造过程&lt;/h2&gt;
&lt;h3 id=&#34;struct-的逐一成员构造器&#34;&gt;Struct 的逐一成员构造器&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点: 因为 Struct 是值类型，所以它跟传统意义的 Class 的构造器规则在初始化的时候有所差异。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;本来，Struct 和 Class 一样，都是一种平平无常的数据结构，和 TS 中的 Class 没什么不同。但是，Swift 在这里又整出幺蛾子。&lt;/p&gt;
&lt;p&gt;因为 Struct 是值类型，因此特殊一点，它有一个叫做「成员逐一构造器」的构造器形式，就是说当一个 Struct 没有任何 &lt;code&gt;init&lt;/code&gt; 的时候，它就可以通过传入参数的形式来 init 它的属性，而不用显式写出来。&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 此 Struct 没有 init，因此适用逐一成员构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt; &amp;#123; &lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 上述效果等同于：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.a &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; a&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.b &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; b&lt;br&gt; &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 上面两个都可以这么用：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt;(a: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, b: &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是这个规则不适用于 Class，Class 必须显式的拥有 init 构造器方法来初始化属性。&lt;/p&gt;
&lt;h3 id=&#34;类的指定构造器和便利构造器&#34;&gt;类的指定构造器和便利构造器&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点: 什么？构造器还分两种？？？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;类的指定构造器就是跟 TS 中的普通 &lt;code&gt;construct&lt;/code&gt; 一样作用的 &lt;code&gt;init&lt;/code&gt; 方法。但是它的便利构造器…是在 init 前加个 &lt;code&gt;convenience&lt;/code&gt; 关键字（又来！）:&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;convenience&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;init&lt;/span&gt;() &amp;#123;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实这里 Swift 文档没有明确告诉读者，为什么需要便利构造器，而是直接讲起了类的构造、继承过程和构造器代理。我在这里给小白门解释一下为什么需要存在便利构造器这个东西的存在，很简单的原因：&lt;code&gt;类中的多个指定构造器不允许互相调用。&lt;/code&gt;就这么简单的原因，按耐不住想调用？想简化初始化过程？用便利构造器去吧你！&lt;/p&gt;
&lt;p&gt;常规写法：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; c: &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;c&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.b &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; b&lt;br&gt; &amp;#125;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;init&lt;/span&gt;() &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.b &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.c &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UnKnown&amp;quot;&lt;/span&gt;&lt;br&gt; &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上是不是感觉 self.b 这种的写了两遍，麻烦？所以想在第二个 &lt;code&gt;init()&lt;/code&gt; 中，这样干：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;init&lt;/span&gt;() &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;hljs-keyword&#34;&gt;init&lt;/span&gt;(b: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, c: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UnKnown&amp;quot;&lt;/span&gt;)	&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;抱歉，编译器报错：&lt;code&gt;Designated initializer for &#39;A&#39; cannot delegate (with &#39;self.init&#39;); did you mean this to be a convenience initializer?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这种情况，必须使用便利构造器：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;converience &lt;span class=&#34;hljs-keyword&#34;&gt;init&lt;/span&gt;() &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;self&lt;/span&gt;.&lt;span class=&#34;hljs-keyword&#34;&gt;init&lt;/span&gt;(b: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, c: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UnKnown&amp;quot;&lt;/span&gt;)	&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;图的就是一个「便利」～&lt;/p&gt;
&lt;h3 id=&#34;可失败构造器&#34;&gt;可失败构造器&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点: 构造器还能构造失败的？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;其实所谓的可失败构造器，就是指在构造过程（init 函数调用过程）可能抛错。&lt;/p&gt;
&lt;p&gt;因此，如果构造器抛错，你不用像 TS 一样，在外层 &lt;code&gt;try-catch&lt;/code&gt;，而是直接说明即可，方法就是在 &lt;code&gt;init&lt;/code&gt; 后面加个问号变成 &lt;code&gt;init?&lt;/code&gt;，然后在可能抛错的地方返回 &lt;code&gt;nil&lt;/code&gt; ，在实例化的时候判断是否为 &lt;code&gt;nil&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;Swift 中正常构造器不返回值，这跟 TS 一样——但 TS 的构造器可以返回值，如果返回值是对象类型则会替代 &lt;code&gt;this&lt;/code&gt; 对象，这似乎更让人震惊。&lt;/p&gt;
&lt;h2 id=&#34;可选链式调用&#34;&gt;可选链式调用&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点: 问：在什么情况下，函数写了 () 但是却没有执行？答：可选链式调用的场景下。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;话不多说，看例子：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;A&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;B&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; c: &lt;span class=&#34;hljs-type&#34;&gt;C&lt;/span&gt;?&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;C&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; d: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;?&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; d &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;B&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 震惊的事情发生了：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 这里，A 函数未执行，不会打印 OK，赋值也不会成功，因为 c 是 nil，这个语句返回 nil（通常 Swift 的赋值语句都返回 Void 的，也就是空元组）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 返回 nil 意味着你可以使用 if-let 语句判断&lt;/span&gt;&lt;br&gt;d.c&lt;span class=&#34;hljs-operator&#34;&gt;?&lt;/span&gt;.d &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt;()&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;错误处理&#34;&gt;错误处理&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：跟枚举一样，Swfit 的 try-catch（实际是 do-catch）设计的很复杂。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;catch 语句不但可以捕获任意错误，还可以捕获特定错误类型，使用 is 或者跟 switch 一样，有多个 catch 分支进行进行匹配，离谱：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; someError()&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ErrorA&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// xxx&lt;/span&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ErrorB&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;ErrorC&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;ErrorD&lt;/span&gt;.a &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// xxx&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;并发&#34;&gt;并发&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：看文档的时候，我一开始并未意识到 `withTaskGroup` 是一个内置的进行 Group Task 的方法。。。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;至于 &lt;code&gt;await&lt;/code&gt; 跟 TS 中的 &lt;code&gt;await&lt;/code&gt; 完全一样的用法，爽！&lt;/p&gt;
&lt;h2 id=&#34;扩展&#34;&gt;扩展&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：扩展应该算是 Swift 中最强的设计了，任何对象，无论内置还是三方，都可以随意的、低成本的、无需任何复杂声明任何复杂关键字的，进行扩展。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;相比于 TS 中，你想扩展一个已有的类，你需要在原型链上做一些操作，然后再修改对象的 this 指向这个类。&lt;/p&gt;
&lt;p&gt;但是在 Swift 中，你只需要一个 &lt;code&gt;extension&lt;/code&gt; 然后就可以肆无忌惮的写任何你想写的方法、属性，他们的 &lt;code&gt;this&lt;/code&gt; 都指向实例，或者扩展类型（也就是静态）方法、属性。&lt;/p&gt;
&lt;p&gt;简直炫酷狂拽屌炸天。&lt;/p&gt;
&lt;h2 id=&#34;协议&#34;&gt;协议&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：我觉得协议的出现是为了解决 Struct 的抽象问题，因为任何语言中，类本身都是可以继承（可能说的绝对了），不需要再多余实现一个「协议」，使用抽象类即可。只是顺带的，Swift 限制了类只能继承一个父类的同时，让协议更多的在类和 Struct 和枚举上同时发挥作用。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;不说了，想说的都在上面。&lt;/p&gt;
&lt;h2 id=&#34;泛型&#34;&gt;泛型&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：泛型整了个「关联类型」，其实发挥的作用就是声明的时候带的泛型，但是更强大。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Swift 的泛型关联类型是这样子的：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Container&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;associatedtype&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Item&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;append&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;item&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Item&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; count: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;subscript&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Item&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至于为什么不设计成这样：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Container&lt;/span&gt;&amp;lt;&lt;span class=&#34;hljs-title class_&#34;&gt;Item&lt;/span&gt;&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;append&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;item&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Item&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; count: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;subscript&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Item&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;估计是因为这个 Item 可能会很长，不优雅吧，如：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SuffixableContainer&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;Container&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;associatedtype&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Suffix&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;SuffixableContainer&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Suffix&lt;/span&gt;.&lt;span class=&#34;hljs-type&#34;&gt;Item&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Item&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;suffix&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;size&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Suffix&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写到名字的后面的话，那么泛型声明会经常超出屏幕，难顶。&lt;/p&gt;
&lt;h2 id=&#34;不透明类型和封装协议&#34;&gt;不透明类型和封装协议&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：你可以实现一个效果，即只让编译器知道你的类型是什么，但是调用端不知道具体类型，而只知道它遵守某项协议。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;基本上，不透明类型和封装协议想实现的效果是，一方面对调用者隐藏实现细节，一方面可以允许重构代码的时候不用修改太多地方，举个例子：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Shape&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;area&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Double&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Circle&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;Shape&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; radius: &lt;span class=&#34;hljs-type&#34;&gt;Double&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;area&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Double&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; .pi &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt; radius &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt; radius&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;makeShape&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;some&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Shape&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Circle&lt;/span&gt;(radius: &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里，&lt;code&gt;makeShape&lt;/code&gt; 返回的类型，只要遵守 &lt;code&gt;Shape&lt;/code&gt; 协议类型的任意类型都可以，不用明确返回 &lt;code&gt;Circle&lt;/code&gt; 类型。如此一来，后续添加新的遵守 &lt;code&gt;Shape&lt;/code&gt; 类型的 &lt;code&gt;Struct&lt;/code&gt;，该函数都可以返回（这也是 SwiftUI 中所常用的一种方式，比如 &lt;code&gt;some View&lt;/code&gt;等）。&lt;/p&gt;
&lt;h2 id=&#34;内存安全&#34;&gt;内存安全&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：Swift 因为可以按引用传递值，所以会产生同时对一块内存区域的读写（这很合理对吧？）&lt;/p&gt;&lt;/blockquote&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;inout&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) &amp;#123;&lt;br&gt;    b &lt;span class=&#34;hljs-operator&#34;&gt;+=&lt;/span&gt; a&lt;br&gt;&amp;#125;&lt;br&gt;add(&lt;span class=&#34;hljs-operator&#34;&gt;&amp;amp;&lt;/span&gt;a)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述运行会报错，但是编译器不会有提醒。诸如此类的还有很多，在这种情况下要特别注意。因为 TS 中不存在按引用传值的情况，所以不会有这种问题，easy～&lt;/p&gt;
&lt;h2 id=&#34;高级运算符&#34;&gt;高级运算符&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：你可以重写/自定义实现一个以符号为函数名的函数，以此来实现相同类、结构体的实例之间的相互操作。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; c &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;+&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;left&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;right&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt;(b: left.b &lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt; right.b, c: left.c &lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt; right.c)&lt;br&gt; &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 然后你就可以&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; b &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; c &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt; b &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;- 是的你没看错，struct 实例可以相加！&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个设计好，我怎么没想到呢？牛逼牛逼。&lt;/p&gt;
&lt;p&gt;需要注意的是，运算符方法是有自身属性的，如 &lt;code&gt;+&lt;/code&gt; 是二元操作符也是中缀运算符，所以接受两个函数，&lt;code&gt;-&lt;/code&gt; 既可以是中缀运算符（二元操作符），也可以是前缀运算符（一元操作符，&lt;code&gt;func&lt;/code&gt; 前需要加 &lt;code&gt;prefix&lt;/code&gt;），因此可以重载。&lt;/p&gt;
&lt;p&gt;但是 Swift 又规定了赋值运算符&lt;code&gt;=&lt;/code&gt; 不能被重载，三元条件运算符（&lt;code&gt;a ? b : c&lt;/code&gt;）也不能。&lt;/p&gt;
&lt;p&gt;这个运算符是如此的常见，以至于你可以在任意的 Swift 内置对象/Foundation 对象中，看到诸如 &lt;code&gt;==&lt;/code&gt; 相等判断的运算符函数。&lt;/p&gt;
&lt;p&gt;你甚至可以实现自己运算符！&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 需要先声明，这是一个操作符，因为有两个值在操作符，所以这是个中缀操作符(infix)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;infix&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;+++++++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 然后扩展一下整数类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Int&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;+++++++&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;left&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;hljs-params&#34;&gt;right&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (left &lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt; right) &lt;span class=&#34;hljs-operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;- 因为有 7 个 + 号，所以我写了乘以 7&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 这么用：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;+++++++&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;- 63&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;真牛逼。&lt;/p&gt;
&lt;h3 id=&#34;结果构建器&#34;&gt;结果构建器&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：Swift 为了「优雅」、「复用」，无所不用其极。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;为了让下面这段代码看上去好看，Swfit 「发明」了 &lt;code&gt;@resultBuilder&lt;/code&gt; 这个神奇的东西，如下：&lt;/p&gt;
&lt;p&gt;普通写法：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 这里会有一个三元判断&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; c &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt;(a: a &lt;span class=&#34;hljs-operator&#34;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&#34;hljs-operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;666&lt;/span&gt; : &lt;span class=&#34;hljs-number&#34;&gt;999&lt;/span&gt; )&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Swift 说，上面的三元判断太麻烦，而且复杂判断的话会很长不好阅读，希望优雅点，于是，结果构建器诞生了（如果我没理解错的话）：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;@resultBuilder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BBuilder&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;buildBlock&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;// 对应 if/else 分支的执行结果&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; b&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;buildEither&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;aaa&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;// 对应 if 分支&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; aaa&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;buildEither&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;bbb&lt;/span&gt;: &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;// 对应 else 分支&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; bbb&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在上面的 &lt;code&gt;c&lt;/code&gt; 变量这么赋值：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;BB&lt;/span&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@BBuilder&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;b&lt;/span&gt;: () -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;A&lt;/span&gt;(a: b())&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 终于等到 c 了，这里的 c 和最开始的 c 完全一样&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; c &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;BB&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; a &lt;span class=&#34;hljs-operator&#34;&gt;&amp;gt;&lt;/span&gt; b &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;666&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;999&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复用，优雅，高效，绝！&lt;/p&gt;
&lt;h2 id=&#34;词法结构&#34;&gt;词法结构&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 震惊点：尽管 Swift 中的保留字多不胜数，但是它允许你将保留字用作标识符。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;方法就是，使用反引号扩住即可：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs swift&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;`func`&lt;/span&gt;() &amp;#123;&amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;lt;- 一个叫做 `func` 的函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 调用也是 &lt;/span&gt;&lt;br&gt;`func`()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但除了关键字外，&lt;code&gt;x&lt;/code&gt; 和 x 是同一个变量。&lt;/p&gt;
</description>
            <pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/tech/app-dev-journey-swift.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/tech/app-dev-journey-swift.html</guid>
            
                <category>Apple</category>
            
                <category>苹果</category>
            
                <category>初体验</category>
            
                <category>教程</category>
            
                <category>技巧</category>
            
                <category>技术</category>
            
                <category>Swift</category>
            
                <category>全栈</category>
            
            
                <category>tech</category>
            
        </item>
        
        <item>
            <title>如何使用 Cusor 开发 iOS 应用并实时预览</title>
            <description>&lt;p&gt;本文是原作者的扩展版，原作者的原文见：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.imjp.uk/fxxk-xcode&#34; target=&#34;_blank&#34;&gt; 在 Cursor 打造高效 iOS 开发环境： AI 编程 + 实时预览完整指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我在这里做个额外的补充是因为在我看这个教程的时候，有些地方因为完全不懂 XCode 和 iOS 开发，因此走了一些弯路，因此在此做个记录。&lt;/p&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 本文主要对原文做一个补充，请先查看原文。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;对「安装-swift-插件和-codelldb-插件。」的补充：&#34;&gt;对「安装 Swift 插件和 CodeLLDB 插件。」的补充：&lt;/h3&gt;
&lt;p&gt;这里的写的 Swift 插件已经过时了，需要用最新的插件，插件市场搜索：**Swift Programming Language **即可。&lt;/p&gt;
&lt;h3 id=&#34;对「设置热加载」第二步的补充：&#34;&gt;对「&lt;strong&gt;设置热加载&lt;/strong&gt;」第二步的补充：&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 打开项目对应 Target 的设置 -&gt; Build Settings -&gt; 搜索 Other Linker Flags，分别添加 -Xlinker 和 -interposable。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这里注意要同时添加，即复制 &lt;code&gt;-Xlinker -interposable&lt;/code&gt; 粘贴到下图中：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2025/use-cursor-develop-ios/197800e8-7a61-8012-b016-c6caf5e72435.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;添加新文件后，会报-source-kit-找不到文件的问题&#34;&gt;添加新文件后，会报 Source Kit 找不到文件的问题&lt;/h3&gt;
&lt;p&gt;得用 Xcode-Build-Server 重新运行一次原文中提到的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;// 然后在项目根目录下根据你的项目文件类型执行对应的命令:&lt;br&gt;xcode-build-server config -workspace *.xcworkspace -scheme &amp;lt;XXX&amp;gt; &lt;br&gt;xcode-build-server config -project *.xcodeproj -scheme &amp;lt;XXX&amp;gt;&lt;br&gt;&lt;br&gt;//例如你用的是 exampleProject.xcodeproj：&lt;br&gt;xcode-build-server config -project exampleProject.xcodeproj -scheme exampleProject&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;调试-swiftui-的时候修改无法实时预览的问题：&#34;&gt;调试 SwiftUI 的时候修改无法实时预览的问题：&lt;/h3&gt;
&lt;p&gt;部分 ViewModifier 添加/修改后确实无法实时更新，但是类似于 Text 中的 String 的修改，一般就没问题。我也不知道为什么。&lt;/p&gt;
</description>
            <pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/tech/use-cursor-develop-ios.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/tech/use-cursor-develop-ios.html</guid>
            
                <category>Apple</category>
            
                <category>教程</category>
            
                <category>技巧</category>
            
                <category>AI</category>
            
                <category>技术</category>
            
                <category>XCode</category>
            
            
                <category>tech</category>
            
        </item>
        
        <item>
            <title>Jekyll 迁移到 Hexo 问题记录</title>
            <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;我是一名前端开发人员，因此对其他的一些脚本语言如 Ruby 并不熟悉。刚开始写博客的时候使用了 Github Pages 作为博客平台，它默认使用的是 Jeklly 框架，想着内容比框架更重要，因此也就用着了，这一用就是 10 年。&lt;/p&gt;
&lt;p&gt;期间换过一些主题，后来锁定了 Hux 提供的主题，简洁大方好看，而且是开源的：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://huangxuan.me/&#34; target=&#34;_blank&#34;&gt; 黄玄的博客 | Hux Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我针对这个主题做了很多的定制化内容，如自定义右侧内容、自定义数据、使用 Notion 作为数据源渲染等。&lt;/p&gt;
&lt;p&gt;但随着苹果的 M 系列芯片的发布，我越来越难以处理 Ruby 在 Intel 和 Apple 芯片之间的差异，举个例子来说，我构建的时候需要特定使用 x86 架构的指令才能偶然正确 build，这还是我不能随便动任意一个依赖的前提下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;arch&lt;/span&gt; -x86_64 bundle &lt;span class=&#34;hljs-built_in&#34;&gt;exec&lt;/span&gt; jekyll server --trace --config=_config.dev.yml --ssl-key local.xheldon.cn.key --ssl-cert local.xheldon.cn.pem&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因此我意识到如果再不尽快更换框架，我可能将来就完全无法发布博客了。&lt;/p&gt;
&lt;h2 id=&#34;技术选型&#34;&gt;技术选型&lt;/h2&gt;
&lt;p&gt;这一节没有什么好说的，你基本可以认为，Hexo 是 Jekyll 的 JavaScript 实现。里面的很多概念，95% 的都相同，因此迁移上手无难度。&lt;/p&gt;
&lt;p&gt;更重要的是，Hexo 中也有人做了 Hux 的博客主题模板，因此我就直接拿来用了，在这个过程中简单记录一下过程。&lt;/p&gt;
&lt;h2 id=&#34;迁移过程&#34;&gt;迁移过程&lt;/h2&gt;
&lt;h3 id=&#34;插件迁移&#34;&gt;插件迁移&lt;/h3&gt;
&lt;p&gt;这个属于比较容易的，在 Jekyll 中的插件，在 Hexo 中我是用辅助函数实现，如下是我处理来自 Notion 的 Bookmark 的标签的函数（路径是 &lt;code&gt;_plugins/add-attribute.rb&lt;/code&gt;：）&lt;/p&gt;
&lt;figure class=&#34;highlight ruby&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Jekyll&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RenderBookMarkBlock&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Liquid::Block&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;initialize&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;tag_name, attr, tokens&lt;/span&gt;)&lt;br&gt;            &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;# 普通的链接没有 yid 和 bid&lt;/span&gt;&lt;br&gt;            attrs = attr.scan(&lt;span class=&#34;hljs-regexp&#34;&gt;/url\=\&amp;quot;(.*)\&amp;quot;\stitle\=\&amp;quot;(.*)\&amp;quot;\simg\=\&amp;quot;(.*)\&amp;quot;\syid\=\&amp;quot;(.*)\&amp;quot;\sbid\=\&amp;quot;(.*)\&amp;quot;/&lt;/span&gt;)&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; !attrs.empty?&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@url&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@yid&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@bid&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@firstChar&lt;/span&gt; = &lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt;.empty? ? &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; : (&lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt;)[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;].upcase&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@error&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;                attrs = attr.scan(&lt;span class=&#34;hljs-regexp&#34;&gt;/url\=\&amp;quot;(.*)\&amp;quot;\stitle\=\&amp;quot;(.*)\&amp;quot;\simg\=\&amp;quot;(.*)\&amp;quot;/&lt;/span&gt;)&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@url&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@firstChar&lt;/span&gt; = &lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt;.empty? ? &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; : (&lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt;)[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;].upcase&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@error&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;context&lt;/span&gt;)&lt;br&gt;            &lt;span class=&#34;hljs-variable&#34;&gt;@desc&lt;/span&gt; = &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;hljs-variable&#34;&gt;@yid&lt;/span&gt;.&lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt;? &amp;amp;&amp;amp; !&lt;span class=&#34;hljs-variable&#34;&gt;@yid&lt;/span&gt;.empty?&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;p class=&amp;#x27;embed-responsive embed-responsive-16by9&amp;#x27;&amp;gt;&amp;lt;iframe src=&amp;#x27;https://www.youtube.com/embed/&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@yid&lt;/span&gt;&amp;#125;&lt;/span&gt;?rel=0&amp;#x27; title=&amp;#x27;YouTube video player&amp;#x27; frameborder=&amp;#x27;0&amp;#x27; allow=&amp;#x27;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&amp;#x27; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;elsif&lt;/span&gt; !&lt;span class=&#34;hljs-variable&#34;&gt;@bid&lt;/span&gt;.&lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt;? &amp;amp;&amp;amp; !&lt;span class=&#34;hljs-variable&#34;&gt;@bid&lt;/span&gt;.empty?&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;p class=&amp;#x27;embed-responsive embed-responsive-16by9&amp;#x27; style=&amp;#x27;border-bottom: 1px solid #ddd;&amp;#x27;&amp;gt;&amp;lt;iframe src=&amp;#x27;//player.bilibili.com/player.html?bvid=&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@bid&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;amp;high_quality=1&amp;amp;as_wide=1&amp;#x27; scrolling=&amp;#x27;no&amp;#x27; border=&amp;#x27;0&amp;#x27; frameborder=&amp;#x27;no&amp;#x27; framespacing=&amp;#x27;0&amp;#x27; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;lt;a class=&amp;#x27;link-bookmark&amp;#x27; href=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@url&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27; target=&amp;#x27;_blank&amp;#x27;&amp;gt;&amp;lt;span data-bookmark-img=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27; data-bookmark-title=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@firstChar&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27;&amp;gt;&amp;lt;img src=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27;/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;span&amp;gt;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@desc&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@url&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Liquid&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:Template&lt;/span&gt;.register_tag(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;render_bookmark&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;Jekyll&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:RenderBookMarkBlock&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在 Hexo 中我是这么写的（路径是 &lt;code&gt;scripts/liquid.js&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;hexo.&lt;span class=&#34;hljs-property&#34;&gt;extend&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;tag&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;render_bookmark&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;args, content&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; [url, title, img, yid, bid] = args.&lt;span class=&#34;hljs-title function_&#34;&gt;map&lt;/span&gt;(getValue);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; firstChar = title ? title[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;hljs-title function_&#34;&gt;toUpperCase&lt;/span&gt;() : &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; strip_html = hexo.&lt;span class=&#34;hljs-property&#34;&gt;extend&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;helper&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;strip_html&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(hexo);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; trim = hexo.&lt;span class=&#34;hljs-property&#34;&gt;extend&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;helper&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;trim&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(hexo);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (yid) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`&amp;lt;p class=&amp;#x27;embed-responsive embed-responsive-16by9&amp;#x27;&amp;gt;&amp;lt;iframe src=&amp;#x27;https://www.youtube.com/embed/&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;yid&amp;#125;&lt;/span&gt;?rel=0&amp;#x27; title=&amp;#x27;YouTube video player&amp;#x27; frameborder=&amp;#x27;0&amp;#x27; allow=&amp;#x27;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&amp;#x27; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (bid) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`&amp;lt;p class=&amp;#x27;embed-responsive embed-responsive-16by9&amp;#x27; style=&amp;#x27;border-bottom: 1px solid #ddd;&amp;#x27;&amp;gt;&amp;lt;iframe src=&amp;#x27;//player.bilibili.com/player.html?bvid=&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;bid&amp;#125;&lt;/span&gt;&amp;amp;high_quality=1&amp;amp;as_wide=1&amp;#x27; scrolling=&amp;#x27;no&amp;#x27; border=&amp;#x27;0&amp;#x27; frameborder=&amp;#x27;no&amp;#x27; framespacing=&amp;#x27;0&amp;#x27; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`&amp;lt;p&amp;gt;&amp;lt;a class=&amp;#x27;link-bookmark&amp;#x27; href=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;url&amp;#125;&lt;/span&gt;&amp;#x27; target=&amp;#x27;_blank&amp;#x27;&amp;gt;&amp;lt;span data-bookmark-img=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;img&amp;#125;&lt;/span&gt;&amp;#x27; data-bookmark-title=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;firstChar&amp;#125;&lt;/span&gt;&amp;#x27;&amp;gt;&amp;lt;img src=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;img&amp;#125;&lt;/span&gt;&amp;#x27;/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;span&amp;gt; &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;title&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt; &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;strip_html(trim(content))&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt; &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;url&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;;&lt;br&gt;&amp;#125;, &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ends&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;permalink-问题&#34;&gt;Permalink 问题&lt;/h3&gt;
&lt;p&gt;不知道为什么，我在 Hexo 中设置了 &lt;code&gt;:category/:name.html&lt;/code&gt; 但是依然给我生成的是 &lt;code&gt;life/2024-life-xxx.html&lt;/code&gt;（使用 &lt;code&gt;-&lt;/code&gt;目录分割） 而预期应该是 &lt;code&gt;life/xxx.html&lt;/code&gt;，看源码 &lt;code&gt;name&lt;/code&gt; 使用了 &lt;code&gt;slug&lt;/code&gt;，的 &lt;code&gt;basename&lt;/code&gt;，但是 &lt;code&gt;slug&lt;/code&gt; 生成逻辑是基于 folder 路径然后加上 - 的，因此我只能自己手动修改文件名。Jekyll 中，文件名前的日期格式，如 &lt;a href=&#34;http://2024-02-12-xxx.md&#34;&gt;2024-02-12-xxx.md&lt;/a&gt; 中，2024-02-12 会被忽略，title 直接就是 xxx，但是在 Hexo 中 title 在 post 中读取的 title front matter，所以只能写一个 filter 插件来最终确定 permalink 地址:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * permalink 中的 name 不符合预期，对于 _posts/life/2015/xxx.md 来说，在文档中 :name 表示的是 xxx，但是实际是 life-2015-xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;hexo.&lt;span class=&#34;hljs-property&#34;&gt;extend&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;filter&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;post_permalink&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;data&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 在这里修改 post.name 的值&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; arr = data.&lt;span class=&#34;hljs-title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;Boolean&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; categories = arr[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;];&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; name = arr[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;];&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;categories&amp;#125;&lt;/span&gt;/&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;name.split(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;).filter(&lt;span class=&#34;hljs-built_in&#34;&gt;Boolean&lt;/span&gt;).slice(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;).join(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;)&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，permalink 不能是纯数字，得用字符串：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2025/jekyll-2-hexo/147800e8-7a61-8006-a660-e8ecfbe7da9a.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;p&gt;不然报错（看 .endsWith 就知道为什么报错啦）：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2025/jekyll-2-hexo/147800e8-7a61-8032-8e51-d6528f277306.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ejs-模板语法问题&#34;&gt;EJS 模板语法问题&lt;/h3&gt;
&lt;p&gt;ejs 模板嵌套的时候，与 Jekyll 的 liquid 语法不同的是，它不能在模板中自定义 front-matter。也就是说，模板之间的传参，只能外层到内层，不能从内到外。比如我 index 的 layout 是  page，同时还设置了 fornt-matter，但是此 front-matter 无法被 page.ejs 这个模板读取到，因此我只能每个用到的地方都往下传参。&lt;/p&gt;
&lt;h3 id=&#34;markdown-语法渲染问题&#34;&gt;Markdown 语法渲染问题&lt;/h3&gt;
&lt;p&gt;Hexo 自带的  marked 的 markdown 渲染跟 jekyll 的 karmarkdown 渲染有出入，前者会把诸如  ## h2 （换行+空行）段落 中的空行+段落给忽略，而后者不会。&lt;/p&gt;
&lt;p&gt;虽然无伤大雅，但是这样会导致我在首页的时候，内容摘要会少一个空格导致不完全一致，而我希望尽可能的完全一致，这样 SEO 才不会降权，才能让搜索引擎不会认为我的内容有巨大改动。&lt;/p&gt;
&lt;p&gt;于是我使用了 markdown-it 进行处理，安装 hexo-renderer-markdown-it 即可。&lt;/p&gt;
&lt;h3 id=&#34;liquid-排序问题&#34;&gt;Liquid 排序问题&lt;/h3&gt;
&lt;p&gt;我 Jekyll 的 liquid 的排序是这么用的： &lt;code&gt;&amp;#123;&amp;#123; tags | split:&#39;`**`SEPARATOR`**`&#39; | sort &amp;#125;&amp;#125;&lt;/code&gt; :&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2025/jekyll-2-hexo/0389dcbb-8bb7-413c-a968-4a77a8b76b71.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;p&gt;问题是，Liquid 的排序在 sort 部分相同后，会按照后面的 href 字符串排序的，因此继承过来：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2025/jekyll-2-hexo/a24e2d73-ab8b-4b5d-a57d-7e0f2f5f0a66.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;mermaid-语法问题&#34;&gt;Mermaid 语法问题&lt;/h3&gt;
&lt;p&gt;mermaid 不能被 highlight 高亮，需要在 hexo 的 config 中排除掉：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;exclude_languages:&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;mermaid&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;markdown-无法使用-ejs-语法问题&#34;&gt;Markdown 无法使用 EJS 语法问题&lt;/h3&gt;
&lt;p&gt;暂时没管，曲线绕。&lt;/p&gt;
&lt;h3 id=&#34;分页生成问题&#34;&gt;分页生成问题&lt;/h3&gt;
&lt;p&gt;hexo-generator-index 的 pagination 生成的是 page/2 page/3 但是 jekyll 中的格式是 page2, page3 所以复制了该插件源码放到本地进行修改（位于 &lt;code&gt;scripts/pagination.js&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;#x27;use strict&amp;#x27;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; pagination = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hexo-pagination&amp;#x27;&lt;/span&gt;);&lt;br&gt;hexo.&lt;span class=&#34;hljs-property&#34;&gt;config&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;index_generator&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;assign&lt;/span&gt;(&lt;br&gt;  &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;per_page&lt;/span&gt;:&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; hexo.&lt;span class=&#34;hljs-property&#34;&gt;config&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;per_page&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;undefined&amp;#x27;&lt;/span&gt; ? &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; : hexo.&lt;span class=&#34;hljs-property&#34;&gt;config&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;per_page&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;order_by&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;-date&amp;#x27;&lt;/span&gt;,&lt;br&gt;  &amp;#125;,&lt;br&gt;  hexo.&lt;span class=&#34;hljs-property&#34;&gt;config&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;index_generator&lt;/span&gt;&lt;br&gt;);&lt;br&gt;hexo.&lt;span class=&#34;hljs-property&#34;&gt;extend&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;generator&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;index&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;locals&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; config = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;config&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; posts = locals.&lt;span class=&#34;hljs-property&#34;&gt;posts&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;sort&lt;/span&gt;(config.&lt;span class=&#34;hljs-property&#34;&gt;index_generator&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;order_by&lt;/span&gt;);&lt;br&gt;  posts.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;sort&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (b.&lt;span class=&#34;hljs-property&#34;&gt;sticky&lt;/span&gt; || &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) - (a.&lt;span class=&#34;hljs-property&#34;&gt;sticky&lt;/span&gt; || &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;));&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; paginationDir = config.&lt;span class=&#34;hljs-property&#34;&gt;pagination_dir&lt;/span&gt; || &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;page&amp;#x27;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; path = config.&lt;span class=&#34;hljs-property&#34;&gt;index_generator&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;path&lt;/span&gt; || &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;pagination&lt;/span&gt;(path, posts, &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;perPage&lt;/span&gt;: config.&lt;span class=&#34;hljs-property&#34;&gt;index_generator&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;per_page&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;layout&lt;/span&gt;: [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;index&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;archive&amp;#x27;&lt;/span&gt;],&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;format&lt;/span&gt;: paginationDir + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;%d/&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;__index&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,&lt;br&gt;    &amp;#125;,&lt;br&gt;  &amp;#125;);&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;删除线实现问题&#34;&gt;删除线实现问题&lt;/h3&gt;
&lt;p&gt;默认删除线是 s 标签，但是 jekyll 是 del，用 after_render:html 直接替换（位于 &lt;code&gt;scripts/tag-del.js&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;hexo.&lt;span class=&#34;hljs-property&#34;&gt;extend&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;filter&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;after_render:html&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;str&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; str.&lt;span class=&#34;hljs-title function_&#34;&gt;replace&lt;/span&gt;(&lt;span class=&#34;hljs-regexp&#34;&gt;/&amp;lt;s&amp;gt;/g&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;lt;del&amp;gt;&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;replace&lt;/span&gt;(&lt;span class=&#34;hljs-regexp&#34;&gt;/&amp;lt;\/s&amp;gt;/g&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;lt;/del&amp;gt;&amp;#x27;&lt;/span&gt;);&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;构建后多余文件问题&#34;&gt;构建后多余文件问题&lt;/h3&gt;
&lt;p&gt;有些文件是多余的，构建后删除掉：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2025/jekyll-2-hexo/147800e8-7a61-8077-911f-f5d55f484628.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;p&gt;具体有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;categories/*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;i_dont_wanna_use_default_archives/*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;i_dont_wanna_use_default_tags/*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;less/*&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rss-问题&#34;&gt;RSS 问题&lt;/h3&gt;
&lt;p&gt;我使用了自定义的标签样式来渲染来自 Notion Bookmark 的，以期望跟 Notion 的 Bookmark 一样好看，但是如此一来，RSS 阅读器如 Reeder 就无法正确渲染出样式了，因此我处理了以下，在 Jekyll 中使用的是模板语法处理函数，也即在构建的时候动态替换掉自定义的样式：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Jekyll&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BookmarkFilter&lt;/span&gt;&lt;br&gt;      def &lt;span class=&#34;hljs-title function_&#34;&gt;bookmark_filter&lt;/span&gt;(input)&lt;br&gt;        input.&lt;span class=&#34;hljs-title function_&#34;&gt;gsub&lt;/span&gt;(&lt;span class=&#34;hljs-regexp&#34;&gt;/^\&amp;lt;p\&amp;gt;\&amp;lt;a\s+class=\&amp;quot;link-bookmark\&amp;quot;\shref=(.*)\starget=\&amp;quot;_blank\&amp;quot;\&amp;gt;\&amp;lt;span\&amp;gt;(.*)\&amp;lt;\/span\&amp;gt;\&amp;lt;span\&amp;gt;\&amp;lt;span\&amp;gt;(.*)\&amp;lt;\/span\&amp;gt;\&amp;lt;span\&amp;gt;\n(.*)\n\&amp;lt;\/span\&amp;gt;\&amp;lt;span\&amp;gt;(.*)\&amp;lt;\/span\&amp;gt;\&amp;lt;\/span\&amp;gt;\&amp;lt;\/a\&amp;gt;\&amp;lt;\/p\&amp;gt;$/&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;lt;p&amp;gt;&amp;lt;a href=\1 target=&amp;quot;_blank&amp;quot;&amp;gt;\3&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;#x27;&lt;/span&gt;);&lt;br&gt;      end&lt;br&gt;    end&lt;br&gt;  end&lt;br&gt;  &lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;Liquid&lt;/span&gt;::&lt;span class=&#34;hljs-title class_&#34;&gt;Template&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;register_filter&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;Jekyll&lt;/span&gt;::&lt;span class=&#34;hljs-title class_&#34;&gt;BookmarkFilter&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在 Hexo 中是在构建之后打补丁的方式处理（位于 &lt;code&gt;scripts/rss-gene.js&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; fs = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;fs&amp;#x27;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; path = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;path&amp;#x27;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; ejs = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;ejs&amp;#x27;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; rootDate = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Date&lt;/span&gt;();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;getDate&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;_date&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; date = _date ? &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Date&lt;/span&gt;(_date) : rootDate;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 获取各个部分&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; days = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Sun&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Mon&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Tue&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Wed&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Thu&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Fri&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Sat&amp;#x27;&lt;/span&gt;];&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; months = [&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Jan&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Feb&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Mar&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Apr&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;May&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Jun&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Jul&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Aug&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Sep&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Oct&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Nov&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Dec&amp;#x27;&lt;/span&gt;,&lt;br&gt;  ];&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; dayName = days[date.&lt;span class=&#34;hljs-title function_&#34;&gt;getDay&lt;/span&gt;()];&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; day = &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(date.&lt;span class=&#34;hljs-title function_&#34;&gt;getDate&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;padStart&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; month = months[date.&lt;span class=&#34;hljs-title function_&#34;&gt;getMonth&lt;/span&gt;()];&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; year = date.&lt;span class=&#34;hljs-title function_&#34;&gt;getFullYear&lt;/span&gt;();&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; hours = &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(date.&lt;span class=&#34;hljs-title function_&#34;&gt;getHours&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;padStart&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; minutes = &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(date.&lt;span class=&#34;hljs-title function_&#34;&gt;getMinutes&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;padStart&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; seconds = &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(date.&lt;span class=&#34;hljs-title function_&#34;&gt;getSeconds&lt;/span&gt;()).&lt;span class=&#34;hljs-title function_&#34;&gt;padStart&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 获取时区偏移（以分钟为单位）&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; timezoneOffset = -date.&lt;span class=&#34;hljs-title function_&#34;&gt;getTimezoneOffset&lt;/span&gt;();&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; sign = timezoneOffset &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; ? &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; offsetHours = &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(&lt;br&gt;    &lt;span class=&#34;hljs-title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;floor&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;abs&lt;/span&gt;(timezoneOffset) / &lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt;)&lt;br&gt;  ).&lt;span class=&#34;hljs-title function_&#34;&gt;padStart&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; offsetMinutes = &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;abs&lt;/span&gt;(timezoneOffset) % &lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;padStart&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 格式化为 RFC 2822 格式的字符串&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;dayName&amp;#125;&lt;/span&gt;, &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;day&amp;#125;&lt;/span&gt; &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;month&amp;#125;&lt;/span&gt; &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;year&amp;#125;&lt;/span&gt; &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;hours&amp;#125;&lt;/span&gt;:&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;minutes&amp;#125;&lt;/span&gt;:&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;seconds&amp;#125;&lt;/span&gt; &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;sign&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;offsetHours&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;offsetMinutes&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;hexo.&lt;span class=&#34;hljs-property&#34;&gt;extend&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;generator&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;xml&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;locals&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 仿照 Liquid 内置的日期格式写法&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 注意如果前面不加这个 \uFEFF 则不会被识别为 xml&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; template =&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\uFEFF&amp;#x27;&lt;/span&gt; +&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;`&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;lt;rss version=&amp;quot;2.0&amp;quot; xmlns:atom=&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;lt;channel&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;title&amp;gt;Xheldon Blog&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;description&amp;gt;The Answer to Life, the Universe and Everything is...&amp;lt;/description&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;link&amp;gt;https://www.xheldon.com&amp;lt;/link&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;atom:link href=&amp;quot;https://www.xheldon.com/feed.xml&amp;quot; rel=&amp;quot;self&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;pubDate&amp;gt;&amp;lt;%= getDate() %&amp;gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;lastBuildDate&amp;gt;&amp;lt;%= getDate() %&amp;gt;&amp;lt;/lastBuildDate&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;generator&amp;gt;Hexo v&amp;lt;%= version %&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;% for (post of posts.sort((a, b) =&amp;gt; (new Date(b.date).getTime()) - (new Date(a.date).getTime())).slice(0, 10)) &amp;#123; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;            &amp;lt;title&amp;gt;&amp;lt;%= post.title %&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;            &amp;lt;description&amp;gt;&amp;lt;%= bookmark_filter(post.content) %&amp;gt;&amp;lt;/description&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;            &amp;lt;pubDate&amp;gt;&amp;lt;%= getDate(post.date) %&amp;gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;            &amp;lt;link&amp;gt;&amp;lt;%= post.permalink %&amp;gt;&amp;lt;/link&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;            &amp;lt;guid isPermaLink=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;%= post.permalink %&amp;gt;&amp;lt;/guid&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;            &amp;lt;% for (tag of post.tags.data) &amp;#123; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;                &amp;lt;category&amp;gt;&amp;lt;%= tag.name %&amp;gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;            &amp;lt;% &amp;#125; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;            &amp;lt;% for (cat of post.categories.data) &amp;#123; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;                &amp;lt;category&amp;gt;&amp;lt;%- escape_html(cat.name) %&amp;gt;&amp;lt;/category&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;            &amp;lt;% &amp;#125; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        &amp;lt;% &amp;#125; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;lt;/channel&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;lt;/rss&amp;gt;`&lt;/span&gt;;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; bookmark_filter = hexo.&lt;span class=&#34;hljs-property&#34;&gt;extend&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;helper&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;bookmark_filter&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(hexo);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; escape_html = hexo.&lt;span class=&#34;hljs-property&#34;&gt;extend&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;helper&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;escape_html&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(hexo);&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; data = &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;posts&lt;/span&gt;: locals.&lt;span class=&#34;hljs-property&#34;&gt;posts&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;toArray&lt;/span&gt;(),&lt;br&gt;    getDate,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;version&lt;/span&gt;: hexo.&lt;span class=&#34;hljs-property&#34;&gt;version&lt;/span&gt;,&lt;br&gt;    escape_html,&lt;br&gt;    bookmark_filter,&lt;br&gt;  &amp;#125;;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; jsonContent = ejs.&lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(template, data);&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; outputPath = path.&lt;span class=&#34;hljs-title function_&#34;&gt;join&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;source/_posts&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;feed.xml&amp;#x27;&lt;/span&gt;);&lt;br&gt;  fs.&lt;span class=&#34;hljs-title function_&#34;&gt;writeFileSync&lt;/span&gt;(outputPath, jsonContent, &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;encoding&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;utf8&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;feed.xml&amp;#x27;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;: jsonContent,&lt;br&gt;  &amp;#125;;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;service-worker-问题&#34;&gt;Service-Worker 问题&lt;/h3&gt;
&lt;p&gt;移除了 service worker，因为每次构建，页面的 tags 部分一定会变，导致 html 页面一定会更新，会导致经常需要手动刷新页面，不胜其烦，因此直接移除了。&lt;/p&gt;
&lt;h3 id=&#34;其他问题&#34;&gt;其他问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有些文件是需要的但是没放进入，构建后放入，如 ads.txt 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;layout&lt;/code&gt; 值是 &lt;code&gt;post&lt;/code&gt;  类型的文章， &lt;code&gt;page.path&lt;/code&gt; 的值不以 &lt;code&gt;/&lt;/code&gt; 开头，这点要注意。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后话&#34;&gt;后话&lt;/h2&gt;
&lt;p&gt;基本就是这么多，使用 BeyondCompare 逐行对比后基本可以最小化变化的迁移过去。&lt;/p&gt;
</description>
            <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/tech/jekyll-2-hexo.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/tech/jekyll-2-hexo.html</guid>
            
                <category>使用体验</category>
            
                <category>折腾</category>
            
                <category>总结</category>
            
                <category>教程</category>
            
                <category>技巧</category>
            
                <category>JavaScript</category>
            
                <category>技术</category>
            
                <category>框架</category>
            
            
                <category>tech</category>
            
        </item>
        
        <item>
            <title>赛博朋克 2024：我正在使用的工具们</title>
            <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;2024 年底了，趁着微信的内容助推券即将过期之际，总结一下本年度我日常开发过程中会频繁使用到的各种效率工具，软硬件均有，仅供参考。&lt;/p&gt;
&lt;p caption=&#39;AI 生成图&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-80d5-99b3-da02d3eacde4.webp&#39; alt=&#39;AI 生成图&#39; title=&#39;AI 生成图&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;付费订阅软件&#34;&gt;付费订阅软件&lt;/h2&gt;
&lt;h3 id=&#34;crusor&#34;&gt;Crusor&lt;/h3&gt;
&lt;p&gt;AI 编程，首当其冲（首当其冲：比喻首先受到攻击或遭遇灾难。此处用典——作者注）的是 Cursor。&lt;/p&gt;
&lt;p&gt;在与 Windsurf、Github Copilot 的对比中，新代码生成能力基本不相上下，但是 Cursor 修改/重构已有代码它比其他 AI 代码辅助工具高出一个次元。全程你基本只需要按 Tab 键，它会自动将光标（Cursor）定位到需要重构/修改的地方，你只需要按 Tab 接受，然后继续按 Tab 就会跳到下一个需要重构/修改的地方，而它的 Composer/Agent 也是与 AI 结对编程的开创者，实力毋庸置疑。&lt;/p&gt;
&lt;p caption=&#39;使用 Cursor 的日常编程界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8053-865f-cbdc451a31ad.webp&#39; alt=&#39;使用 Cursor 的日常编程界面&#39; title=&#39;使用 Cursor 的日常编程界面&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;notion&#34;&gt;Notion&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 我用到的功能免费版即可满足，付费版更多的是协同之用，因此来年我将不再订阅续费。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;我使用笔记类软件最重要的两点是：「无限制的导入导出」和「全平台」。Notion 做到了，它：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;支持 API 功能，因此不用担心跑路数据无法导出（点名私有化格式的印象笔记等一众国内笔记产品）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 API，配合 Notion-Flow 浏览器插件可以随时随地写基于 Github 的静态博客；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;它的 database 模块功能，只需要稍微写点服务端代码，即可将其当做网络数据库，如我在博客页面所使用的那样：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://www.xheldon.cn/subscribe/&#34; target=&#34;_blank&#34;&gt; 订阅&amp;付费软件 - Xheldon Blog&lt;/a&gt;&lt;/p&gt;
&lt;p caption=&#39;Notion Flow 插件界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-80ed-b18b-fd360fdc9098.webp&#39; alt=&#39;Notion Flow 插件界面&#39; title=&#39;Notion Flow 插件界面&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;滴答清单&#34;&gt;滴答清单&lt;/h3&gt;
&lt;p&gt;之前买断了 Things，但是在与日历的配合过程中很割裂，被朋友推荐了嘀嗒清单。&lt;/p&gt;
&lt;p&gt;日历、任务、列表视图非常方便，任务详情支持富文本，这可能也是它为付费订阅而不是付费买断的原因，因为需要持续的服务器存储成本支出。&lt;/p&gt;
&lt;p caption=&#39;滴答清单&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-807e-aa46-e617dece267c.webp&#39; alt=&#39;滴答清单&#39; title=&#39;滴答清单&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1password&#34;&gt;1Password&lt;/h3&gt;
&lt;p&gt;密码管理软件当之无愧的老大，在各种场景可以解放双手无需再输入任何密码，支持各种格式的存储如 API Token、信用卡信息、SSH 信息、恢复代码纯文本、WiFi 账号密码。&lt;/p&gt;
&lt;p&gt;而它与系统的深度结合，更将「不输密码」发挥到了极致。当然，在 iOS 平台你需要使用系统自带的键盘才可以调起，这也是我不在手机上使用任何第三方输入法的最主要的原因。&lt;/p&gt;
&lt;p&gt;而安全方面，我更相信商业软件。&lt;/p&gt;
&lt;p caption=&#39;1Password&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-80d7-aea0-cecb9be5a8ab.webp&#39; alt=&#39;1Password&#39; title=&#39;1Password&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;youtube-premium&#34;&gt;Youtube Premium&lt;/h3&gt;
&lt;p&gt;把它算效率工具的原因，是因为我一般用它学习新东西，有不明白的用它搜一搜，总会有相关内容可以学到。最近的如 AI 相关，远点的如 Swift 相关等，甚至性爱技巧也有博主蹭流量来分享经验（当然是自媒体，真假自辨）。不过上面也有一些垃圾内容，网上冲浪注意甄别。&lt;/p&gt;
&lt;p&gt;另外，作为 Premium 会员的「福利」，YouTube Music 也可以免费使用，你既可以将 Apple Music 播放列表导入（需要第三方服务），也可以自己上传音乐文件。其与 Apple Music 相比，好处有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;YouTube Music 的资料库不会擅自用在线曲库的音乐替换你上传的音乐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YouTube Music 的资料库可以允许你最多上传 10 万首音乐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YouTube Music 即使你退订了 YouTube Premium，也依然可以使用你上传的音乐，算是一个音乐网盘。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p caption=&#39;我的 YouTube Music&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/161800e8-7a61-8089-b694-c40de53f4c15.webp&#39; alt=&#39;我的 YouTube Music&#39; title=&#39;我的 YouTube Music&#39;&gt;&lt;/p&gt;
&lt;p&gt;因此，本着消费降级的原则，我已经在 2024 年底，Apple Music 到期之际，退订 Apple Music，订阅 YouTube Premium 了。&lt;/p&gt;
&lt;p caption=&#39;我的 YouTube 主页&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15f800e8-7a61-801c-bdb9-dade7616324d.webp&#39; alt=&#39;我的 YouTube 主页&#39; title=&#39;我的 YouTube 主页&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;付费买断软件&#34;&gt;付费买断软件&lt;/h2&gt;
&lt;h3 id=&#34;popclip&#34;&gt;Popclip&lt;/h3&gt;
&lt;p&gt;右手0帧起手进行搜索&amp;amp;翻译&amp;amp;各种操作，无需左手&amp;amp;键盘。&lt;/p&gt;
&lt;p&gt;我的使用场景是，划选文本后调起 OpenAI Translator，然后在 OpenAI Translator 中设置好任务（下面说）。&lt;/p&gt;
&lt;p caption=&#39;PopClip 主页&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-809a-b407-fedb0270ab0b.webp&#39; alt=&#39;PopClip 主页&#39; title=&#39;PopClip 主页&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;alfred-5&#34;&gt;Alfred 5&lt;/h3&gt;
&lt;p&gt;从 4 带买断直接升上来的，主要是应用启动器和配合 OpenAITranslate 进行问 AI 操作，写了个自定义的脚本，调起方法同上。&lt;/p&gt;
&lt;p caption=&#39;Alfred 主界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8013-ba20-fde096aa3bf9.webp&#39; alt=&#39;Alfred 主界面&#39; title=&#39;Alfred 主界面&#39;&gt;&lt;/p&gt;
&lt;p caption=&#39;Alfred 自定义脚本界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/161800e8-7a61-800e-a495-cd4e85400abd.webp&#39; alt=&#39;Alfred 自定义脚本界面&#39; title=&#39;Alfred 自定义脚本界面&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;bettermouse&#34;&gt;Bettermouse&lt;/h3&gt;
&lt;p&gt;我一直在用罗技的游戏鼠标，罗技有 G HUB 软件，但是该软件有 N 多问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务栏中，只有黑色 icon，这在一众白色 icon 中很扎眼。&lt;/li&gt;
&lt;/ul&gt;
&lt;p caption=&#39;特立独行的 G Hub 软件&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-80ea-8bc1-f301acb45cdd.webp&#39; alt=&#39;特立独行的 G Hub 软件&#39; title=&#39;特立独行的 G Hub 软件&#39;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;交互逻辑奇葩。我想打开软件，需要点击任务栏，然后点启动 G HUB 才能启动，而一般软件的交互是点击直接打开主窗口，右键才显示交互菜单。最不济的，起码给一个可选的设置让用户来决定交互。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作卡顿。启动需要半分钟，偶尔还无法启动，一直卡在动画播放界面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文案描述古怪。请告诉我，如果我想把鼠标放入板载，这个选项此时我应该点击「开启」，还是保持现状即可？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p caption=&#39;离谱的文案描述&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-807e-bc82-e1b1057cf7b7.webp&#39; alt=&#39;离谱的文案描述&#39; title=&#39;离谱的文案描述&#39;&gt;&lt;/p&gt;
&lt;p&gt;而 Bettermouse 除了可以自定义鼠标移动速度外，还可以设置平滑滚动、右键拖拽滑动等高级交互（如 Figma 中你想滚动页面需要按住 cmd 后鼠标左键按下移动，而 Bettermouse 可以让你按下右键即可拖拽页面等）。&lt;/p&gt;
&lt;p caption=&#39;BetterMouse 软件设置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-80d2-b103-c9c785b85f43.webp&#39; alt=&#39;BetterMouse 软件设置&#39; title=&#39;BetterMouse 软件设置&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;magnet&#34;&gt;Magnet&lt;/h3&gt;
&lt;p&gt;很多年前买的窗口管理工具，跟着我的 Apple ID 安装在了一台又一台 Mac 上。快捷键调整窗口屏占比，非～常～方～便～。市面上有挺多类似功能的软件，不过对我来说这款已经足够了，而且经过多个版本迭代后功能更丰富了，完全没有替换的动力。&lt;/p&gt;
&lt;p caption=&#39;Magnet 软件设置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8051-81d6-d51835aaeb7b.webp&#39; alt=&#39;Magnet 软件设置&#39; title=&#39;Magnet 软件设置&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cleanshotx&#34;&gt;CleanshotX&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 大版本买断&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;最强截图/录屏工具，中间还付费升级过一次大版本，不多介绍。最喜欢的功能是：截图后一键复制到粘贴板、截图后一键固定在屏幕上（最常用）。使用场景就是有些东西你看一眼记不住（抱歉年龄越大我大脑的 context 容量越低了），得反复来回切换，截屏固定后免去此烦恼～&lt;/p&gt;
&lt;p caption=&#39;置顶截图&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-808f-90e9-c31105514fac.webp&#39; alt=&#39;置顶截图&#39; title=&#39;置顶截图&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;surge-quantumultx&#34;&gt;Surge/QuantumultX&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 大版本买断&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;因为 Clash 内核不再更新放弃了 ClashX 小猫咪，跟朋友拼了个 Mac Surge 5人车。手机上使用 QuantumultX。&lt;/p&gt;
&lt;p caption=&#39;使用 Surge 当网关&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-80f7-8620-c8391a537a25.webp&#39; alt=&#39;使用 Surge 当网关&#39; title=&#39;使用 Surge 当网关&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;xpic（夹带私货）&#34;&gt;xPic（夹带私货）&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 此为私货推荐，我开发的，哈哈&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;工作中需要压缩图片和转换图片，而一些在线工具不是无法达到预期，就是上传下载太麻烦，又或者有隐私问题。因此我开发了一个工具 xPic，支持图片和视频的压缩、格式转换，以及图片序列帧的合成、视频转 Gif 图。&lt;/p&gt;
&lt;p&gt;同时因为工作中用到了 SVGA，还支持了 SVGA 的便捷预览。软件依然有 bug，还在内测中。&lt;/p&gt;
&lt;p caption=&#39;xPic SVGA 预览&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8072-a02d-f69887f17f73.webp&#39; alt=&#39;xPic SVGA 预览&#39; title=&#39;xPic SVGA 预览&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;免费-开源软件&#34;&gt;免费/开源软件&lt;/h2&gt;
&lt;h3 id=&#34;openai-translator&#34;&gt;OpenAI Translator&lt;/h3&gt;
&lt;p&gt;本身是一个翻译工具没什么值得推荐的，不过它支持 PopClip 调起（原理是向软件注册的一个 Unix 套接字发送数据，命令为：&lt;code&gt;curl -d &amp;quot;$1&amp;quot; --unix-socket /tmp/openai-translator.sock http://openai-translator&lt;/code&gt; 即可唤起），因此可以快速配合 PopClip 进行问 AI 操作，Alfred 同理。&lt;/p&gt;
&lt;p caption=&#39;OpenAI Translator 界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8071-9f06-d2abc7033bb2.webp&#39; alt=&#39;OpenAI Translator 界面&#39; title=&#39;OpenAI Translator 界面&#39;&gt;&lt;/p&gt;
&lt;p&gt;我新加了一个任务为：&lt;/p&gt;
&lt;p caption=&#39;OpenAI Translator 设置界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-80fe-8c06-fdfbe61d1174.webp&#39; alt=&#39;OpenAI Translator 设置界面&#39; title=&#39;OpenAI Translator 设置界面&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;微信输入法&#34;&gt;微信输入法&lt;/h3&gt;
&lt;p&gt;我没有在 iPhone 上使用微信输入法，仅在公司/家里的 Mac 上使用，共享词库很不错。之前一直用搜狗输入法，但不知道是搜狗被腾讯收购后被有意降智逼用户转移还是其他什么原因，搜狗输入法经常会出现一些我完全没有输入过的词，而不是最普通最常用的词。比如我输入 &lt;code&gt;zhuomian&lt;/code&gt;，给我第一个候选词是「卓面」而不是「桌面」。&lt;/p&gt;
&lt;p&gt;另外一个尴尬的是，我承认用键盘战斗的时候输出过「屄」这个字，不知怎的，搜狗输入法仿佛发现了我的癖好，即使我手动特意多输入了几遍 bi 的同音字以期望能够通过「频率调词」来将「屄」这个候选词移动到后面，但总是失败。或者当时成功将其移动到第二页候选词后，过段时间又失败回到了第一个候选词（我发誓这段时间内我没有输入过这个字）。&lt;/p&gt;
&lt;p&gt;另一个问题与之有关，无论任何时间（即使我刚调教过后）我输入 &lt;code&gt;vi&lt;/code&gt; 后，也许是输入法以为我想输入 &lt;code&gt;bi&lt;/code&gt; (毕竟键盘上 &lt;code&gt;v&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 挨着，这么判断很正常），此时它会忽略我曾经有意调教过的 &lt;code&gt;bi&lt;/code&gt; 的候选词顺序，优先给我展示「屄」这个字，这让我在投屏的时候大为尴尬。&lt;/p&gt;
&lt;p&gt;之所以没有在 iPhone 上使用的原因，是因为手机上调起 1Password 的自动填充/验证码自动填充只有原生键盘可以做到。&lt;/p&gt;
&lt;p caption=&#39;微信输入法设置界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-80e8-9e42-c558615951bf.webp&#39; alt=&#39;微信输入法设置界面&#39; title=&#39;微信输入法设置界面&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;orbstack&#34;&gt;OrbStack&lt;/h3&gt;
&lt;p&gt;原生的 Docker/Linux/k8s 管理工具，界面优雅，操作方便，内存占用低，免费的完全够用。比 Docker Desktop 不知道高到哪里去了，这里有一个官方的对比：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.orbstack.dev/compare/docker-desktop&#34; target=&#34;_blank&#34;&gt; OrbStack vs. Docker Desktop · OrbStack Docs&lt;/a&gt;&lt;/p&gt;
&lt;p caption=&#39;OrbStack 界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8025-bacc-d810a6a81df6.webp&#39; alt=&#39;OrbStack 界面&#39; title=&#39;OrbStack 界面&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;immersive-translate&#34;&gt;Immersive translate&lt;/h3&gt;
&lt;p&gt;AI 翻译插件，阅读网页的时候配合快捷键可以全文翻译，也可以只翻译鼠标悬浮下的内容，支持自己提供 API；支持翻译 Youtube 字幕，比谷歌自带的机翻不知道高到哪里去了。&lt;/p&gt;
&lt;p&gt;（PS：谷歌搞大模型为什么不先把自家的全部文档用 AI 翻译一遍而依旧采用机翻痛苦难读？）&lt;/p&gt;
&lt;p caption=&#39;Immersive translate 官网&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8087-8c69-f9aa44bfb9be.webp&#39; alt=&#39;Immersive translate 官网&#39; title=&#39;Immersive translate 官网&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;warp&#34;&gt;Warp&lt;/h3&gt;
&lt;p&gt;杀手锏功能：像编辑文本一样在终端输入 bash 命令。&lt;/p&gt;
&lt;p&gt;直接在 iTerm2、终端等，输入命令有诸多限制，如 &lt;code&gt;vim&lt;/code&gt; 快捷键等无法使用等。如果不是这个功能，我绝不会使用 Wrap，因为它出了很多对我来说完全没必要的功能：AI、协同等。&lt;/p&gt;
&lt;p caption=&#39;Wrap 界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8003-bec7-c767006042fb.webp&#39; alt=&#39;Wrap 界面&#39; title=&#39;Wrap 界面&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;syntax-highlight&#34;&gt;Syntax Highlight&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 开源&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;按下空格，即可预览文件，丰富的格式支持，非～常～方～便～&lt;/p&gt;
&lt;p caption=&#39;Syntax Highlight 界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8096-af2a-e71c652a4594.webp&#39; alt=&#39;Syntax Highlight 界面&#39; title=&#39;Syntax Highlight 界面&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;monitorcontrol&#34;&gt;MonitorControl&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 开源&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;顾名思义，显示器亮度调节软件，支持快捷键，很方便。&lt;/p&gt;
&lt;p caption=&#39;MonitorControl 界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8089-9377-d223950afe0c.webp&#39; alt=&#39;MonitorControl 界面&#39; title=&#39;MonitorControl 界面&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;破解软件&#34;&gt;破解软件&lt;/h2&gt;
&lt;h3 id=&#34;tableplus&#34;&gt;TablePlus&lt;/h3&gt;
&lt;p&gt;偶尔连接服务器数据库查看使用，使用频率极低（毕竟我不是专业运维/服务端），界面好看，操作简单。&lt;/p&gt;
&lt;p caption=&#39;TablePlus 界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8039-8cd7-c4d3be294f4a.webp&#39; alt=&#39;TablePlus 界面&#39; title=&#39;TablePlus 界面&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;硬件&#34;&gt;硬件&lt;/h2&gt;
&lt;h3 id=&#34;g309-鼠标&#34;&gt;G309 鼠标&lt;/h3&gt;
&lt;p&gt;四个字总结：非常喜欢。&lt;/p&gt;
&lt;p&gt;清脆的手感、蓝牙无线双模（蓝牙聊胜于无）、无线连接指哪儿打哪儿的准确性（回报率）、微微拱起的背部、垂直的两侧，加上随赠的防滑贴纸，一切都很完美。&lt;/p&gt;
&lt;p&gt;注：之前我用 G403 和 G502 有线都是非对称鼠标（右键水平位置更低），使用 G309 对称鼠标后，左右键在同一水平位置，中指在右键感觉容易误触，需要有意抬起来一些，习惯了就好。&lt;/p&gt;
&lt;p caption=&#39;小手友好的 G309（虽然我是大手）&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8015-b435-d15e54c1bd29.webp&#39; alt=&#39;小手友好的 G309（虽然我是大手）&#39; title=&#39;小手友好的 G309（虽然我是大手）&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;apple-watch-表带&#34;&gt;Apple Watch 表带&lt;/h3&gt;
&lt;p&gt;淘宝某神秘店铺买的表带，号称原装，拆封不退。只有原价的 1/3 ～ 1/2 的价格，买来后确实跟原装没有任何区别。店铺还有一些是散装无包装的原装/99新/95新的货，看评论基本都可以确认是苹果工厂流出/瑕疵货或者官退货，我为了出二手所以买了带原包装的，但店铺有很多99新散装表带。&lt;/p&gt;
&lt;p caption=&#39;各种表带&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-806d-a1b5-eb2218516b61.webp&#39; alt=&#39;各种表带&#39; title=&#39;各种表带&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;airpods-4-降噪版&#34;&gt;AirPods 4 降噪版&lt;/h3&gt;
&lt;p&gt;出了 AirPods Pro 2，因为它带着确实不舒服，且带了快两年了，想换新的了。于是入了 4 代降噪版。降噪效果我个人使用对比与 Pro 2 代还是有一定差距，但没有差太多，唯一的意外是居然不能用耳机上下滑动耳机柄调节音量，其他的很满意。&lt;/p&gt;
&lt;p caption=&#39;AirPods 4 降噪版&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-8069-8274-f67ac1401a27.webp&#39; alt=&#39;AirPods 4 降噪版&#39; title=&#39;AirPods 4 降噪版&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;小米-ih-电饭煲-s1&#34;&gt;&lt;strong&gt;小米 IH 电饭煲 S1&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;淘汰了用了8 年的美的电饭煲（虽然它也没坏），用着不错，唯一震惊的是它煮粥（稀饭）要一个半小时。&lt;/p&gt;
&lt;p caption=&#39;小米电饭锅&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-804b-9e0a-c48863912c40.webp&#39; alt=&#39;小米电饭锅&#39; title=&#39;小米电饭锅&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;美利达探索者x平把公路车&#34;&gt;美利达探索者X平把公路车&lt;/h3&gt;
&lt;p&gt;虽然不算电子产品，但也算作为程序员生活的一部分，也加上吧。通勤用，每天上下班总共20分钟，很方便～&lt;/p&gt;
&lt;p caption=&#39;探索者 X 在雁栖湖&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/the-tools-i-used-in-2024/15a800e8-7a61-80ba-bf2e-e14e392280c4.webp&#39; alt=&#39;探索者 X 在雁栖湖&#39; title=&#39;探索者 X 在雁栖湖&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;欢迎大家分享自己的工具～&lt;/p&gt;
</description>
            <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/life/the-tools-i-used-in-2024.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/life/the-tools-i-used-in-2024.html</guid>
            
                <category>生活</category>
            
                <category>经验</category>
            
                <category>工具</category>
            
                <category>AI</category>
            
            
                <category>life</category>
            
        </item>
        
        <item>
            <title>如何让 TP-Link 关闭 DHCP 后拨号上网</title>
            <description>&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 因为已经配置好了网络，所以一些页面我就用文字代替图片，毕竟为了写博客再重置一遍网络有点麻烦。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;我买的 TP-Link XDR-5480 有一个奇怪的设定：当你关闭了路由器的 DHCP 服务后，它的全部口（包括 SPF 转的口），都会变成 Lan 口，这就导致无法再光猫桥接+路由拨号上网了，而且你的 Lan 口 IP 无法指定，都会从前端路由（也就是光猫）获取。&lt;/p&gt;
&lt;p&gt;此问题老款的 TP-Link 路由器反而没有，可以随意关闭不影响 Wan 口。也许新款 TP-Link 的产品经理觉得如果这样的话，就白白浪费了一个 Wan 口，加上新款的路由器全部都是 Wan/Lan 口混插，所以才把这个问题暴露出来了。&lt;/p&gt;
&lt;p&gt;因为前几天 Mac mini 发布了 M4 款，体型更小，能耗更低，因此网络上又刮起了「Mac mini 当软路由+ Mac Surge 掌管家庭网络」的邪风。因为我当前的网络架构已经很稳定了，大概有一年多没折腾新东西，所以心痒难耐；又一想，我的 Mac Studio 也一直常年不关机，不就也可以跟 mini 一样当一个软路由吗？又加上网友们鼓吹的 Surge（以下均指 Mac Surge）接管 DHCP 服务可以全屋无感魔法上网以及实时「优雅」的查看各个设备的连接情况。本着「优雅永不过时」的态度，我又开始着手琢磨如何解决这个 TP-Link 的问题。&lt;/p&gt;
&lt;p&gt;网上搜了一圈，如：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cn.v2ex.com/t/1053641&#34; target=&#34;_blank&#34;&gt; tp link 的路由器如何能在关闭 dhcp 服务的同时让 wan 口能够拨号上网？ - V2EX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.chiphell.com/forum.php?mod=viewthread&amp;tid=2521336&amp;highlight=&amp;mobile=no&#34; target=&#34;_blank&#34;&gt; 请教各位大佬关于华硕和tplink路由器关闭dhcp设置的问题 - 电脑讨论(新) -  Chiphell - 分享与交流用户体验&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;现状&#34;&gt;现状&lt;/h2&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 注意：请提前在 TP-Link（以下均指我的 XDR-5480 型号）的设置界面备份你的路由设置，防止你操作失误，无法访问路由器的情况下重置，路由配置丢失的情况，如下图导出配置即可。注意，这里导出的配置不会涉及端口设置和网络，这个产品设计很好的解决了你设置错网络重置然后导入配置依然是错误配置无法访问网络的情况，给 TP-Link 的产品经理点赞。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-80e6-9e16-eb66a08e2ff7.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;网络拓扑图：&#34;&gt;网络拓扑图：&lt;/h3&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-8003-89a9-e3f05024c8b5.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;
&lt;p&gt;不改动当前任何设备的连接方式、网段的情况下（怕被骂），使用 Mac Studio 的 Surge 作为网关掌管 DHCP 服务。&lt;/p&gt;
&lt;h3 id=&#34;难点&#34;&gt;难点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;TP-Link 关闭了自身的 DHCP 服务后，会弹窗告诉你所有的口（包括 SPF 的口）都变成 Lan 口，无法再自定义端口地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TP-Link 关闭了自身的 DHCP 服务后，会弹窗提示你目前所有 Lan 口的 IP 地址，都是从前端路由（也就是光猫）获取，这也无可厚非，毕竟它此时是一个纯 AP，但这也导致了 Suerge 还是能感知到光猫上存在的 DHCP 服务的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac Surge 作为网关的话，它会自己开启一个 DHCP 服务，同时要求网络上没有其他 DHCP 服务，否则会造成冲突掉线的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据第 2 点和第 3 点可得，你需要同时关闭光猫的 DHCP 和路由器的 DHCP 服务。但是！此操作如果你没有提前在光猫/路由器上设置好 IP 与 Mac 地址绑定的话，就无法再通过 WiFi 连接二者而只能重置路由器和光猫了！（别问我为什么知道的）所以不能关闭光猫的 DHCP 服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决办法&#34;&gt;解决办法&lt;/h2&gt;
&lt;p&gt;基于上面的目标和难点，「朋友们，你们记一下，我作如下部署调整」：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-80ce-8790-d3cef3ef7d8f.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;步骤-1：关闭光猫的电源&#34;&gt;步骤 1：关闭光猫的电源&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; 其实只要断开光猫与 TP-Link 的连接就可以，我这里让关闭电源，只是防止大家可能意外连上光猫的 WiFi，如果你选择忘记光猫 WiFi，那么不关闭电源只断开与 TP-Link 的连接即可。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;我们先不设置光猫，防止它的 DHCP 服务被 Surge 检测到导致 Surge 无法开启 DHCP 服务。而且因为已经关闭了光猫与 TP-Link 的连接，当下一步关闭 TP-Link 的 DHCP 服务的时候，TP-Link 不会再自己检测前端路由器的 DHCP 服务而改变自己的 Lan 口 IP 了。&lt;/p&gt;
&lt;h3 id=&#34;步骤-2：关闭路由器的-dhcp-服务&#34;&gt;步骤 2：关闭路由器的 DHCP 服务&lt;/h3&gt;
&lt;p&gt;在设置里面关了就行了，这里我们选择「关闭」，后续等设置成功后，我们再改为「自动」。改为自动的是为了网络健壮性，我后面说。&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-804e-a69d-edb6a6eaabc1.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;步骤-3：开启-surge-dhcp&#34;&gt;步骤 3：开启 Surge DHCP&lt;/h3&gt;
&lt;p&gt;这一步在 Surge 的「概览」和「设备」tab 都可以找到入口：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-8091-83b9-e144224f35d5.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;p&gt;它会提示你 Surge 会将你的 Mac 的 IP 地址改为手动并固定，我这里就是 &lt;code&gt;192.168.5.100&lt;/code&gt;，具体的教程网上一大把，你既然看到这里，肯定知道怎么设置，这里就不啰嗦了。&lt;/p&gt;
&lt;p&gt;这里有个点需要注意的是，它会显示路由器的地址是 &lt;code&gt;192.168.5.1&lt;/code&gt; 地址池是从 &lt;code&gt;192.168.5.100&lt;/code&gt; 到 &lt;code&gt;192.168.5.200&lt;/code&gt; 我这里把地址池改成了 &lt;code&gt;192.168.5.2&lt;/code&gt; 到 &lt;code&gt;192.168.5.254&lt;/code&gt; 范围更大一些。&lt;/p&gt;
&lt;h3 id=&#34;步骤-4：找到新的路由器地址&#34;&gt;步骤 4：找到新的路由器地址&lt;/h3&gt;
&lt;p&gt;设置完 Surge 后，你再访问路由器的 &lt;code&gt;192.168.5.1&lt;/code&gt; 会发现已经无法访问了！不要紧张，因为此时你的 Mac Studio 是 DHCP 服务，它「居然」会给你的 TP-Link 路由器再分配一个 IP 地址（至于为什么会这样，我也不知道）。你点击「设备」后，找到名字是「Hostname Unsuitable for Printing」的（不确定一定是这个），在地址栏访问，就会发现熟悉的路由器界面又回来了！我这里的新的路由器 IP 地址是 &lt;code&gt;192.168.5.114&lt;/code&gt; 。&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-809d-894e-fbe831126b06.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;步骤-5：修改路由器的-lan-口并拨号&#34;&gt;步骤 5：修改路由器的 Lan 口并拨号&lt;/h3&gt;
&lt;p&gt;此时你是无法上网的，因为你的光猫都没有通电！到这一步，你可以把光猫通电了，等到几分钟，然后在路由器的设置界面，你仍然会发现 &lt;code&gt;Wan 口已经断开连接&lt;/code&gt; 再怎么点都没用。&lt;/p&gt;
&lt;p&gt;但是不要放弃！你想一想，你现在的 Studio 的作用，跟你折腾软路由的情况是不是类似？当时是光猫负责拨号，软路由插到主路由/或者光猫上，负责 DHCP 服务。而现在，我的朋友，你将拨号设备后移到了路由器，你的 Studio 连接了主路由，因此你的 Studio 就变成了软路由，将 DHCP 服务放到了自身上。&lt;/p&gt;
&lt;p&gt;因此关键是这一步：你需要再在设置里，手动指定 TP-Link Lan 口的 IP 地址为 &lt;code&gt;192.168.5.1&lt;/code&gt; 即可（否则整个网络上都没有拥有 &lt;code&gt;192.168.5.1&lt;/code&gt; 这个 IP 的设备了）！&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-80e0-8bb3-f208b1f9c874.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;p&gt;手动指定完 Lan 口 IP 后（虽然叫 Lan 口，但是它连接了光猫，是可以拨号的！），此时我们再回到上网设置，点击「连接」，也许需要点个 4、5 次，因为首次拨号比较久，但是最后会成功的。&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-8092-a5bc-cc3e8f728305.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;步骤-6：结尾&#34;&gt;步骤 6：结尾&lt;/h3&gt;
&lt;p&gt;至此，你的设置就完成了，现在你需要手动将已连接的设备右键，点击「将 Surge 作为其网关」，然后将设备重新连接网络即可：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-8044-b913-da4aafc3219f.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;p&gt;另外可以再设置一下「新设备都将 Surge 作为默认网关」就行了：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-80fc-9142-f5520e0a2756.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;p&gt;此时你的全部设备均把 Surge 当做网关，可以查看他们的实时流量。&lt;/p&gt;
&lt;p&gt;还记得我在第 2 步说的，把 TP-Link 的 DHCP 服务关闭的设置吗？此时你可以再回到 TP-Link，把 DHCP 服务改为「自动」，这么做，是为了万一的万一，**Surge 的 DHCP 服务崩溃了，或者 Mac 坏掉了，你和家里的设备仍然可以访问访问网络，而你，我的朋友，你不会挨骂！**因为 TP-Link 的这个设置会「自动」探测局域网的 DHCP 服务，如果没有就开启自己的 DHCP，如果有就关闭：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2024/how-to-pppoe-after-close-tp-link-dhcp/134800e8-7a61-805c-98c5-e3895ef7dfe0.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;p&gt;注：如果你点了「关」并保存，此时你的路由器的地址又变为了 &lt;code&gt;192.168.5.114&lt;/code&gt; 。而且无法修改（因为你既连了光猫，又关了 DHCP，触发了上面难点中的 1 和 2 的问题），那又需要重新从头（关闭光猫电源）走一遍流程。&lt;/p&gt;
&lt;h2 id=&#34;结尾&#34;&gt;结尾&lt;/h2&gt;
&lt;p&gt;至此就结束了。在这个过程中我遇到了一些奇怪的问题，也做过一些失败的尝试，比如你猜我为什么会想到关闭光猫电源设置好路由器后再打开这个方法？&lt;/p&gt;
&lt;p&gt;祝大家 WiFi 自由！&lt;/p&gt;
</description>
            <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/tech/how-to-pppoe-after-close-tp-link-dhcp.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/tech/how-to-pppoe-after-close-tp-link-dhcp.html</guid>
            
                <category>折腾</category>
            
                <category>软路由</category>
            
                <category>网络</category>
            
                <category>路由器</category>
            
                <category>技巧</category>
            
                <category>技术</category>
            
                <category>旁路由</category>
            
                <category>千兆</category>
            
            
                <category>tech</category>
            
        </item>
        
        <item>
            <title>如何使用 Notion Flow 模块转换</title>
            <description>&lt;p&gt;一周前，我构建了 Notion Flow 浏览器扩展：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/_Xheldon/status/1770466495560294583&#34; target=&#34;_blank&#34;&gt; Xheldon on Twitter / X&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而刚刚更新的 0.4.1 版本：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://notion-flow.xheldon.com/blog/2024/03/31/0.4.1&#34; target=&#34;_blank&#34;&gt; 0.4.1 | Notion Flow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;支持了兼容 AWS S3 API 的自建 OSS 服务，如 Cloudflare R2：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/zh-cn/developer-platform/r2/&#34; target=&#34;_blank&#34;&gt; Cloudflare R2 | 零出口费用分布式对象存储 | Cloudflare | Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇文章简单介绍一下我是如何使用这个浏览器扩展用于我的 Github Jekyll 博客的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Jekyll 静态博客是基于 Ruby 构建的，支持插件。所以我自己写了几个插件（Jekyll 博客的插件位于 &lt;code&gt;_plugins&lt;/code&gt; 目录下，写好 ruby 文件后，丢到该目录下，重启服务即可）来处理 Liquid 模板语言，而内容就是来自 Notion Flow 转换的 Notion 内容。如处理 bookmark 的插件内容如下：&lt;/p&gt;


&lt;figure class=&#34;highlight ruby&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ruby&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Jekyll&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RenderBookMarkBlock&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Liquid::Block&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;initialize&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;tag_name, attr, tokens&lt;/span&gt;)&lt;br&gt;            &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;# 普通的链接没有 yid 和 bid&lt;/span&gt;&lt;br&gt;            attrs = attr.scan(&lt;span class=&#34;hljs-regexp&#34;&gt;/url\=\&amp;quot;(.*)\&amp;quot;\stitle\=\&amp;quot;(.*)\&amp;quot;\simg\=\&amp;quot;(.*)\&amp;quot;\syid\=\&amp;quot;(.*)\&amp;quot;\sbid\=\&amp;quot;(.*)\&amp;quot;/&lt;/span&gt;)&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; !attrs.empty?&lt;br&gt;              &lt;span class=&#34;hljs-comment&#34;&gt;# 外部的 video 链接，youtube、bilibili（如本文上一篇博客就是）&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@url&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@yid&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@bid&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@firstChar&lt;/span&gt; = (&lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt;)[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;].upcase&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@error&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;             &lt;span class=&#34;hljs-comment&#34;&gt;# 正常和 notion 一样的 bookmark（如本文上面三个链接就是）&lt;/span&gt;&lt;br&gt;                attrs = attr.scan(&lt;span class=&#34;hljs-regexp&#34;&gt;/url\=\&amp;quot;(.*)\&amp;quot;\stitle\=\&amp;quot;(.*)\&amp;quot;\simg\=\&amp;quot;(.*)\&amp;quot;/&lt;/span&gt;)&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@url&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@firstChar&lt;/span&gt; = (&lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt;)[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;].upcase&lt;br&gt;                &lt;span class=&#34;hljs-variable&#34;&gt;@error&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;context&lt;/span&gt;)&lt;br&gt;            &lt;span class=&#34;hljs-variable&#34;&gt;@desc&lt;/span&gt; = &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;hljs-variable&#34;&gt;@yid&lt;/span&gt;.&lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt;? &amp;amp;&amp;amp; !&lt;span class=&#34;hljs-variable&#34;&gt;@yid&lt;/span&gt;.empty?&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;p class=&amp;#x27;embed-responsive embed-responsive-16by9&amp;#x27;&amp;gt;&amp;lt;iframe src=&amp;#x27;https://www.youtube.com/embed/&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@yid&lt;/span&gt;&amp;#125;&lt;/span&gt;?rel=0&amp;#x27; title=&amp;#x27;YouTube video player&amp;#x27; frameborder=&amp;#x27;0&amp;#x27; allow=&amp;#x27;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&amp;#x27; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;elsif&lt;/span&gt; !&lt;span class=&#34;hljs-variable&#34;&gt;@bid&lt;/span&gt;.&lt;span class=&#34;hljs-literal&#34;&gt;nil&lt;/span&gt;? &amp;amp;&amp;amp; !&lt;span class=&#34;hljs-variable&#34;&gt;@bid&lt;/span&gt;.empty?&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;p class=&amp;#x27;embed-responsive embed-responsive-16by9&amp;#x27; style=&amp;#x27;border-bottom: 1px solid #ddd;&amp;#x27;&amp;gt;&amp;lt;iframe src=&amp;#x27;//player.bilibili.com/player.html?bvid=&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@bid&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;amp;high_quality=1&amp;amp;as_wide=1&amp;#x27; scrolling=&amp;#x27;no&amp;#x27; border=&amp;#x27;0&amp;#x27; frameborder=&amp;#x27;no&amp;#x27; framespacing=&amp;#x27;0&amp;#x27; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;lt;a class=&amp;#x27;link-bookmark&amp;#x27; href=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@url&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27; target=&amp;#x27;_blank&amp;#x27;&amp;gt;&amp;lt;span data-bookmark-img=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27; data-bookmark-title=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@firstChar&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27;&amp;gt;&amp;lt;img src=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27;/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;span&amp;gt;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@title&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@desc&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@url&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 上传的 video&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Jekyll&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RenderVideoBlock&lt;/span&gt; &amp;lt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Liquid::Block&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;initialize&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;tag_name, attr, tokens&lt;/span&gt;)&lt;br&gt;            &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;&lt;br&gt;            attrs = attr.scan(&lt;span class=&#34;hljs-regexp&#34;&gt;/caption\=\&amp;quot;(.*)\&amp;quot;\simg\=\&amp;quot;(.*)\&amp;quot;\ssuffix\=\&amp;quot;(.*)\&amp;quot;/&lt;/span&gt;)&lt;br&gt;            &lt;span class=&#34;hljs-variable&#34;&gt;@caption&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;            &lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;            &lt;span class=&#34;hljs-variable&#34;&gt;@suffix&lt;/span&gt; = attrs[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;]&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;context&lt;/span&gt;)&lt;br&gt;            text = &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;p caption=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@caption&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27;&amp;gt;&amp;lt;video controls muted&amp;gt;&amp;lt;source src=&amp;#x27;&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@img&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27; type=&amp;#x27;video/&lt;span class=&#34;hljs-subst&#34;&gt;#&amp;#123;&lt;span class=&#34;hljs-variable&#34;&gt;@suffix&lt;/span&gt;&amp;#125;&lt;/span&gt;&amp;#x27; /&amp;gt;&amp;lt;/video&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Liquid&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:Template&lt;/span&gt;.register_tag(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;render_bookmark&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;Jekyll&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:RenderBookMarkBlock&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Liquid&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:Template&lt;/span&gt;.register_tag(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;render_video&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;Jekyll&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:RenderVideoBlock&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;这段的逻辑是如果遇到 Notion 的 bookmark 模块链接是 Youtube、Bilibili，则转成嵌入视频的 HTML（iframe），否则转成类似于 Notion bookmark 的 HTML（需要配合 CSS 实现）。&lt;/p&gt;
&lt;p&gt;所以我使用 Notion Flow 将 Notion 内容转换成 Markdown 格式的同时，自定义了 bookmark 等模块的转换规则，以让博客能够显示 Youtube、Bilibili 和与 Notion 一样的 bookmark 样式内容，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;video&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;video&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;block&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (block.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;file&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 用户自己上传的 video 文件，用默认 video 插件处理&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`&amp;#123;% render_video caption=&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;block.caption&amp;#125;&lt;/span&gt;&amp;quot; img=&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;block.url&amp;#125;&lt;/span&gt;&amp;quot; suffix=&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;block.suffix&amp;#125;&lt;/span&gt;&amp;quot; %&amp;#125;\n![&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;block.caption&amp;#125;&lt;/span&gt;](&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;block.url&amp;#125;&lt;/span&gt;)\n&amp;#123;% endrender_video %&amp;#125;\n`&lt;/span&gt;;&lt;br&gt;  &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (block.&lt;span class=&#34;hljs-property&#34;&gt;type&lt;/span&gt; === &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;external&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 外部链接、youtube 和 bilibili 视频链接，用 bookmark 处理&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;`&amp;#123;% render_bookmark url=&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;block.url&amp;#125;&lt;/span&gt;&amp;quot; title=&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;      block.caption || &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;#125;&lt;/span&gt;&amp;quot; img=&amp;quot;&amp;quot; yid=&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;block.yid&amp;#125;&lt;/span&gt;&amp;quot; bid=&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;      block.bid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;#125;&lt;/span&gt;&amp;quot; %&amp;#125;&amp;#123;% endrender_bookmark %&amp;#125;\n`&lt;/span&gt;;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里需要注意（我不太懂 ruby）， Liquid 模板的标签之间，必须有文本内容（你可以不用），否则，ruby 插件无法生成 HTML。即：&lt;/p&gt;


&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&amp;#123;% render_video  %&amp;#125;这里必须有任意内容！&amp;#123;% endrender_video %&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;这样在 ruby 插件中，&lt;code&gt;super&lt;/code&gt; 变量拿到的就是「这里必须有任意内容！」这句话（你可以不使用该变量）。如果没有这段内容，则插件压根不会返回任何内容。&lt;/p&gt;
</description>
            <pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/tech/how-i-use-notion-flow.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/tech/how-i-use-notion-flow.html</guid>
            
                <category>教程</category>
            
                <category>技巧</category>
            
                <category>工作流</category>
            
                <category>技术</category>
            
                <category>Jekyll</category>
            
                <category>Notion</category>
            
            
                <category>tech</category>
            
        </item>
        
        <item>
            <title>【视频】使用 Notion Flow 简化你的博客发布流程</title>
            <description>&lt;p&gt;本文分享使用 Notion Flow 来简化你的博客发布流程的视频，具体官网见:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://notion-flow.xheldon.com&#34; target=&#34;_blank&#34;&gt; Notion Flow | Notion Flow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Youtube：&lt;/p&gt;
&lt;p class=&#39;embed-responsive embed-responsive-16by9&#39;&gt;&lt;iframe src=&#39;https://www.youtube.com/embed/aPitTcsruhM?rel=0&#39; title=&#39;YouTube video player&#39; frameborder=&#39;0&#39; allow=&#39;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Bilibili：&lt;/p&gt;
&lt;p class=&#39;embed-responsive embed-responsive-16by9&#39; style=&#39;border-bottom: 1px solid #ddd;&#39;&gt;&lt;iframe src=&#39;//player.bilibili.com/player.html?bvid=BV1Ar421h7tM&amp;high_quality=1&amp;as_wide=1&#39; scrolling=&#39;no&#39; border=&#39;0&#39; frameborder=&#39;no&#39; framespacing=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
            <pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/tech/use-notion-flow.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/tech/use-notion-flow.html</guid>
            
                <category>折腾</category>
            
                <category>教程</category>
            
                <category>工作流</category>
            
                <category>技术</category>
            
                <category>插件</category>
            
                <category>视频</category>
            
                <category>Notion</category>
            
            
                <category>tech</category>
            
        </item>
        
        <item>
            <title>让 VSCode 更好用的设置——前端开发角度</title>
            <description>&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(241, 241, 239); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;☝🏻&lt;/span&gt;&lt;span&gt;后面计划出一期视频说明，因为有些设置的效果需要演示才能看出差异，而我又懒得制作动图在博客中了。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;刚开始学习前端的时候，还没有 VSCode，那时我用的是 WebStorm（当时是学生，所以用的盗版）。开箱即用的体验让人爱不释手。后来由于办公电脑配置的下沉，以及它对 4K 及多显示器卡顿问题的长久不解决，再加上周围同事的影响， 最终一击是「配置同步」让我最终切换到 VSCode 。&lt;/p&gt;
&lt;p&gt;在适应了没有单独的悬浮搜索框这一史诗级割裂之后，很快就摸索出了我个人认为好用的配置，下面就详细得说一说。如果有人觉得自己的设置比我的更好的，欢迎在下方留言然后附上原因和效果截图。&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(241, 241, 239); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;📖&lt;/span&gt;&lt;span&gt;默认的设置我基本不说了（除非非常好用），我就说我对于默认配置的修改部分。VSCode 中大部分配置都能修改，比如「是否在右侧小地图位置显示光标行」这种的都能，非常好。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;样式&#34;&gt;样式&lt;/h2&gt;
&lt;h3 id=&#34;主题-字体&#34;&gt;主题/字体&lt;/h3&gt;
&lt;p&gt;主题是 One Dark Pro：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme&#34; target=&#34;_blank&#34;&gt; marketplace.visualstudio.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;字体是 Fira Code：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode?tab=readme-ov-file#download--install&#34; target=&#34;_blank&#34;&gt; GitHub - tonsky/FiraCode: Free monospaced font with programming ligatures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fira Code 是官方推荐字体，&lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/tips-and-tricks#:~:text=zoomLevel%22%3A%205-,Font%20ligatures,-%22editor.fontFamily%22&#34;&gt;内部也在使用&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Fira Code 对一些符号的变体支持非常好看，如 &lt;code&gt;===&lt;/code&gt; 和 &lt;code&gt;&amp;lt;=&lt;/code&gt; 等（有些需要手动启用字符集和变体）：&lt;/p&gt;
&lt;p caption=&#39;Fira Code 字体&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/3371f847-fdd8-410c-82e1-b1d63cd91035.webp&#39; alt=&#39;Fira Code 字体&#39; title=&#39;Fira Code 字体&#39;&gt;&lt;/p&gt;
&lt;p&gt;很多人不习惯 Fira Code 默认的 &lt;code&gt;&amp;amp;&lt;/code&gt; 符号，这可以通过配置来禁用它的变体，具体可以参看其 Github 的介绍，我的设置是：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;workbench.colorTheme&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;One Dark Pro&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;editor.fontFamily&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;#x27;Fira Code&amp;#x27;, Monaco, &amp;#x27;Courier New&amp;#x27;, monospace&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;editor.fontLigatures&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;#x27;ss01&amp;#x27;, &amp;#x27;ss02&amp;#x27; off, &amp;#x27;ss03&amp;#x27;, &amp;#x27;ss04&amp;#x27;, &amp;#x27;ss05&amp;#x27;, &amp;#x27;ss07&amp;#x27;, &amp;#x27;cv29&amp;#x27;, &amp;#x27;cv28&amp;#x27;, &amp;#x27;cv13&amp;#x27;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，行高是 1.4，字号是 13。&lt;/p&gt;
&lt;h2 id=&#34;编辑器&#34;&gt;编辑器&lt;/h2&gt;
&lt;p&gt;最主要的就是编辑器设置了，好的编辑器当然是为了提高编码效率，下面逐个说说。&lt;/p&gt;
&lt;h3 id=&#34;渲染空白字符&#34;&gt;渲染空白字符&lt;/h3&gt;
&lt;p caption=&#39;Editor: Render Whitespace&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/9175365e-0357-4b2f-abf7-cdf20062b2ca.webp&#39; alt=&#39;Editor: Render Whitespace&#39; title=&#39;Editor: Render Whitespace&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个我是使用默认的 selection，即只在划选的时候，如果内容有空白符（空格）才会显示出来，否则不显示，不然影响美观。 &lt;code&gt;boundary&lt;/code&gt; 的设置是总是显示，不好看：&lt;/p&gt;
&lt;p caption=&#39;选区渲染空白符号&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/12c4e471-e6fc-4b6d-aed7-61d4db16cd18.webp&#39; alt=&#39;选区渲染空白符号&#39; title=&#39;选区渲染空白符号&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动添加-删除配对括号&#34;&gt;自动添加/删除配对括号&lt;/h3&gt;
&lt;p caption=&#39;Auto Closing 设置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/49d09c46-5456-441a-9f72-fccc3a5d761e.webp&#39; alt=&#39;Auto Closing 设置&#39; title=&#39;Auto Closing 设置&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个几个设置使用场景是，如果你输入一个起始括号，如 &lt;code&gt;(&amp;#123;[&lt;/code&gt; 会自动在后面给你生成一个 &lt;code&gt;)&amp;#125;]&lt;/code&gt; ，删除的设置也是同理。默认是插入的时候配对，删除的时候也同步配对删除。&lt;/p&gt;
&lt;h3 id=&#34;括号着色（池）&#34;&gt;括号着色（池）&lt;/h3&gt;
&lt;p caption=&#39;Bracket Pair Colorization&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/899eeaba-8737-4f07-8e22-9480f915fcbc.webp&#39; alt=&#39;Bracket Pair Colorization&#39; title=&#39;Bracket Pair Colorization&#39;&gt;&lt;/p&gt;
&lt;p&gt;第一个打开后，你的各个括号就会有颜色（而不是白色）。第二个打开后，每种类型的括号，拥有自己独立的一套颜色配置（其实也会不同的括号颜色重复，但不再是按不同括号的显示顺序，而是同种括号的显示顺序来着色了——我的理解和测试）。&lt;/p&gt;
&lt;h3 id=&#34;矩形选区&#34;&gt;矩形选区&lt;/h3&gt;
&lt;p caption=&#39;Column Selection&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/c64604e0-b420-4845-86e2-bac8d40aaa3d.webp&#39; alt=&#39;Column Selection&#39; title=&#39;Column Selection&#39;&gt;&lt;/p&gt;
&lt;p&gt;默认情况从上往下选择，如果经过某行的行首和行尾，是选中整行的：&lt;/p&gt;
&lt;p caption=&#39;默认选中效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/d97e73d0-91ae-4e0a-befb-c708ceae1bc0.webp&#39; alt=&#39;默认选中效果&#39; title=&#39;默认选中效果&#39;&gt;&lt;/p&gt;
&lt;p&gt;如果这个开关打开后，就变成了鼠标划选是一个矩形选区（根据鼠标位置，而不是代码位置进行选择），常用场景是同时编辑多行类似缩进的内容，如 JSON 的键等：&lt;/p&gt;
&lt;p caption=&#39;列选择&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/99dcc5e1-65bd-4048-bf8a-b06443bc7745.webp&#39; alt=&#39;列选择&#39; title=&#39;列选择&#39;&gt;&lt;/p&gt;
&lt;p caption=&#39;列选择的一个应用场景&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/85a0ac88-34a6-4843-adfd-ea95f01c1806.gif&#39; alt=&#39;列选择的一个应用场景&#39; title=&#39;列选择的一个应用场景&#39;&gt;&lt;/p&gt;
&lt;p&gt;多说一句，在终端中选中的时候按下 Opt 键，也是这个效果。&lt;/p&gt;
&lt;h3 id=&#34;复制内容的时候带语法高亮&#34;&gt;复制内容的时候带语法高亮&lt;/h3&gt;
&lt;p caption=&#39;Copy With Syntax Highlighting&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/2e507e99-524a-41c0-978c-42cb1bcbebca.webp&#39; alt=&#39;Copy With Syntax Highlighting&#39; title=&#39;Copy With Syntax Highlighting&#39;&gt;&lt;/p&gt;
&lt;p&gt;有些富文本编辑器，没有特殊处理，因此在直接复制 VSCode 中的代码到富文本编辑器的时候，会将颜色也带上，这通常不是预期。此设置可以让你复制出来的内容不带颜色。&lt;/p&gt;
&lt;h3 id=&#34;拖拽&#34;&gt;拖拽&lt;/h3&gt;
&lt;p caption=&#39;Drag And Drop&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/319dae0d-0369-4469-abd9-ed2e0c36649c.webp&#39; alt=&#39;Drag And Drop&#39; title=&#39;Drag And Drop&#39;&gt;&lt;/p&gt;
&lt;p&gt;我写码这么多年，几乎没有使用「拖拽」来实现移动代码块的操作，因此建议取消。第二个按住 shift 后拖拽文件到 VSCode，如果是媒体文件则松手后只会显示文件名，如果不按住 shift 则会打开媒体文件，多一个功能挺好的，以备不时之需（这个默认是打开的）。&lt;/p&gt;
&lt;h3 id=&#34;空选区复制当前行&#34;&gt;空选区复制当前行&lt;/h3&gt;
&lt;p caption=&#39;Empty Selection Clipboard&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/32f95652-6320-4347-8c9e-b7f03dbecd79.webp&#39; alt=&#39;Empty Selection Clipboard&#39; title=&#39;Empty Selection Clipboard&#39;&gt;&lt;/p&gt;
&lt;p&gt;如果选区只是光标，没有选中任何内容，此时进行复制操作会选中当前行。复制当前行更简单了（默认开启）。&lt;/p&gt;
&lt;h3 id=&#34;自动折叠&#34;&gt;自动折叠&lt;/h3&gt;
&lt;p caption=&#39;Folding&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/96927f79-74ed-4949-b3e0-7cff488269ed.webp&#39; alt=&#39;Folding&#39; title=&#39;Folding&#39;&gt;&lt;/p&gt;
&lt;p&gt;代码折叠肯定是需要的。突出显示折叠范围也是需要的（会跟鼠标在那一行一行的效果，当前行高亮），不然不知道当前行是否折叠了。最后一个是自动折叠 import 部分，我觉得没必要。&lt;/p&gt;
&lt;p&gt;折叠我个人喜欢始终显示，因为这个功能太常用了，我经常需要先 hover 到位置，看哪行是被折叠了，然后再点打开折叠，效率太低。我喜欢一眼看到哪些地方被折叠的，所以需要设置成 always：&lt;/p&gt;
&lt;p caption=&#39;Show Folding Controls&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/0a382e11-522d-490a-a086-703b291ef90e.webp&#39; alt=&#39;Show Folding Controls&#39; title=&#39;Show Folding Controls&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;括号-缩进参考线&#34;&gt;括号/缩进参考线&lt;/h3&gt;
&lt;p caption=&#39;（缩进/括号）参考线&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/b537a5b7-b989-4346-837b-919a4705599c.webp&#39; alt=&#39;（缩进/括号）参考线&#39; title=&#39;（缩进/括号）参考线&#39;&gt;&lt;/p&gt;
&lt;p&gt;如下图，不过我没测试出什么是「缩进参考线」，先打开吧。&lt;/p&gt;
&lt;p caption=&#39;图中高亮的括号&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/f8b0495e-2bd6-4dd5-9eb1-36a33821f1e8.webp&#39; alt=&#39;图中高亮的括号&#39; title=&#39;图中高亮的括号&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;hover-时浮窗出现的位置&#34;&gt;hover 时浮窗出现的位置&lt;/h3&gt;
&lt;p caption=&#39;Hover 位置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/da26e746-9e8b-4a3a-9b24-2a38abae431d.webp&#39; alt=&#39;Hover 位置&#39; title=&#39;Hover 位置&#39;&gt;&lt;/p&gt;
&lt;p&gt;一般情况我们看代码是从上往下看的，这个设置 hover 代码后浮窗出现在上方，挡住了内容，还得移动一下鼠标让浮窗消失再出现，建议取消。&lt;/p&gt;
&lt;p caption=&#39;始终显示提示在下方更合适&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/6df3c907-16b9-4cba-b7f3-daa4a5fd4532.webp&#39; alt=&#39;始终显示提示在下方更合适&#39; title=&#39;始终显示提示在下方更合适&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;悬浮出提示&#34;&gt;悬浮出提示&lt;/h3&gt;
&lt;p caption=&#39;消失延迟其实不需要&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/6b18c5da-1193-4e89-b49f-b7775dcdb192.webp&#39; alt=&#39;消失延迟其实不需要&#39; title=&#39;消失延迟其实不需要&#39;&gt;&lt;/p&gt;
&lt;p&gt;鼠标移出一般就是不想让它显示，直接设置为 0。&lt;/p&gt;
&lt;h3 id=&#34;鼠标缩放字体&#34;&gt;鼠标缩放字体&lt;/h3&gt;
&lt;p caption=&#39;完全没用的功能…&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/2e05860a-01cb-45ff-9d3b-230d8871ebd6.webp&#39; alt=&#39;完全没用的功能…&#39; title=&#39;完全没用的功能…&#39;&gt;&lt;/p&gt;
&lt;p&gt;经常误触，关了。&lt;/p&gt;
&lt;h3 id=&#34;编辑器区域顶部-padding&#34;&gt;编辑器区域顶部 padding&lt;/h3&gt;
&lt;p caption=&#39;统一视觉间隔&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/07183c4a-3dcc-412d-a7bb-f5167443874d.webp&#39; alt=&#39;统一视觉间隔&#39; title=&#39;统一视觉间隔&#39;&gt;&lt;/p&gt;
&lt;p&gt;我设置为 2。底部 padding 就没必要了。&lt;/p&gt;
&lt;p caption=&#39;优雅，永不过时&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/9f1cd71d-f579-44c6-8b23-58f558dfeeaf.webp&#39; alt=&#39;优雅，永不过时&#39; title=&#39;优雅，永不过时&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;滚动条&#34;&gt;滚动条&lt;/h3&gt;
&lt;p&gt;水平滚动条为 6 宽度，竖直为 25（默认水平 12，竖直 14）：&lt;/p&gt;
&lt;p caption=&#39;Scrollbar&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/2b7e8382-836f-4fe4-a7b5-c88e24332838.webp&#39; alt=&#39;Scrollbar&#39; title=&#39;Scrollbar&#39;&gt;&lt;/p&gt;
&lt;p&gt;我个人是不喜欢滚动到范围外，会导致明明一屏显示完全的内容，出现滚动条，所以最后一个 Scroll Beyond Last Line 关了。&lt;/p&gt;
&lt;p caption=&#39;滚动条显示信息&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/361fa784-0d98-4055-a56e-58678f0c3a31.webp&#39; alt=&#39;滚动条显示信息&#39; title=&#39;滚动条显示信息&#39;&gt;&lt;/p&gt;
&lt;p&gt;这里要说下为什么竖直滚动条调大为 20，因为在那个区域其实不只是滚动条，还含有三个信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;滚动条右侧亮黄色的是编辑器警告信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;滚动条中间暗黄色块是匹配的搜索项（含全局搜索和当前编辑器搜索）。其中，暗黄色块也可能是灰色（表示光标选中的部分和类似内容），也可能是淡粉色，表示光标选中的的内容的声明处。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;占滚动条整行的蓝色线是光标所在的行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;滚动条左侧的绿色部分是代码变动的部分。其中，也可能是淡黄色，表示修改部分（如果启用了 git 的话）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到这部分的信息显示很丰富，所以调宽一点。&lt;/p&gt;
&lt;h3 id=&#34;平滑滚动&#34;&gt;平滑滚动&lt;/h3&gt;
&lt;p caption=&#39;动画，优雅&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/190452c5-f985-47b4-b238-000edce28c4b.webp&#39; alt=&#39;动画，优雅&#39; title=&#39;动画，优雅&#39;&gt;&lt;/p&gt;
&lt;p&gt;强烈建议开启，这样在滚动的时候就可以知道你大概滚动了多少行，而不是突然跳过去，「不知道滚动到哪里去了」。&lt;/p&gt;
&lt;h3 id=&#34;滚动吸顶&#34;&gt;滚动吸顶&lt;/h3&gt;
&lt;p caption=&#39;吸顶，好用&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/37741a88-7ba7-481a-9fe5-06ed276af9d3.webp&#39; alt=&#39;吸顶，好用&#39; title=&#39;吸顶，好用&#39;&gt;&lt;/p&gt;
&lt;p&gt;滚动的时候可能需要查看超出当前屏幕的作用域，打开该选项即可。另外，水平滚动的时候会把该 sticky 的函数滚走，我倾向于不滚动它，所以把最后一个选项取消。&lt;/p&gt;
&lt;p caption=&#39;左右滚动不跟随&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/b7b7e17c-ac89-4d69-b1c2-648f0e582a40.webp&#39; alt=&#39;左右滚动不跟随&#39; title=&#39;左右滚动不跟随&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;光标&#34;&gt;光标&lt;/h3&gt;
&lt;p caption=&#39;Cursor Blinking&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/5736c4cc-e07c-40f1-ae31-e1c16e458a00.webp&#39; alt=&#39;Cursor Blinking&#39; title=&#39;Cursor Blinking&#39;&gt;&lt;/p&gt;
&lt;p&gt;第一个是光标闪烁的淡入淡出，第二个是你在点击不同位置的时候，光标是从上一个位置动画移动到点击位置的，可以让你知道本次点击光标位置相对上一个编辑位置是哪里，信息更丰富了。&lt;/p&gt;
&lt;h3 id=&#34;查找&#34;&gt;查找&lt;/h3&gt;
&lt;p caption=&#39;编辑器右上角查找小部件&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/eb174538-47bb-44b8-ba84-54df4a37555e.webp&#39; alt=&#39;编辑器右上角查找小部件&#39; title=&#39;编辑器右上角查找小部件&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个建议关掉，搜索的时候，如果不关，会在文件顶部凭空产生一些距离导关闭搜索框的时候编辑器跳动一下，难受。&lt;/p&gt;
&lt;p caption=&#39;空白，不优雅&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/83dcf800-6ec9-4a8a-8b49-2e69e419bd72.webp&#39; alt=&#39;空白，不优雅&#39; title=&#39;空白，不优雅&#39;&gt;&lt;/p&gt;
&lt;p&gt;不过该选项打开后可能会遮挡住编辑器内容，自己取舍（一般顶部都是 import 后的换行内容，挡住也无所谓）。&lt;/p&gt;
&lt;p caption=&#39;没空白，优雅&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/6878a013-d547-4ccb-9792-32e03a97e9d4.webp&#39; alt=&#39;没空白，优雅&#39; title=&#39;没空白，优雅&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动带入搜索小组件&#34;&gt;自动带入搜索小组件&lt;/h3&gt;
&lt;p caption=&#39;自动带入，优雅&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/f671a305-d7c8-4ae0-b91c-5aa094bbd3a6.webp&#39; alt=&#39;自动带入，优雅&#39; title=&#39;自动带入，优雅&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个建议关掉。我经常会使用搜索，然后搜索后选中某个内容后再搜索（非选中内容），此时编辑器自作聪明的把我选中的内容给带到搜索框中，导致我之前搜索的内容没了，很烦。&lt;/p&gt;
&lt;h3 id=&#34;缩略图&#34;&gt;缩略图&lt;/h3&gt;
&lt;p caption=&#39;右侧小地图&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/b8986040-1b86-4bbd-a99b-1b7d551c8b28.webp&#39; alt=&#39;右侧小地图&#39; title=&#39;右侧小地图&#39;&gt;&lt;/p&gt;
&lt;p&gt;编辑器右侧的缩略图我始终显示出来，它的作用一般是让我知道我当前处于编辑的哪个位置，以及相对于某个函数、组件，我所处的位置，因此我需要缩略图不滚动，同时仅渲染色块即可，不用将每行都渲染出来。&lt;/p&gt;
&lt;h3 id=&#34;建议&#34;&gt;建议&lt;/h3&gt;
&lt;p caption=&#39;建议预览&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/1cbc255e-2784-461d-a723-ce5f325130a2.webp&#39; alt=&#39;建议预览&#39; title=&#39;建议预览&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个开关建议关闭（默认），因为可能跟 copilot 建议弄混淆，如图是 copilot 的建议：&lt;/p&gt;
&lt;p caption=&#39;copilot 建议&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/89587ee7-0329-43e7-9a68-814e55bd8e07.webp&#39; alt=&#39;copilot 建议&#39; title=&#39;copilot 建议&#39;&gt;&lt;/p&gt;
&lt;p&gt;而这个是预览的建议：&lt;/p&gt;
&lt;p caption=&#39;整个一没必要咱就是说&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/26edace2-f059-4f51-a873-47a743946229.webp&#39; alt=&#39;整个一没必要咱就是说&#39; title=&#39;整个一没必要咱就是说&#39;&gt;&lt;/p&gt;
&lt;p caption=&#39;最近建议&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/203628d4-4e0c-4f9a-8289-31ab679750dc.webp&#39; alt=&#39;最近建议&#39; title=&#39;最近建议&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个选项默认是 first，即始终使用默认选择第一个建议，但是我经常遇到的问题是，在 CSS 中，我输入 &lt;code&gt;wid&lt;/code&gt; 当然预期是 &lt;code&gt;width&lt;/code&gt;，但是它会给我建议是 &lt;code&gt;widow&lt;/code&gt; 我当然不用这个属性，但每次都是排在第一个，我就每次需要通过箭头来切换，所以此处建议修改成「最近使用」，类似与输入法的「动态调频」:&lt;/p&gt;
&lt;p caption=&#39;css 最近建议&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/a1edc147-031b-4347-be78-8c6ec3c71bd7.webp&#39; alt=&#39;css 最近建议&#39; title=&#39;css 最近建议&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;工作台&#34;&gt;工作台&lt;/h2&gt;
&lt;h3 id=&#34;命令提示框&#34;&gt;命令提示框&lt;/h3&gt;
&lt;p caption=&#39;命令建议&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/a62c1989-314d-4675-abbb-cb9f09534480.webp&#39; alt=&#39;命令建议&#39; title=&#39;命令建议&#39;&gt;&lt;/p&gt;
&lt;p&gt;有时候会经常反复输入一个命令，所以打开这个历史命令列表很有用。除此之外，保留输入内容也很有用，比如以 toggle 开头的命令（如 Toggle Screen Capture Mode）。&lt;/p&gt;
&lt;p&gt;注意，如果输入内容后按了 esc 导致输入框消失，下次再次唤起不会保留输入内容，只有选择了一个命令执行后，再次唤起，才会保留上次输入的内容。&lt;/p&gt;
&lt;h3 id=&#34;目录树&#34;&gt;目录树&lt;/h3&gt;
&lt;p caption=&#39;目录树滚动&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/ff187f9a-5588-40fb-927d-89e701495d94.webp&#39; alt=&#39;目录树滚动&#39; title=&#39;目录树滚动&#39;&gt;&lt;/p&gt;
&lt;p&gt;一般动画我都会打开因为「优雅永不过时」。这个设置也影响「设置」界面的滚动（之前对编辑器设置平滑滚动不会影响「设置」界面和目录树界面的滚动效果 ）。&lt;/p&gt;
&lt;h3 id=&#34;快速打开记录历史&#34;&gt;快速打开记录历史&lt;/h3&gt;
&lt;p caption=&#39;快速打开带入上次记录&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/b4633d53-e671-437c-a4e9-241fe722c953.webp&#39; alt=&#39;快速打开带入上次记录&#39; title=&#39;快速打开带入上次记录&#39;&gt;&lt;/p&gt;
&lt;p&gt;按下 cmd + p 会出现 quick open 输入框，记住历史挺好的。另外还有个选项是失焦是否自动消失，大部分场景下需要自动消失，偶尔不需要，先保持默认自动消失了。&lt;/p&gt;
&lt;h3 id=&#34;工作台减少动画效果&#34;&gt;工作台减少动画效果&lt;/h3&gt;
&lt;p caption=&#39;绝不减少动画&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/24d1bc51-76bf-415b-9c79-561bc6eb7caf.webp&#39; alt=&#39;绝不减少动画&#39; title=&#39;绝不减少动画&#39;&gt;&lt;/p&gt;
&lt;p&gt;我的 64G 内存 M1 Max，不需要减少动画（默认是 auto，根据系统配置自动适应，适用于多台电脑间配置同步的问题）。&lt;/p&gt;
&lt;h3 id=&#34;字体平滑&#34;&gt;字体平滑&lt;/h3&gt;
&lt;p caption=&#39;字体平滑&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/093ce91b-5349-48a0-b563-2a44726f3bf2.webp&#39; alt=&#39;字体平滑&#39; title=&#39;字体平滑&#39;&gt;&lt;/p&gt;
&lt;p&gt;类似于 css 中的 &lt;code&gt;-webkit-font-smoothing: antialiased;&lt;/code&gt; ，default 用于在大多数非 retina 屏上显示最清晰的字体（次像素级），antialiased 是像素级平滑，可能会导致字体更细，见图：&lt;/p&gt;
&lt;p caption=&#39;default 设置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/81378425-4fd6-4954-8d27-5317c822b237.webp&#39; alt=&#39;default 设置&#39; title=&#39;default 设置&#39;&gt;&lt;/p&gt;
&lt;p caption=&#39;antialiased 设置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/e24ea63a-7536-48bd-8dec-302b335224a9.webp&#39; alt=&#39;antialiased 设置&#39; title=&#39;antialiased 设置&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个设置虽然是在「工作台」块，但是也影响编辑器区域。可以看到开启了 antialiased 的时候，无论是编辑器区域还是工作台区域，字体都更暗（对比度更弱）、更细了。我喜欢后者，所以开启了。&lt;/p&gt;
&lt;p&gt;注意，这个「次像素级」，并不是说比像素还小的级别，而是指「还没到像素」的级别，意思是更低级，而不是更高级。&lt;/p&gt;
&lt;h3 id=&#34;目录树-sticky&#34;&gt;目录树 sticky&lt;/h3&gt;
&lt;p caption=&#39;目录树滚动吸顶&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/ed8074f7-0e31-4a1f-80f8-1618d2264e73.webp&#39; alt=&#39;目录树滚动吸顶&#39; title=&#39;目录树滚动吸顶&#39;&gt;&lt;/p&gt;
&lt;p&gt;非常好用，滚动的时候可以知道当前的滚动路径，唯一美中不足的是如果能加个 box-shadow 阴影就好了，不然不太好区分的：&lt;/p&gt;
&lt;p caption=&#39;目录树吸顶效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/5a7c2102-2730-47a0-b225-738a42d86342.webp&#39; alt=&#39;目录树吸顶效果&#39; title=&#39;目录树吸顶效果&#39;&gt;&lt;/p&gt;
&lt;p&gt;sticky 的最大级数也可以修改，默认是 7，足够了（编辑器 sticky 默认是 5 级）。&lt;/p&gt;
&lt;p&gt;注意，此设置也同样适用于「设置」界面（原来设置界面属于工作台，而不是编辑器）：&lt;/p&gt;
&lt;p caption=&#39;设置项界面也归它管&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/031c3170-cd43-4775-8401-a95e6c474a75.webp&#39; alt=&#39;设置项界面也归它管&#39; title=&#39;设置项界面也归它管&#39;&gt;&lt;/p&gt;
&lt;p&gt;目录树的缩进我改成 14 了，参考线我喜欢始终显示，不然同级文件太多，不好找：&lt;/p&gt;
&lt;p caption=&#39;目录树缩进&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/7a67020e-c5a4-4114-9ac0-ff3afcb5cb61.webp&#39; alt=&#39;目录树缩进&#39; title=&#39;目录树缩进&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;目录导航&#34;&gt;目录导航&lt;/h3&gt;
&lt;p caption=&#39;目录导航显示 icon&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/eae4d00a-68d6-4c64-bab8-34df8fc7f458.webp&#39; alt=&#39;目录导航显示 icon&#39; title=&#39;目录导航显示 icon&#39;&gt;&lt;/p&gt;
&lt;p&gt;目录导航还是需要的，但是不需要文件/文件夹 icon，这样可以显著的和文件内的数组、类进行区分，非常好用：&lt;/p&gt;
&lt;p caption=&#39;面包屑显示效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/57e4fefd-4c76-42cd-b79c-d3d49eb2d1df.webp&#39; alt=&#39;面包屑显示效果&#39; title=&#39;面包屑显示效果&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;修改过的-tab&#34;&gt;修改过的 tab&lt;/h3&gt;
&lt;p&gt;与此相关的有多个，如在修改后未保存的文件上方显示高亮线：&lt;/p&gt;
&lt;p caption=&#39;高亮修改的 tab&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/e4a60c98-ec6f-452d-84ea-e0835ed963bf.webp&#39; alt=&#39;高亮修改的 tab&#39; title=&#39;高亮修改的 tab&#39;&gt;&lt;/p&gt;
&lt;p&gt;默认显示的是点，此选项打开后，会点和线同时显示，重启编辑器会只显示上方蓝色线（可能是 bug，其实应该不用重启编辑器也能生效）。&lt;/p&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p caption=&#39;修改过的 tab 效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/aea54cb4-158e-4662-a6b5-285fc56fd836.webp&#39; alt=&#39;修改过的 tab 效果&#39; title=&#39;修改过的 tab 效果&#39;&gt;&lt;/p&gt;
&lt;p&gt;因为「点」也占用一部分的 tab 空间，会导致无法显示更多 tab 内容信息，所以建议打开该选项。&lt;/p&gt;
&lt;h3 id=&#34;鼠标导航&#34;&gt;鼠标导航&lt;/h3&gt;
&lt;p caption=&#39;鼠标前进后退&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/254a8290-8b0a-4ebc-ac36-d453a855719d.webp&#39; alt=&#39;鼠标前进后退&#39; title=&#39;鼠标前进后退&#39;&gt;&lt;/p&gt;
&lt;p&gt;这是个默认选项，但是我也说一下，对于有左侧按键（右手），也即 4、5 按键的鼠标而言，的鼠标直接就可以用来导航，非常好用。&lt;/p&gt;
&lt;h3 id=&#34;tab-固定&#34;&gt;tab 固定&lt;/h3&gt;
&lt;p caption=&#39;允许 tab 固定，好用&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/b8c68b52-f2ec-4fb4-ac39-1fd1af2c9ebd.webp&#39; alt=&#39;允许 tab 固定，好用&#39; title=&#39;允许 tab 固定，好用&#39;&gt;&lt;/p&gt;
&lt;p&gt;固定后的 tab 默认出现在编辑器组的左侧，但是如果将其单独排成一行会更直观，与非固定的 tab 区分开，效果如下：&lt;/p&gt;
&lt;p caption=&#39;tab 固定效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/b6868fe5-65b6-4c6b-bd81-3bd15fada494.webp&#39; alt=&#39;tab 固定效果&#39; title=&#39;tab 固定效果&#39;&gt;&lt;/p&gt;
&lt;p&gt;注意，默认情况下，固定的 tab 是无法通过鼠标中键或者 cmd + w 关闭的（按下会打开非固定 tab 而不是关闭固定 tab），此行为可以修改：&lt;/p&gt;
&lt;p caption=&#39;cmd + w 效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/0259919c-dd23-44f5-89e6-026c2140a424.webp&#39; alt=&#39;cmd + w 效果&#39; title=&#39;cmd + w 效果&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;tab-关闭按钮&#34;&gt;tab 关闭按钮&lt;/h3&gt;
&lt;p caption=&#39;隐藏关闭按钮&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/c1e66c49-5cab-4d42-9c04-713a6530bb50.webp&#39; alt=&#39;隐藏关闭按钮&#39; title=&#39;隐藏关闭按钮&#39;&gt;&lt;/p&gt;
&lt;p&gt;一直使用左手 cmd + w 关闭 tab，所以此选项可以取消。另外，我其实更习惯双击 tab 关闭，但是官方回复不会做，见：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/vscode/issues/52628#issuecomment-420887497&#34; target=&#34;_blank&#34;&gt; Allow to double click on a tab to close it · Issue #52628 · microsoft/vscode&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;tab-wrap&#34;&gt;tab wrap&lt;/h3&gt;
&lt;p caption=&#39;tab wrap&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/b72dfdff-c447-457d-89de-8ca3a682281d.webp&#39; alt=&#39;tab wrap&#39; title=&#39;tab wrap&#39;&gt;&lt;/p&gt;
&lt;p&gt;如果打开 tab 较多，滚动 tab 的时候就会比较费劲，无法掌控全局，所以我喜欢 wrap tab，效果如下：&lt;/p&gt;
&lt;p caption=&#39;wrap 效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/3738c007-8e6d-4397-a3fb-0a5210402ed2.webp&#39; alt=&#39;wrap 效果&#39; title=&#39;wrap 效果&#39;&gt;&lt;/p&gt;
&lt;p&gt;比较尴尬的一点是，wrap 效果产生的多行 tab，可能跟上面提到的「修改 tab 上方蓝色高亮」搞的比较混乱（蓝色的线不知道是上面 tab 的还是下面 tab 的，得反应一下不直观）。是在 tab 显示更多内容，还是更直观，自己取舍：&lt;/p&gt;
&lt;p caption=&#39;高亮修改 + tab 高亮效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/bba12f32-b355-4550-aba5-c59950ed66fc.webp&#39; alt=&#39;高亮修改 + tab 高亮效果&#39; title=&#39;高亮修改 + tab 高亮效果&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;tab-高度&#34;&gt;tab 高度&lt;/h3&gt;
&lt;p caption=&#39;紧凑 tab 布局&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/3224c016-4adb-41d2-82f8-83391960259d.webp&#39; alt=&#39;紧凑 tab 布局&#39; title=&#39;紧凑 tab 布局&#39;&gt;&lt;/p&gt;
&lt;p&gt;紧凑布局有利于掌控全局+不占地方。&lt;/p&gt;
&lt;h3 id=&#34;双击-tab-关闭（？）&#34;&gt;&lt;s&gt;双击 tab 关闭（？）&lt;/s&gt;&lt;/h3&gt;
&lt;p caption=&#39;没懂这个设置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/3385a990-b192-4aec-963a-ee5996faf19d.webp&#39; alt=&#39;没懂这个设置&#39; title=&#39;没懂这个设置&#39;&gt;&lt;/p&gt;
&lt;p&gt;看字面意思这个选项是官方号称不会做的「双击 tab 关闭」（如上面所言），但即使我关闭了可能会冲突的「双击 tab 自动扩展编辑器组」，该设置依然不生效，不知是不是我理解有误还是 bug。&lt;/p&gt;
&lt;h3 id=&#34;原生-tab&#34;&gt;原生 tab&lt;/h3&gt;
&lt;p&gt;与此相关的有两个：&lt;/p&gt;
&lt;p caption=&#39;原生 tab&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/09ad718f-b4c3-40a3-8c92-8e399613540a.webp&#39; alt=&#39;原生 tab&#39; title=&#39;原生 tab&#39;&gt;&lt;/p&gt;
&lt;p&gt;第一个设置，启用后，可以将多个项目窗口，合并到一个窗口。「窗口」选项中会出现「合并所有窗口」的选项，这样可以在一个窗口中来回切换多个项目，非常好用：&lt;/p&gt;
&lt;p caption=&#39;合并所有窗口&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/8d13f532-cc6a-49a6-9d2c-88aabf5904e3.webp&#39; alt=&#39;合并所有窗口&#39; title=&#39;合并所有窗口&#39;&gt;&lt;/p&gt;
&lt;p&gt;但是，这样的话就无法使用自定义的标题（其实我觉得也么啥用），自定义标题是这样的：&lt;/p&gt;
&lt;p caption=&#39;自定义标题栏效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/1d16fa15-9ee4-4647-8458-1103a659a165.webp&#39; alt=&#39;自定义标题栏效果&#39; title=&#39;自定义标题栏效果&#39;&gt;&lt;/p&gt;
&lt;p&gt;第一个设置如果打开了，那第二个就无效了，无论设置为 native 和 custom。如果第一个设置不打开，第二个设置设置为 native，那就没有「合并所有窗口」，也没有「自定义标题栏」（不知道这个设置意义何在）。&lt;/p&gt;
&lt;h3 id=&#34;目录树拖放&#34;&gt;目录树拖放&lt;/h3&gt;
&lt;p caption=&#39;最好禁用拖拽文件&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/f4f866b8-c0be-456f-8336-2a229c532f61.webp&#39; alt=&#39;最好禁用拖拽文件&#39; title=&#39;最好禁用拖拽文件&#39;&gt;&lt;/p&gt;
&lt;p&gt;我经常误触，然后导致上百个修改…所以关了。&lt;/p&gt;
&lt;h3 id=&#34;搜索结果自动折叠&#34;&gt;搜索结果自动折叠&lt;/h3&gt;
&lt;p caption=&#39;少于 10 个的文件夹展开&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/5aab9aef-806d-42a0-ab7c-7d58ae4b4849.webp&#39; alt=&#39;少于 10 个的文件夹展开&#39; title=&#39;少于 10 个的文件夹展开&#39;&gt;&lt;/p&gt;
&lt;p&gt;默认总是展开，但是如果搜索结果过多（通常是因为你还没有输入完成），此时展开是没有必要的，而且会耽误你掌控全局。&lt;/p&gt;
&lt;p&gt;另外，如果你没有在搜索栏中加入「排除的文件」，那么也可能出现海量搜索结果，如 NextJS 项目的 .next 目录等，因此此设置也是必要的。&lt;/p&gt;
&lt;p&gt;需要注意的是，这个「展开」、「折叠」的 10 个文件限制，指的是搜索结果中，出现在某个文件夹下的文件数量，而不是整个搜索结果的文件夹数量：&lt;/p&gt;
&lt;p caption=&#39;多余 10 个的文件夹折叠&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/67c50309-319c-474a-addf-bbd33925d827.webp&#39; alt=&#39;多余 10 个的文件夹折叠&#39; title=&#39;多余 10 个的文件夹折叠&#39;&gt;&lt;/p&gt;
&lt;p&gt;因此，如果某个文件夹下，出现符合搜索结果的文件过多（文件夹被折叠），通常你就需要检查是否需要提供更多搜索信息了。&lt;/p&gt;
&lt;h3 id=&#34;搜索框自动填入选择内容&#34;&gt;搜索框自动填入选择内容&lt;/h3&gt;
&lt;p caption=&#39;全局搜索自动带入选择内容&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/42995472-6453-4e61-881e-d7e0ae5da443.webp&#39; alt=&#39;全局搜索自动带入选择内容&#39; title=&#39;全局搜索自动带入选择内容&#39;&gt;&lt;/p&gt;
&lt;p&gt;通常你选中一个内容后想搜索它，因此「Seed On Focus」此选项让你可以节省一个 cmd + v 的操作。&lt;/p&gt;
&lt;p&gt;注意，这有区别于「搜索小组件」中的 选中后聚焦到搜索时自动带入。因为在编辑器中你去选中内容，然后聚焦到搜索小组件，不一定是为了搜索，还可能只是为了简单在当前编辑器高亮选中的相同内容以便于查看，但是此时选中后聚焦到搜索小组件，就自动替换成选中内容了，很多时候不符合预期。&lt;/p&gt;
&lt;p&gt;而如果你在选中内容后，聚焦到搜索视图（右侧），那大概率是为了搜索内容。&lt;/p&gt;
&lt;p&gt;另外搜索结果我会想知道它所处的行号，以确定它在其文档中的位置，所以显示行号也是很有必要的。&lt;/p&gt;
&lt;p&gt;最后的 Smart Case 算是一个小技巧，如果都用小写，就表示自己记不太清搜索名字了，如果很确定搜索内容（如驼峰的函数名）的某个字母是大写，那么就区分大小写进行搜索，非常好用。&lt;/p&gt;
&lt;p&gt;除此之外，如果能记住上次输入的内容，其实记住也是选中状态，如果不符合自己的输入预期，直接输入内容即可，对自己即将想要搜索的内容没有影响，而如果之前搜索的内容还有用，那岂不是更好？↓&lt;/p&gt;
&lt;p caption=&#39;注意与搜索小组件的差别&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/b84b5d58-94cb-448f-bd1a-cc129aac13bd.webp&#39; alt=&#39;注意与搜索小组件的差别&#39; title=&#39;注意与搜索小组件的差别&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;搜索忽略全局的-ignore&#34;&gt;搜索忽略全局的 ignore&lt;/h3&gt;
&lt;p caption=&#39;全局忽略设置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/21a936ed-29c9-4613-b6d4-5ad910fc04f0.webp&#39; alt=&#39;全局忽略设置&#39; title=&#39;全局忽略设置&#39;&gt;&lt;/p&gt;
&lt;p&gt;git 有个全局默认的 ignore，打开该选项可以在搜索的时候将其中列出的文件、文件夹忽略掉，通常是有必要的。&lt;/p&gt;
&lt;p&gt;另外还有个在父级目录中启用 ignore，没明白什么意思，可能是多级 git 管理吧，我也勾选上了，既然都 ignore 了嘛：&lt;/p&gt;
&lt;p caption=&#39;统统勾上&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/fa5ad841-87ee-460f-ad01-d1c7a34f2553.webp&#39; alt=&#39;统统勾上&#39; title=&#39;统统勾上&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;调试和测试&#34;&gt;调试和测试&lt;/h3&gt;
&lt;p&gt;恕本人技术水平有限，VSCode 的调试和测试功能用的较少，只用来调试过诸如 NextJS 这类的 NodeJS 应用，使用起来跟 Chrome 差不多。因为用的少，所以没发现有什么痛点，所以没有什么配置可以优化的，这里就不说了。&lt;/p&gt;
&lt;h3 id=&#34;文件修改效果&#34;&gt;文件修改效果&lt;/h3&gt;
&lt;p caption=&#39;实线比「装订线」好看&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/ef52ba2e-5ff7-4f8f-963d-32da4f899fe6.webp&#39; alt=&#39;实线比「装订线」好看&#39; title=&#39;实线比「装订线」好看&#39;&gt;&lt;/p&gt;
&lt;p&gt;在显示行号那一列，可以设置是实线还是「装订线」来显示差异，如：&lt;/p&gt;
&lt;p caption=&#39;实在不知道装订线存在的意义&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/4c009676-4e9a-4c90-8eab-5ceffae9593d.webp&#39; alt=&#39;实在不知道装订线存在的意义&#39; title=&#39;实在不知道装订线存在的意义&#39;&gt;&lt;/p&gt;
&lt;p&gt;我更喜欢实线，所以这两个选项都取消了。&lt;/p&gt;
&lt;h3 id=&#34;取消-git-提交按钮&#34;&gt;取消 git 提交按钮&lt;/h3&gt;
&lt;p caption=&#39;移除多余的 UI 按钮&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/6343ab7e-7fc4-4cdc-8b0d-b65eae20b0b7.webp&#39; alt=&#39;移除多余的 UI 按钮&#39; title=&#39;移除多余的 UI 按钮&#39;&gt;&lt;/p&gt;
&lt;p&gt;说实话，左侧的这个提交按钮我从来没用过，都是使用命令行操作的 git，所以这个选项我取消了。&lt;/p&gt;
&lt;p&gt;同理，这个按钮（看起来是 github copilot 的按钮，自动生成提交注释），我也取消了，尤其是对于公司项目，强制要求输入内容带上需求/bug 卡片编号的时候，这个智能写提效信息就更没用了：&lt;/p&gt;
&lt;p caption=&#39;移除自动写提交信息&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/111f48be-42e0-4f6a-b490-7dc832b15045.webp&#39; alt=&#39;移除自动写提交信息&#39; title=&#39;移除自动写提交信息&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;扩展&#34;&gt;扩展&lt;/h2&gt;
&lt;h3 id=&#34;取消通知&#34;&gt;取消通知&lt;/h3&gt;
&lt;p caption=&#39;取消全部扩展通知&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/caa23ff0-089b-4035-90e1-c914e44c61ac.webp&#39; alt=&#39;取消全部扩展通知&#39; title=&#39;取消全部扩展通知&#39;&gt;&lt;/p&gt;
&lt;p&gt;我不需要任何扩展告诉我应该怎么做，如果有需要，我会主动找它。&lt;/p&gt;
&lt;h2 id=&#34;终端&#34;&gt;终端&lt;/h2&gt;
&lt;h3 id=&#34;右键行为&#34;&gt;右键行为&lt;/h3&gt;
&lt;p caption=&#39;终端邮件默认居然是选中+菜单&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/8c75e65f-ae00-49f1-982f-82c682b4a2f9.webp&#39; alt=&#39;终端邮件默认居然是选中+菜单&#39; title=&#39;终端邮件默认居然是选中+菜单&#39;&gt;&lt;/p&gt;
&lt;p&gt;一般是鼠标左键选中后，右键出上下文操作。但 VSCode 默认行为居然是选中内容（单词）后出右键，可以，但没必要。&lt;/p&gt;
&lt;h3 id=&#34;终端最大行数&#34;&gt;终端最大行数&lt;/h3&gt;
&lt;p caption=&#39;最大记录行&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/67d6cb52-ce20-40d2-ab50-548b7a4aab41.webp&#39; alt=&#39;最大记录行&#39; title=&#39;最大记录行&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个其实改不改都行，我偶然情况下需要看很久之前的 log 信息，加上我的 64G 内存，调大点无所谓。&lt;/p&gt;
&lt;h3 id=&#34;终端滚动动画&#34;&gt;终端滚动动画&lt;/h3&gt;
&lt;p caption=&#39;奇怪的动画，关了&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/7bd7b784-c3e5-456a-9aea-f0374dfa62b0.webp&#39; alt=&#39;奇怪的动画，关了&#39; title=&#39;奇怪的动画，关了&#39;&gt;&lt;/p&gt;
&lt;p&gt;虽然我喜欢动画（优雅），但是很奇怪，在终端的动画滚动似乎有点惯性，很难掌控滚动量，跟编辑器或者工作台内的滚动效果有很大差异，所以我关了。&lt;/p&gt;
&lt;h2 id=&#34;css-less-sass&#34;&gt;CSS/Less/Sass&lt;/h2&gt;
&lt;h3 id=&#34;lint-重复属性警告&#34;&gt;lint 重复属性警告&lt;/h3&gt;
&lt;p caption=&#39;需要设置三次&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/067e3056-d82f-4910-9e47-519259d54577.webp&#39; alt=&#39;需要设置三次&#39; title=&#39;需要设置三次&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个很有必要，有时候你是从外面复制多个属性值粘贴（常见的是从浏览器检查元素的 style 上复制），然后去除重复的属性。&lt;/p&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;h3 id=&#34;自动-stash&#34;&gt;自动 Stash&lt;/h3&gt;
&lt;p caption=&#39;少操作一次&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/4fee6e57-9088-4a39-bbfe-c86ea5c9beb2.webp&#39; alt=&#39;少操作一次&#39; title=&#39;少操作一次&#39;&gt;&lt;/p&gt;
&lt;p&gt;如图，描述的很清楚了，建议开启，少一步操作。&lt;/p&gt;
&lt;h2 id=&#34;第三方扩展&#34;&gt;第三方扩展&lt;/h2&gt;
&lt;p&gt;其实没什么好说的，毕竟都装扩展了，肯定是有自己的需求才会装的，所以按照自己的需求配置即可。&lt;/p&gt;
&lt;h3 id=&#34;gitlens&#34;&gt;GitLens&lt;/h3&gt;
&lt;p&gt;不过有些插件，是可以关闭付费推荐的，对，说的就是 &lt;code&gt;GitLens&lt;/code&gt; ，在我（意外）查看 git 分支合入情况的时候，会触发到付费功能的提示，这个可以关闭（感谢插件开发者的大度）：&lt;/p&gt;
&lt;p caption=&#39;关掉 GitLens 付费功能提醒&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/28974458-b244-4ed9-919e-affe90c409fe.webp&#39; alt=&#39;关掉 GitLens 付费功能提醒&#39; title=&#39;关掉 GitLens 付费功能提醒&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;one-dark-pro&#34;&gt;One Dark Pro&lt;/h3&gt;
&lt;p caption=&#39;高亮部分代码&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/a1ac82b3-7b1c-4fc4-9327-2cd04796bbee.webp&#39; alt=&#39;高亮部分代码&#39; title=&#39;高亮部分代码&#39;&gt;&lt;/p&gt;
&lt;p&gt;这个我喜欢，更显著的看到方法、函数名：&lt;/p&gt;
&lt;p caption=&#39;效果&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/make-vscode-great-forever/d6235ab1-a532-4188-be52-2f29908b31e5.webp&#39; alt=&#39;效果&#39; title=&#39;效果&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;说了这么多设置，适合自己的才是最重要的，祝大家高效工作，早点下班！&lt;/p&gt;
</description>
            <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/life/make-vscode-great-forever.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/life/make-vscode-great-forever.html</guid>
            
                <category>生活</category>
            
                <category>折腾</category>
            
                <category>教程</category>
            
                <category>技巧</category>
            
                <category>JavaScript</category>
            
                <category>工作流</category>
            
                <category>VSCode</category>
            
                <category>设置</category>
            
            
                <category>life</category>
            
        </item>
        
        <item>
            <title>使用 Apple TV 收看北京联通 IPTV</title>
            <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前在 &lt;a href=&#34;/life/the-way-to-watching-tv.html&#34;&gt;这篇博客&lt;/a&gt; 讲了现在家庭观影的方案，其中提到的一个点是使用网络上别人抓取到的 IPTV 的节目地址（m3u 后缀），放入 iPlayTV 中，可以直接播。但是这个节目地址过一段时间就失效了，这是因为联通 IPTV 服务器会时不时的会更新一下节目的播放地址，而 Apple TV 上填写的地址是固定的，无法及时更新，因此本文就来解决这个问题。&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(253, 235, 236); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;🚧&lt;/span&gt;&lt;span&gt;**使用前必读：**本人为北京联通宽带，**光猫使用桥接方式，路由器拨号，软路由 R4S 以旁路由**的方式进行连接。本教程针对该拓扑方案进行介绍，其他网络拓扑如「光猫桥接 + R4S 当主路由进行拨号，或者光猫拨号 + R4S 旁路由」等，也可以实现，但是其中关键的 R4S 设置也许跟本教程有些许的差异，建议多搜索一下，领会其中的精神，不用完全跟我的一样。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(251, 243, 219); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;🚧&lt;/span&gt;&lt;span&gt;同上，如果你是使用光猫直接拨号，你可以直接从光猫接根线出来到旁/主路由上进行组播变单播；也可以直接在支持的设备上使用组播地址进行播放，就不用像我这么麻烦了。具体还要看你家的网络拓扑结构而定。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(251, 236, 221); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;🚧&lt;/span&gt;&lt;span&gt;本教程仅针对北京联通 IPTV 测试成功，其他地区可能有所差异，如果发现文本中有跟地域强相关的内容，请根据你所在的地区替换对应内容。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(244, 238, 238); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;🚧&lt;/span&gt;&lt;span&gt;在修改设置前，请提前先备份所有路由器、设备的设置，以防万一。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(251, 243, 219); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;🚧&lt;/span&gt;&lt;span&gt;我使用的软路由是 R4S，有两个网口。如果你是跟我一样的网络拓扑，请保证你的软路由至少有两个或以上网口，因为一个需要连主路由，另一个需要连光猫。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgba(244, 240, 247, 0.8); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;🚧&lt;/span&gt;&lt;span&gt;我家的光猫网段是：192.168.1.x，主路由网段是 192.168.5.x；光猫地址是 192.168.1.1，R4S 的地址是 192.168.5.2，主路由 Lan 口地址是 192.168.5.1，路由器 Wan 口地址是 192.168.1.2。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;确定是否支持白嫖&#34;&gt;确定是否支持白嫖&lt;/h2&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(231, 243, 248); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;🚧&lt;/span&gt;&lt;span&gt;目前北京地区的 IPTV 没有增加鉴权，但是从我看到的信息来看其他地区的一些运营商有对 IPTV 进行加密鉴权，即必须用运营商给的 IPTV 盒子的 Mac 地址连接（盒子起到解密的作用），才能实现脱离盒子使用软路由进行局域网任意设备的播放。具体如何实现比较复杂，本教程不介绍这个场景。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;提前下载-vlc&#34;&gt;提前下载 VLC&lt;/h3&gt;
&lt;p&gt;光猫桥接，路由器拨号的方式上网后，连接光猫后是无法上网的，因此请先提前在电脑上下载好 VLC 播放软件，以供一会儿进行测试，VLC 播放器地址在这里下载：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.videolan.org/vlc/&#34; target=&#34;_blank&#34;&gt; Official download of VLC media player, the best Open Source player - VideoLAN&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;连接光猫&#34;&gt;连接光猫&lt;/h3&gt;
&lt;p&gt;将&lt;strong&gt;电脑使用有线的方式连接光猫&lt;/strong&gt;的 IPTV 口（如果光猫上没有发现 IPTV 口，则表示光猫支持混插，即接口不区分宽带和 IPTV 口，插任意一个口都行），然后在 VLC 软件中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打开 File-Open Network。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击下面的 Open RTP/UDP Stream。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protocol 选 RTP，Mode 选 Multicast，IP Address 填：&lt;code&gt;239.3.1.241&lt;/code&gt; （或者 &lt;code&gt;rtp://239.3.1.241&lt;/code&gt; ，具体哪个忘了）端口填 &lt;code&gt;8000&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点 Open 之后，如果可以看到北京卫视，说明你可以免费白嫖。&lt;/p&gt;
&lt;p caption=&#39;VLC RTP 播放&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/ea9168ee-6086-42df-b6b4-269900eb5592.webp&#39; alt=&#39;VLC RTP 播放&#39; title=&#39;VLC RTP 播放&#39;&gt;&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(251, 243, 219); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;💡&lt;/span&gt;&lt;span&gt;这里的 `rtp://239.3.1.241:8000` 就是北京卫视的组播地址，将来该地址可能有变化，具体准确的地址，可以到 `https://raw.githubusercontent.com/qwerttvv/Beijing-IPTV/master/IPTV-Unicom.m3u` 这里，找到任意一个 rtp 路径后面的 ip 地址进行测试。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;基本概念解释&#34;&gt;基本概念解释&lt;/h2&gt;
&lt;p&gt;不想了解的直接跳到下一节。&lt;/p&gt;
&lt;h3 id=&#34;iptv&#34;&gt;IPTV&lt;/h3&gt;
&lt;p&gt;根据维基百科对 IPTV 的解释：&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(241, 241, 239); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;📖&lt;/span&gt;&lt;span&gt;网路协定电视（英语：Internet Protocol Television，缩写：IPTV）是宽频电视的一种。IPTV 是用宽频网络作为介质传送电视信息的一种系统，将广播节目透过宽频上的网际协议（Internet Protocol, IP）向订户传递数码电视服务。由于需要使用网路，IPTV 服务供应商经常会一并提供连接互联网及 IP 电话等相关服务，也可称为“三重服务”或“三合一服务”（Triple Play）。IPTV 是数位电视的一种，因此普通电视机需要配合相应的机顶盒接收频道，也因此供应商通常会向客户同时提供随选视讯服务。虽透过宽频网路及网际协议，但 IPTV 不一定透过网际网路，为传输品质会通过局域网传输。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;有此可知，一般情况下 IPTV 都是宽带提供商提供的服务，通过它可以看电视。&lt;/p&gt;
&lt;h3 id=&#34;组播&#34;&gt;组播&lt;/h3&gt;
&lt;p&gt;一种 IPTV 实现播放的技术手段，英文名叫「multicast」，也译为多播。具体概念不用弄太清楚，了解到它相比于单播：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优势在于：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不占用互联网带宽。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPTV 盒子起到认证的作用，IPTV 运营商由于是对一个组进行广播，因此对自己的服务器压力较小。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;劣势&lt;strong&gt;在于：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须有线连接光猫 IPTV 口（有些光猫支持混插，即不区分 IPTV 口还是宽带口）才能用，因此只能连接 IPTV 盒子的设备使用，不能使用 WiFi 让家里任意设备观看网络电视。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单播&#34;&gt;单播&lt;/h3&gt;
&lt;p&gt;另一种较老的 IPTV 实现播放的技术手段，早期 IPTV 用户不多的时候使用该方案，相比于组播来说，彼之缺点就是其之优点，反之亦然，即：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优势在于：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接入后，局域网支持 WiFi ，以供任意设备播放。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;劣势在于：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;跟服务器 1 对 1 连接，服务器压力较大，用户多的时候播放会比较卡顿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;占用宽带的带宽，直接使用互联网连接进行的播放（就跟现在看直播一样）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udpxy&#34;&gt;udpxy&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; udpxy 服务器是**一款 UDP 流转 HTTP 流的代理服务器**，可以将 IP 直播流转化为 HTTP 流，方便在各种终端上播放。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;当无法直接获取到组播地址的时候，用来将组播地址转为单播地址，如组播地址是：a:b， d:e（a、d 为 ip 地址，b、e 为端口）；转换成单播地址后就是统一的地址如 z/a/b，z/d/e。播放器监听这个地址 z 即可。&lt;/p&gt;
&lt;h3 id=&#34;m3u&#34;&gt;m3u&lt;/h3&gt;
&lt;blockquote style=&#39;border-color: ;color: &#39;&gt;&lt;p&gt; **M3U**（MP3 URL 的缩写）是一种播放多媒体列表的文件格式，它的设计初衷是为了播放音频文件，比如 MP3，但是越来越多的软件现在用做播放视频文件列表的格式。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;m3u 文件就是一个里面含有全部播放组播地址的文本文件，在 Apple TV 或者电脑上读取这个文件地址，就可以播放其中的视频地址。&lt;/p&gt;
&lt;h3 id=&#34;epg&#34;&gt;EPG&lt;/h3&gt;
&lt;p&gt;包含节目单信息，上一步知道 m3u 地址后，里面都是一个个的 ip 地址，那如何知道每个 ip 地址是哪个频道呢？这个时候就需要一个 EPG 进行配对了，EPG 含有每个地址的节目信息，甚至是频道的简单介绍，EPG 通常会随着视频信号一起广播。&lt;/p&gt;
&lt;h2 id=&#34;网络拓扑&#34;&gt;网络拓扑&lt;/h2&gt;
&lt;p caption=&#39;网络拓扑-主路由拨号&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/0349a1d5-caeb-4233-b36b-8bc1c7db7565.webp&#39; alt=&#39;网络拓扑-主路由拨号&#39; title=&#39;网络拓扑-主路由拨号&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;上手实操&#34;&gt;上手实操&lt;/h2&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(251, 243, 219); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;🚧&lt;/span&gt;&lt;span&gt;动手之前先按照开头所述检查是否支持白嫖。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;设置软路由&#34;&gt;设置软路由&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;安装 udpxy 和 luci-udpxy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步就是常规的操作了，UI 安装最方便，如图（安装完成后先别启用，最后一步再启用）：&lt;/p&gt;
&lt;p caption=&#39;软件安装界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/2be1ca35-90a8-4936-89cd-5458557ac064.webp&#39; alt=&#39;软件安装界面&#39; title=&#39;软件安装界面&#39;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新建/配置网络接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步为了让软路由识别到来自光猫的数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;网络-接口&lt;/code&gt; 中新建一个接口，随便起个名字叫 &lt;code&gt;IPTV&lt;/code&gt; ：&lt;/li&gt;
&lt;/ul&gt;
&lt;p caption=&#39;新建 IPTV 接口&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/a938e2a7-9723-40f5-8b86-3ed151ba12c5.webp&#39; alt=&#39;新建 IPTV 接口&#39; title=&#39;新建 IPTV 接口&#39;&gt;&lt;/p&gt;
&lt;p&gt;注意箭头的部分，我已经新建好了所以括号中有 IPTV 字样，刚新建的时候是没有的。其中 eth1 是我的 Lan 口，接的是主路由；eth0 是另一个接口，接的即是光猫（IPTV 口）；这里我曾经修改过，默认情况下，eht0 是 Lan 口，eth1 是 Wan 口，不重要，这一步是将 Wan 口用作 IPTV 口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置「IPTV」接口的网关跃点与防火墙设置：&lt;/li&gt;
&lt;/ul&gt;
&lt;p caption=&#39;配置网关跃点&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/d1df1f84-7240-4eb9-872b-6871f9c895a6.webp&#39; alt=&#39;配置网关跃点&#39; title=&#39;配置网关跃点&#39;&gt;&lt;/p&gt;
&lt;p caption=&#39;防火墙配置到 wan 上&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/c0e4032b-f066-4fcf-b906-dae85a37d070.webp&#39; alt=&#39;防火墙配置到 wan 上&#39; title=&#39;防火墙配置到 wan 上&#39;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置 Wan 口的网关跃点：&lt;/li&gt;
&lt;/ul&gt;
&lt;p caption=&#39;Wan 口网关跃点&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/21347824-ca57-4715-9fe9-cd7b6be0f282.webp&#39; alt=&#39;Wan 口网关跃点&#39; title=&#39;Wan 口网关跃点&#39;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置 Lan 口 IGMP 嗅探：&lt;/li&gt;
&lt;/ul&gt;
&lt;p caption=&#39;IGMP 嗅探&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/b075aaec-042b-4f9d-9437-27ea4d17211e.webp&#39; alt=&#39;IGMP 嗅探&#39; title=&#39;IGMP 嗅探&#39;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置网络防火墙&lt;/li&gt;
&lt;/ul&gt;
&lt;p caption=&#39;网络防火墙配置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/577418eb-c3f6-43be-b73b-b1cf3ab5dcea.webp&#39; alt=&#39;网络防火墙配置&#39; title=&#39;网络防火墙配置&#39;&gt;&lt;/p&gt;
&lt;p caption=&#39;防火墙配置2&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/b3ce719b-a05d-41ef-ab4a-12eb866178a8.webp&#39; alt=&#39;防火墙配置2&#39; title=&#39;防火墙配置2&#39;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置 udpxy 服务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如图配置即可，注意这里的 eth0 是 Wan 口，别搞错了：&lt;/li&gt;
&lt;/ul&gt;
&lt;p caption=&#39;打开 UDPXY&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/bcd40c05-ed7f-43fd-b833-4cee94948150.webp&#39; alt=&#39;打开 UDPXY&#39; title=&#39;打开 UDPXY&#39;&gt;&lt;/p&gt;
&lt;p&gt;最后尝试打开  [&lt;a href=&#34;http://192.168.5.2:4022/status&#34;&gt;http://192.168.5.2:4022/status&lt;/a&gt;]([object Object])  验证 udpxy 服务是否启动成功：&lt;/p&gt;
&lt;p caption=&#39;看到这个就表示成功了&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/189e9cb4-80c9-4b5d-8f57-722660e66145.webp&#39; alt=&#39;看到这个就表示成功了&#39; title=&#39;看到这个就表示成功了&#39;&gt;&lt;/p&gt;
&lt;p&gt;之后，将之前使用 VLC 打开的地址 &lt;code&gt;rtp://239.3.1.241:8000&lt;/code&gt; 改成 &lt;code&gt;http://192.168.2.1:4022/rtp/239.3.1.241:8000&lt;/code&gt; 再尝试打开（不用点下面的 Open RTP/UDP Stream，直接在 URL 中打开）。&lt;/p&gt;
&lt;p caption=&#39;尝试将 RTP 变 HTTP 播放&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/582e015c-4260-4181-a81c-5eafc97a1132.webp&#39; alt=&#39;尝试将 RTP 变 HTTP 播放&#39; title=&#39;尝试将 RTP 变 HTTP 播放&#39;&gt;&lt;/p&gt;
&lt;p&gt;然后双击播放即可：&lt;/p&gt;
&lt;p caption=&#39;成功画面↑&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/iptv-for-apple-tv-in-beijing/215aa895-e673-419a-a4fc-b94603af8baa.webp&#39; alt=&#39;成功画面↑&#39; title=&#39;成功画面↑&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用播放软件&#34;&gt;使用播放软件&lt;/h3&gt;
&lt;p&gt;我是在 Apple TV 4K 看电视的，试了几个播放软件，这里简单说说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;iPlayTV 不能播放，不知道为什么。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fileball 上下换台没问题，但是一选台就闪退。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终选择了 IIVA 同一个开发者的 app：「TV+」，港区售价 38 港币（购买第二天就限免，尴尬）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何实现自动更新地址&#34;&gt;如何实现自动更新地址&lt;/h2&gt;
&lt;p&gt;联通的 IPTV 节目播放地址，每隔一段时间都会变一次，有时候变的是端口，有时候变的是 ip 地址，这个时候再用这个办法播放就失效了，怎么办呢？&lt;/p&gt;
&lt;p&gt;网上有好心人，经过一系列复杂监听操作，比如这个：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.friskit.me/2020/05/31/bjunicom-network.html&#34; target=&#34;_blank&#34;&gt; 光纤入户光猫改桥接+内网转发IPTV=任意设备看电视直播 - Botian&#39;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取到了 IPTV 电视盒子与联通服务器通信的数据，拿到了它的地址，因此我们直接使用即可，如：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/qwerttvv/Beijing-IPTV/blob/master/README.md&#34; target=&#34;_blank&#34;&gt; github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是这里有个点是，你家里的软路由地址需要跟这位好心人的地址是一样的（192.168.123.1），然后将 udpxy 端口改为 23234，这样你就可以直接将这个地址放到 TV+ 里面即可：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qwerttvv/Beijing-IPTV/master/IPTV-Unicom.m3u&#34; target=&#34;_blank&#34;&gt; raw.githubusercontent.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;否则，你就只能主动监听这个文件的变动，然后更新。&lt;/p&gt;
&lt;p&gt;这里我花十分钟在 Vercel 部署了一个 API 服务，同时启用了 Vercel 的 Corn Jobs 服务，可以定时执行函数，来检测变动，代码如下，你也可以自己部署一套：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; type &amp;#123; &lt;span class=&#34;hljs-title class_&#34;&gt;NextApiRequest&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;NextApiResponse&lt;/span&gt; &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;next&amp;#x27;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;type &lt;span class=&#34;hljs-title class_&#34;&gt;ResponseData&lt;/span&gt; = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;msg&lt;/span&gt;: string,&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * 该函数用来将网友通过 IPTV 盒子抓包获取的联通单播地址，转成自己的单播地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * 该函数每天 3 点触发一次，定时检测网友的单播地址是否有更新，使用 vercel corn 任务进行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;TODO:&lt;/span&gt; 该函数未做鉴权，任何人都可以手动触发检测，为了防止滥用可以加上鉴权，但是 corn 似乎没这个功能&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handler&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;  request: NextApiRequest,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;  response: NextApiResponse&amp;lt;ResponseData&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// Note: 步骤&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 1. 获取网友通过监听盒子数据包抓取的（自己搞比较费劲，直接用现成的了）联通 IPTV 永久地址（rtp 协议的组播地址，多用户通用），获取其内容&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 2. 添加本地 udpxy 转发地址&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 3. 获取之前的 github gist 内容以对比二者&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 4. 有差异，则更新 github gist 内容&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 5. 没有，则不做操作&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// Note: 环境变量，自己在 Vercel 中设置好&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; token = process.&lt;span class=&#34;hljs-property&#34;&gt;env&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;GITHUB_TOKEN&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; gist = process.&lt;span class=&#34;hljs-property&#34;&gt;env&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;GIST_URL&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; id = process.&lt;span class=&#34;hljs-property&#34;&gt;env&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;GIST_ID&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fetch&lt;/span&gt;(&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;https://raw.githubusercontent.com/qwerttvv/Beijing-IPTV/master/IPTV-Unicom.m3u&amp;#x27;&lt;/span&gt;&lt;br&gt;  )&lt;br&gt;    .&lt;span class=&#34;hljs-title function_&#34;&gt;then&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;async&lt;/span&gt; (res) =&amp;gt; &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!res.&lt;span class=&#34;hljs-property&#34;&gt;ok&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;获取源地址异常&amp;#x27;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; response.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;(&amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;msg&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;获取源地址异常&amp;#x27;&lt;/span&gt;,&lt;br&gt;        &amp;#125;);&lt;br&gt;      &amp;#125;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; src = &lt;span class=&#34;hljs-keyword&#34;&gt;await&lt;/span&gt; res.&lt;span class=&#34;hljs-title function_&#34;&gt;text&lt;/span&gt;();&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// Note: 替换网友的本地单播地址为我的，其实你也可以将自己家的路由器网段设置成跟网友的一样（192.168.123.x），udpxy 端口转发设置成跟网友一样（23234），你就可以直接使用该地址了&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; newGist = src.&lt;span class=&#34;hljs-title function_&#34;&gt;replace&lt;/span&gt;(&lt;br&gt;        &lt;span class=&#34;hljs-regexp&#34;&gt;/http\:\/\/192\.168\.123\.1\:23234/g&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://192.168.5.2:4022&amp;#x27;&lt;/span&gt;&lt;br&gt;      );&lt;br&gt;      response.&lt;span class=&#34;hljs-title function_&#34;&gt;setHeader&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Content-Type&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;text/html; charset=utf-8&amp;#x27;&lt;/span&gt;);&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// Note: 获取 gist 的 raw 内容，需要加个 cache-bust 否则每次请求会被缓存&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fetch&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;gist&amp;#125;&lt;/span&gt;?cache-bust=&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;&lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.floor(&lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.random() * &lt;span class=&#34;hljs-number&#34;&gt;100000&lt;/span&gt;)&amp;#125;&lt;/span&gt;`&lt;/span&gt;, &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;headers&lt;/span&gt;: &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-title class_&#34;&gt;Authorization&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;`Bearer &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;token&amp;#125;&lt;/span&gt;`&lt;/span&gt;,&lt;br&gt;        &amp;#125;,&lt;br&gt;      &amp;#125;)&lt;br&gt;        .&lt;span class=&#34;hljs-title function_&#34;&gt;then&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;async&lt;/span&gt; (pre) =&amp;gt; &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; preGist = &lt;span class=&#34;hljs-keyword&#34;&gt;await&lt;/span&gt; pre.&lt;span class=&#34;hljs-title function_&#34;&gt;text&lt;/span&gt;();&lt;br&gt;          &lt;span class=&#34;hljs-comment&#34;&gt;// console.log(&amp;#x27;preGist:&amp;#x27;, preGist);&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;stringify&lt;/span&gt;(newGist) !== &lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;stringify&lt;/span&gt;(preGist)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// Note: 更新 Gist&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; files = &amp;#123;&lt;br&gt;              &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;IPTV.m3u&amp;#x27;&lt;/span&gt;: &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;content&lt;/span&gt;: newGist,&lt;br&gt;              &amp;#125;,&lt;br&gt;            &amp;#125;;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fetch&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`https://api.github.com/gists/&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;id&amp;#125;&lt;/span&gt;`&lt;/span&gt;, &amp;#123;&lt;br&gt;              &lt;span class=&#34;hljs-attr&#34;&gt;method&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;PATCH&amp;#x27;&lt;/span&gt;,&lt;br&gt;              &lt;span class=&#34;hljs-attr&#34;&gt;headers&lt;/span&gt;: &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-title class_&#34;&gt;Authorization&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;`Bearer &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;token&amp;#125;&lt;/span&gt;`&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Content-Type&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;text/plain&amp;#x27;&lt;/span&gt;,&lt;br&gt;              &amp;#125;,&lt;br&gt;              &lt;span class=&#34;hljs-attr&#34;&gt;body&lt;/span&gt;: &lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;stringify&lt;/span&gt;(&amp;#123; files &amp;#125;),&lt;br&gt;            &amp;#125;)&lt;br&gt;              .&lt;span class=&#34;hljs-title function_&#34;&gt;then&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;s&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;br&gt;                  &lt;span class=&#34;hljs-string&#34;&gt;`更新成功: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;gist&amp;#125;&lt;/span&gt;?cache-bust=&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;&lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.floor(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.random() * &lt;span class=&#34;hljs-number&#34;&gt;1000000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;                  )&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;                );&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; response.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;(&amp;#123;&lt;br&gt;                  &lt;span class=&#34;hljs-attr&#34;&gt;msg&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;`更新成功: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;gist&amp;#125;&lt;/span&gt;?cache-bust=&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;&lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.floor(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.random() * &lt;span class=&#34;hljs-number&#34;&gt;1000000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;                  )&amp;#125;&lt;/span&gt;`&lt;/span&gt;,&lt;br&gt;                &amp;#125;);&lt;br&gt;              &amp;#125;)&lt;br&gt;              .&lt;span class=&#34;hljs-title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`更新失败: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;e&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; response.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;(&amp;#123;&lt;br&gt;                  &lt;span class=&#34;hljs-attr&#34;&gt;msg&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;`更新失败: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;e&amp;#125;&lt;/span&gt;`&lt;/span&gt;,&lt;br&gt;                &amp;#125;);&lt;br&gt;              &amp;#125;);&lt;br&gt;          &amp;#125;&lt;br&gt;          &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;`未变化: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;gist&amp;#125;&lt;/span&gt;?cache-bust=&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;&lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.floor(&lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.random() * &lt;span class=&#34;hljs-number&#34;&gt;1000000&lt;/span&gt;)&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;          );&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; response.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;(&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;msg&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;`未变化: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;gist&amp;#125;&lt;/span&gt;?cache-bust=&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;&lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.floor(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;              &lt;span class=&#34;hljs-built_in&#34;&gt;Math&lt;/span&gt;.random() * &lt;span class=&#34;hljs-number&#34;&gt;1000000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-subst&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;            )&amp;#125;&lt;/span&gt;`&lt;/span&gt;,&lt;br&gt;          &amp;#125;);&lt;br&gt;        &amp;#125;)&lt;br&gt;        .&lt;span class=&#34;hljs-title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`获取自己的 gist 失败: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;e&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; response.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;(&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;msg&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;`获取自己的 gist 失败: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;e&amp;#125;&lt;/span&gt;`&lt;/span&gt;,&lt;br&gt;          &amp;#125;);&lt;br&gt;        &amp;#125;);&lt;br&gt;    &amp;#125;)&lt;br&gt;    .&lt;span class=&#34;hljs-title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`获取别人的源失败: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;e&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; response.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;).&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;(&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;msg&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;`获取别人的源失败: &lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;e&amp;#125;&lt;/span&gt;`&lt;/span&gt;,&lt;br&gt;      &amp;#125;);&lt;br&gt;    &amp;#125;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Corn Jobs 服务配置：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;crons&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/api/get&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;schedule&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;0 15 * * *&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;拉取该文件后若有更新，会自动更新 gist 文件：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.githubusercontent.com/Xheldon/73bf97cb5ac5db2f5237264556b20951/raw/ea44694028a38baefff04ea46c02795e448d76f0/IPTV.m3u&#34; target=&#34;_blank&#34;&gt; gist.githubusercontent.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样，我只需要在 TV+ 中写死这个 gist 地址，即可在网友更新这个地址的时候，自动更新了。&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.lishun.me/iptvhelper-guide&#34; target=&#34;_blank&#34;&gt; 单线融合IPTV到家庭局域网最简单的方法：路由+桥接混合模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.friskit.me/2020/05/31/bjunicom-network.html&#34; target=&#34;_blank&#34;&gt; 光纤入户光猫改桥接+内网转发IPTV=任意设备看电视直播 - Botian&#39;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.haoyizebo.com/posts/6a0c2301/&#34; target=&#34;_blank&#34;&gt; 北京联通白嫖 IPTV&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/life/iptv-for-apple-tv-in-beijing.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/life/iptv-for-apple-tv-in-beijing.html</guid>
            
                <category>生活</category>
            
                <category>经验</category>
            
                <category>Apple</category>
            
                <category>折腾</category>
            
                <category>苹果</category>
            
                <category>网络</category>
            
                <category>路由器</category>
            
                <category>教程</category>
            
            
                <category>life</category>
            
        </item>
        
        <item>
            <title>TeslaMate 使用指南</title>
            <description>&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(251, 236, 221); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;💡&lt;/span&gt;&lt;span&gt;本指南需要有一丁点的编程知识，知道什么是终端、什么是命令行。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgba(244, 240, 247, 0.8); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;💡&lt;/span&gt;&lt;span&gt;本教程使用 Docker 安装 TeslaMate，如果你是在软路由环境，可能需要做一些额外操作如端口映射等，浏览器才能访问。而我的 Mac 电脑常年不关机，因此装在了 Mac 系统下的 Docker 上。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&#39;content-callout&#39; style=&#39;background: rgb(231, 243, 248); color: ;&#39;&gt;&lt;span class=&#39;content-callout-icon&#39;&gt;💡&lt;/span&gt;&lt;span&gt;有点遗憾的是，TeslaMate 不能获取车辆的历史信息，因此你只能查看安装 TeslaMate 后的车辆行驶数据，且 TeslaMate 的服务不能关闭，否则无法记录到相关行驶数据。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;「TeslaMate」，简单翻译过来就是「特斯拉伴侣」，它是一款开源软件，可以获取车辆上报给特斯拉服务器的数据，然后使用 Grafana 这款 Web 数据可视化仪表盘工具显示出来。&lt;/p&gt;
&lt;p&gt;TeslaMate 的仓库：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/adriankumpf/teslamate#teslamate&#34; target=&#34;_blank&#34;&gt; GitHub - adriankumpf/teslamate: A self-hosted data logger for your Tesla  🚘&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TeslaMate 的文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.teslamate.org/docs/installation/docker&#34; target=&#34;_blank&#34;&gt; Docker install | TeslaMate&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;特斯拉的工程师们会收集这些数据进行车辆的大数据分析、软件优化、电池充电优化等，而我们个人车主获取这些信息则可以更好的了解自己爱车的一些详细数据，如历史行程、每日行驶里程数、耗电情况、充电效率等。&lt;/p&gt;
&lt;p&gt;之所以有这篇博文是因为 TeslaMate 的文档只说了如何安装（很简单），但是并没有告诉你安装完成后如何配置才能看到想要的仪表盘，而网上的一些内容农场靠着 SEO 技巧，排名靠前的也都是复制粘贴官网内容来的，要找到想要的信息是有点困难的，我目前没看到有任何一篇讲从如何安装到成品的文章，所以本文从头讲起。&lt;/p&gt;
&lt;p&gt;先上一张成果图（用户可以自定义面板）：&lt;/p&gt;
&lt;p caption=&#39;TeslaMate 成果图&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/03d97d52-796e-4e46-83be-3ec3b3013cea.webp&#39; alt=&#39;TeslaMate 成果图&#39; title=&#39;TeslaMate 成果图&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;一、安装-docker&#34;&gt;一、安装 Docker&lt;/h2&gt;
&lt;p&gt;如开头所述，我使用 Docker 进行安装，TeslaMate 的文档要求是安装 Docker 和 Docker Compose（别管是什么，装就完了），而我们只需要安装 Docker Desktop 即可将这二者都装了，Docker Desktop 下载在这里：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34; target=&#34;_blank&#34;&gt; Docker Desktop: The #1 Containerization Tool for Developers | Docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装后启动，然后随便找个目录（TeslaMate 的全部文件后续都会在这个目录，不要删除），将官方给的 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件放入其中，我这里放到了 &lt;code&gt;~/Developer/Docker/TeslaMate&lt;/code&gt; 下，&lt;code&gt;docker-compose.yml&lt;/code&gt; 内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;version:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;services:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;teslamate:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;teslamate/teslamate:latest&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;always&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ENCRYPTION_KEY=&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#设置 TeslaMate API 加密密码，注意等号后面不要有空格&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;DATABASE_USER=teslamate&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;DATABASE_PASS=&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#设置安全数据库密码，注意等号后面不要有空格&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;DATABASE_NAME=teslamate&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;DATABASE_HOST=database&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;MQTT_HOST=mosquitto&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;4000&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;:4000&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;./import:/opt/app/import&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;cap_drop:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;all&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;database:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;postgres:15&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;always&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;POSTGRES_USER=teslamate&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;POSTGRES_PASSWORD=&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#设置数据库密码，注意等号后面不要有空格&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;POSTGRES_DB=teslamate&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;teslamate-db:/var/lib/postgresql/data&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;grafana:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;teslamate/grafana:latest&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;always&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;DATABASE_USER=teslamate&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;DATABASE_PASS=&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#设置 grafana 的数据库密码，注意等号后面不要有空格&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;DATABASE_NAME=teslamate&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;DATABASE_HOST=database&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;:3000&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;teslamate-grafana-data:/var/lib/grafana&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;mosquitto:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;eclipse-mosquitto:2&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;always&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;command:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;mosquitto&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;/mosquitto-no-auth.conf&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# ports:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;#   - 1883:1883&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;mosquitto-conf:/mosquitto/config&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;mosquitto-data:/mosquitto/data&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;teslamate-db:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;teslamate-grafana-data:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;mosquitto-conf:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;mosquitto-data:&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意有些服务的密码设置是需要跟另一个服务密码一致的，所以我建议将上述的密码都设置成一样，省的麻烦。另外尤其需要注意的是 &lt;code&gt;=&lt;/code&gt; 后面不要有空格。之后打开终端执行（每行复制到终端后按回车）：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 假设你放上述文件的目录为 ~/Developer/Docker/TeslaMate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;cd&lt;/span&gt; ~/Developer/Docker/TeslaMate&lt;br&gt;docker compose up -d&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成后，打开 Docker Desktop，应该是这个样子：&lt;/p&gt;
&lt;p caption=&#39;安装完成后截图&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/cd39c66f-60b7-4d3d-81bd-f5ac50260d28.webp&#39; alt=&#39;安装完成后截图&#39; title=&#39;安装完成后截图&#39;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二、登陆特斯拉账号授权&#34;&gt;二、登陆特斯拉账号授权&lt;/h2&gt;
&lt;p&gt;上一步完成无错误后，确保全部的服务都处于 Running 状态，（可以点击上面截图的各个服务名字查看对应 log，看有无类似与 error 之类的报错），在浏览器中打开 &lt;code&gt;localhost:4000&lt;/code&gt; 后，发现会要求你输入 API Token 和 Refresh Token，这两个获取方式官方文档有写，在这里：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.teslamate.org/docs/faq/#how-to-generate-your-own-tokens&#34; target=&#34;_blank&#34;&gt; Frequently Asked Questions | TeslaMate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里我使用第三种方式「Tesla Auth (macOS, Linux, Windows) 」点击以下链接查看适用于自己系统的版本，下载对应文件（是一个可执行文件）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/adriankumpf/tesla_auth#download&#34; target=&#34;_blank&#34;&gt; GitHub - adriankumpf/tesla_auth: Securely generate API tokens for third-party access to your Tesla.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接双击打开（或者在终端打开）的话，如果是 MacOS 会提醒你该执行文件可能有危险，去 &lt;code&gt;系统设置-隐私与安全性&lt;/code&gt;中，点击「仍要打开」即可。打开后会弹出一个窗口，让你登陆特斯拉账号，登陆完成后，页面会显示出特斯拉的 API Token 和 Refresh Token（截图我就不放了），将其复制到 &lt;code&gt;localhost:4000&lt;/code&gt; 页面中的对应位置，即可成功登陆，登陆成功的界面是这样的：&lt;/p&gt;
&lt;p caption=&#39;TeslaMate 授权成功界面&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/8d41bc35-475f-499d-b2d3-c4812e9a72e9.webp&#39; alt=&#39;TeslaMate 授权成功界面&#39; title=&#39;TeslaMate 授权成功界面&#39;&gt;&lt;/p&gt;
&lt;p&gt;到这就算是鉴权成功了，接下来配置 Grafana。&lt;/p&gt;
&lt;h2 id=&#34;三、grafana-基本概念&#34;&gt;三、Grafana 基本概念&lt;/h2&gt;
&lt;p&gt;Grafana 是一款非常强大的 Web 数据可视化仪表盘工具，使用相对比较复杂，而且我没有研究它汉化的方法。好在 Tesla 的数据字段比较简单，也用不着汉化。这里首先简单介绍一下相关概念，方便后续的自定义。&lt;/p&gt;
&lt;h3 id=&#34;dashboard-和-panel&#34;&gt;Dashboard 和 Panel&lt;/h3&gt;
&lt;p&gt;Dashboard 就是一个显示各种数据的界面，可以显示不同的 Panel，Panel 就是一个查询数据库获得数据后，将数据可视化的一个个模块，如下每个红框就是一个 Panel：&lt;/p&gt;
&lt;p caption=&#39;N 个 Panel 组成了一个 Dashboard&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/6b5bfe32-8214-4994-a6ce-9b3a1874e11e.webp&#39; alt=&#39;N 个 Panel 组成了一个 Dashboard&#39; title=&#39;N 个 Panel 组成了一个 Dashboard&#39;&gt;&lt;/p&gt;
&lt;p&gt;Panel 可以在不同的 Dashboard 之间复制，如下：&lt;/p&gt;
&lt;p caption=&#39;Panel 复制&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/2522b63e-34e9-44e2-a0ba-2d74901ea53b.webp&#39; alt=&#39;Panel 复制&#39; title=&#39;Panel 复制&#39;&gt;&lt;/p&gt;
&lt;p&gt;点击复制后，就可以在另一个 Dashboard 中粘贴，点击 Dashboard 右上角的 Add Panel 按钮（或者首次新建一个 Dashboard 的时候）（如果没在上一步对 Panel 点 Copy，下图中的第四个「Paste from Clipboard 」就不会出现）就会出现下面的新建 Panel：&lt;/p&gt;
&lt;p caption=&#39;粘贴刚刚复制的 Panel&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/37d13b9a-d6b0-4e19-9bd9-b41712ea5e05.webp&#39; alt=&#39;粘贴刚刚复制的 Panel&#39; title=&#39;粘贴刚刚复制的 Panel&#39;&gt;&lt;/p&gt;
&lt;h3 id=&#34;variable（变量）和-json-model&#34;&gt;Variable（变量）和 JSON Model&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Variable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个 Dashboard 可以设置供 Panel 使用的 Variable，而 Panel 如何使用 Variable 呢？Panel 的数据是通过 SQL 查询查出来的，而 SQL 的部分语法是 grafana 的 SQL 模板语法，下面是查询海拔的 SQL 语法：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;SELECT&lt;/span&gt;&lt;br&gt; $__time(&lt;span class=&#34;hljs-type&#34;&gt;date&lt;/span&gt;),&lt;br&gt; ROUND(convert_m(elevation, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;$alternative_length_unit&amp;#x27;&lt;/span&gt;)) &lt;span class=&#34;hljs-keyword&#34;&gt;AS&lt;/span&gt; elevation_[[alternative_length_unit]]&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;FROM&lt;/span&gt;&lt;br&gt; positions&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;WHERE&lt;/span&gt;&lt;br&gt; car_id &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; $car_id &lt;span class=&#34;hljs-keyword&#34;&gt;AND&lt;/span&gt;&lt;br&gt; $__timeFilter(&lt;span class=&#34;hljs-type&#34;&gt;date&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;BY&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-type&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;ASC&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中的带 &lt;code&gt;$&lt;/code&gt; 符号的就是预设的 Variable，有些是内置的如 &lt;code&gt;$__timeFilter&lt;/code&gt;，有些是自定义的如 &lt;code&gt;$alternative_length_unit&lt;/code&gt;，自定义的变量就是 Dashboard 配置的 Variable。Dashboard 的 Variable 在 Dashboard 右上角的 Dashboard Setting 里配置：&lt;/p&gt;
&lt;p caption=&#39;Variable 配置&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/f624e3f9-bea2-4293-82e0-e751886acb3b.webp&#39; alt=&#39;Variable 配置&#39; title=&#39;Variable 配置&#39;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JSON Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有时候你会发现，从一个 Dashboard 复制了一个 Panel 粘贴到新 Dashboard 后，Panel 并不能正常显示数据，就是因为你没有将源 Panel 用到的 Variable 从源 Dashboard 中复制到新 Dashboard 中，导致 SQL 语法报错，数据无法查询出来。但是如果 Dashboard 的 Variable 很多的话，一个一个复制又非常麻烦，怎么办呢？此时可以通过 JSON Model 来解决。&lt;/p&gt;
&lt;p&gt;JSON Model 其实就是 Dashboard 配置的 JSON 格式，因此，你只需要复制某个 Dashboard 对应字段的内容，就可以复制相应的内容到目标 Dashboard。Variable 在 JSON Model 中对应的字段是 &lt;code&gt;templating&lt;/code&gt; ，复制其内的 &lt;code&gt;list&lt;/code&gt; 中的对应项到目标 Dashboard 的 JSON Model 对应 &lt;code&gt;templating&lt;/code&gt; 字段的 &lt;code&gt;list&lt;/code&gt; 字段，作为其项即可（&lt;strong&gt;记得点击 Save Changes 后再点击 Save dashboard&lt;/strong&gt;）：&lt;/p&gt;
&lt;p caption=&#39;直接复制对应 JSON&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/1ebb8257-1f17-48ee-9406-5849d320dea5.webp&#39; alt=&#39;直接复制对应 JSON&#39; title=&#39;直接复制对应 JSON&#39;&gt;&lt;/p&gt;
&lt;p&gt;Grafana 还有很多其他复杂的功能，不过对于我们特斯拉数据可视化来说，了解这么多即可。&lt;/p&gt;
&lt;h2 id=&#34;四、配置-grafana&#34;&gt;四、配置 Grafana&lt;/h2&gt;
&lt;p&gt;访问 &lt;code&gt;localhost:3000&lt;/code&gt; 后首先需要登录，首次默认用户密码都是 &lt;code&gt;admin&lt;/code&gt; ，首次登陆成功后会让你设置密码，设置后进入是这个界面：&lt;/p&gt;
&lt;p caption=&#39;Grafana 默认 Dashboard&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/de518aa9-edce-48d8-94db-fbf8a7a48f85.webp&#39; alt=&#39;Grafana 默认 Dashboard&#39; title=&#39;Grafana 默认 Dashboard&#39;&gt;&lt;/p&gt;
&lt;p&gt;这里，TeslaMate 已经给我们配置好了各种 Dashboard，点击左侧的这个地方可以打开文件夹查看文件夹目录下的各个 Dashboard：&lt;/p&gt;
&lt;p caption=&#39;查看 TeslaMate 预设的 Dashboard&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/c36ebc9b-bda2-4ab6-933d-2da603f9ccf7.webp&#39; alt=&#39;查看 TeslaMate 预设的 Dashboard&#39; title=&#39;查看 TeslaMate 预设的 Dashboard&#39;&gt;&lt;/p&gt;
&lt;p caption=&#39;各种 Dashboard&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/58bbe182-7bbf-4814-97dd-c8406525a659.webp&#39; alt=&#39;各种 Dashboard&#39; title=&#39;各种 Dashboard&#39;&gt;&lt;/p&gt;
&lt;p&gt;随便点开一个，如 &lt;code&gt;Drive Stats&lt;/code&gt;，可以查看相应 Dashboard 中的各种 Panel：&lt;/p&gt;
&lt;p caption=&#39;Drive Stats Dashboard&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/29c1c887-e773-40b5-9ea1-fb8c3cc703dd.webp&#39; alt=&#39;Drive Stats Dashboard&#39; title=&#39;Drive Stats Dashboard&#39;&gt;&lt;/p&gt;
&lt;p&gt;但是我们肯定想将多个这些预设的 Dashboard 中的 Panel 按照我们的需要聚合到一个新的 Dashboard 中，这里就需要用到上一步「Grafana 概念」中的 复制 Panel、复制 Variable（复制 JSON Model）的操作，各位可以自己配置符合自己需求的 Dashboard。&lt;/p&gt;
&lt;h2 id=&#34;五、其他&#34;&gt;五、其他&lt;/h2&gt;
&lt;p&gt;这里还有 Grafana 的其他一些使用问题，简单写一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置 Panel 标题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;点击 Panel 上方的 Edit 后在右侧修改 Title 即可：&lt;/p&gt;
&lt;p caption=&#39;修改 Panel 标题&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/c7de415f-98cb-40cd-aa6d-b49485ecb96b.webp&#39; alt=&#39;修改 Panel 标题&#39; title=&#39;修改 Panel 标题&#39;&gt;&lt;/p&gt;
&lt;p&gt;**地图不显示：**不多说，需要魔法上网环境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置自己的 Dashboard 为默认：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p caption=&#39;配置默认的 Dashboard&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/f3be5470-440c-42bf-a65c-4440b05c8e00.webp&#39; alt=&#39;配置默认的 Dashboard&#39; title=&#39;配置默认的 Dashboard&#39;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何在 Dashboard 中，鼠标 Hover 其中一个 Panel 查看数据的时候，另一个 Panel 也对应显示相关时间点的数据？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个场景比较常用的是，鼠标 Hover 在折线图 Panel 的驾驶信息上查看车速的时候，想要同步在另一个地图 Panel 上查看在地图上的对应位置。可以通过设置 Dashboard 来解决，下图设置为 第二个即可（默认是第一个）：&lt;/p&gt;
&lt;p caption=&#39;&#39;&gt;&lt;img src=&#39;https://static.xheldon.cn/img/in-post/2023/the-use-of-teslamate/4099d485-a478-4553-a9a5-36beb941f5e8.webp&#39; alt=&#39;&#39; title=&#39;&#39;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安全性？&lt;/strong&gt;：TeslaMate 是国外开源软件，安全性是可以保证的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;换机器如何迁移数据？&lt;/strong&gt;：这个可以查看 TeslaMate 的文档，有详细说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公网如何访问 Grafana？&lt;/strong&gt;：这就需要用到 DDNS 了，这个自行摸索。&lt;/p&gt;
&lt;p&gt;**究极提醒：**修改 Panel 后记得点击右上角的 Save。&lt;/p&gt;
&lt;p&gt;**如何定时刷新 Dashboard：**在 Dashboard 右上角可以设置刷新间隔，一般用来放到一个大的显示屏上，全天实时查看数据变化用的。&lt;/p&gt;
</description>
            <pubDate>Wed, 06 Sep 2023 00:00:00 +0000</pubDate>
            <link>https://www.xheldon.com/life/the-use-of-teslamate.html</link>
            <guid isPermaLink="true">https://www.xheldon.com/life/the-use-of-teslamate.html</guid>
            
                <category>生活</category>
            
                <category>经验</category>
            
                <category>使用体验</category>
            
                <category>折腾</category>
            
                <category>特斯拉</category>
            
                <category>车</category>
            
                <category>TeslaMate</category>
            
            
                <category>life</category>
            
        </item>
        
    </channel>
    </rss>