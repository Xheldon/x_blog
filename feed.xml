<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xheldon Blog</title>
    <description>The Answer to Life, the Universe and Everything is...</description>
    <link>https://www.xheldon.com/</link>
    <atom:link href="https://www.xheldon.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 30 Dec 2022 23:04:45 +0800</pubDate>
    <lastBuildDate>Fri, 30 Dec 2022 23:04:45 +0800</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>基于 Craft 插件的博客发布工作流介绍</title>
        <description>&lt;p&gt;此博文为视频，发布在：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Youtube：&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/6En0qS_evH8?rel=0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bilibili：&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;embed-responsive embed-responsive-16by9&quot; style=&quot;border-bottom: 1px solid #ddd;&quot;&gt;&lt;iframe src=&quot;//player.bilibili.com/player.html?bvid=BV1Me4y1g7bW&amp;amp;high_quality=1&amp;amp;as_wide=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;这里额外再补充一点：&lt;/p&gt;

&lt;p&gt;视频中提到的 XHelper.app 基本是这个仓库：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Xheldon/craft_publish_ci&quot; target=&quot;_blank&quot;&gt;GitHub - Xheldon/craft_publish_ci: 专门用于接收 Craft 文件然后拉取其图片转存到 cos，而 markdown 转发到 x_blog_src 的 ci 仓库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;的 Apple Script本地化版，因为最终执行的也是 nodejs 的代码，只是利用 AS 实现了响应了自定义 scheme 链接的效果。&lt;/p&gt;

&lt;p caption=&quot;XHelper.app 的核心代码&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/workflow-of-blog-publish-base-of-craft/9585A422-AAF2-43F9-9691-9804CE43A0C0_2.png&quot; alt=&quot;XHelper.app 的核心代码&quot; title=&quot;XHelper.app 的核心代码&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体为什么不用 Github Action 处理而将这个过程本地化的原因，以及 Apple Script 相关入门介绍我当时还写了个博客，见 &lt;a href=&quot;/tech/applescript-simple-use.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

</description>
        <pubDate>Fri, 30 Dec 2022 22:50:55 +0800</pubDate>
        <link>https://www.xheldon.com/tech/workflow-of-blog-publish-base-of-craft.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/workflow-of-blog-publish-base-of-craft.html</guid>
        
        <category>技术</category>
        
        <category>Craft</category>
        
        <category>视频</category>
        
        <category>工作流</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>【游戏时间】战神系列之四</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;不像很多「普通人家」的孩子，从小就能拥有一台「次时代」主机。长这么大第一次拥有自己的游戏主机是工作了几年之后。既然买都买了，按照我的人设，不记录点什么就白买了，遂成此系列。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意，内容有战神4大量剧透和战神5部分剧透，结尾有战神6、7的猜想。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;战神的前作我没有玩儿过，因为据说是运行在 PSP 或者 PS3 上的游戏。我上手就是从战神 4 开始的。&lt;/p&gt;

&lt;p&gt;奎托斯——人称「奎爷」的出身是一名斯巴达勇士，是到处播种的宙斯与人间女子的私生子，一名半神。大家都说战神4中的虽然奎托斯老了，但是眉清目秀了很多，我就找了找他过去的样子：&lt;/p&gt;

&lt;p caption=&quot;战神4之前的奎托斯&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/84791362-F962-4CF5-877B-F13C5DF8A2A9_2.png&quot; alt=&quot;战神4之前的奎托斯&quot; title=&quot;战神4之前的奎托斯&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和现在的样子对比了一下：&lt;/p&gt;

&lt;p caption=&quot;战神四中的奎托斯&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/F07B98C7-5EA3-4A32-A324-5998D9342D5B_2.png&quot; alt=&quot;战神四中的奎托斯&quot; title=&quot;战神四中的奎托斯&quot; /&gt;&lt;/p&gt;

&lt;p&gt;嗯，除了纹身之外，不能说一模一样，只能说毫无关系，不过确实慈祥了许多。&lt;/p&gt;

&lt;p&gt;顺便说一下，战神4之前的系列&lt;del&gt;因为没有带小孩子出场所以&lt;/del&gt;有黄暴情节，比如跟性爱女神「阿佛洛狄忒」那段；但是在战神4中就是一本正经的杀怪过关了。&lt;/p&gt;

&lt;p&gt;另外奎托斯身上的纹身也是有由来的，是被他意外杀死的妻女的骨灰附着在身上形成的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;一开始我并不清楚奎托斯（主角）的过去，也不知道他都干了啥。开场看到老婆死了，然后儿子啥也不会，所以奎托斯开始教儿子狩猎，我寻思这游戏为啥要有个儿子在一边叨叨叨的，一个人干不行吗？&lt;/p&gt;

&lt;p caption=&quot;战神4中的奎托斯之子阿特柔斯&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/56A1AFD4-BD9B-4953-BC03-CF64BC6390AD_2.png&quot; alt=&quot;战神4中的奎托斯之子阿特柔斯&quot; title=&quot;战神4中的奎托斯之子阿特柔斯&quot; /&gt;&lt;/p&gt;

&lt;p&gt;老婆说是巨人族的（但是为啥身体就这么大点？），叫「菲」也就是北欧神话中战神「洛基」他妈「劳菲」，而洛基是劳菲给她儿子起的名字，奎托斯给他儿子起的名字叫「阿特柔斯」跟希腊神话中的战神「阿依瑞斯」很像是吧？前作中奎托斯干死了阿依瑞斯，自己做了战神。话说这两口子给儿子起名能不能统一一下？不过这可能是一个传统，因为劳菲给自己老公奎托斯也起了个名字叫「法布提」，在北欧神话中也是一个巨人，洛基的父亲。&lt;/p&gt;

&lt;p&gt;奎托斯准备按照她老婆生前的遗愿，把她的骨灰撒在世界（里面是九界）的最高峰上，所以整个游戏就是围绕这个目的来进行的，谁阻挠这个目的就干谁，真正的「人挡杀人，佛挡杀佛」。&lt;/p&gt;

&lt;p&gt;说到巨人族，后来查了查相关的希腊神话资料，巨人族是由最古老的神——大地之母盖亚（话说中国神话中的大地之母是女娲）和她创造的儿子——乌拉诺斯生的，希腊神不知道为啥有乱伦和有儿子弑父的传统，有够变态的，所以这游戏以及整个希腊神话背景的游戏就别想进国行PS了。&lt;/p&gt;

&lt;p&gt;接着有个小个子来找事儿，当场扭断脖子干死（当然后来没死）。小个子叫「巴德尔」，是希腊神话中的光明之神，象征着太阳，他的死会引起「芬布尔之冬」，这也是北欧神话中的重要事件（就好比「诸神黄昏」事件一样。&lt;/p&gt;

&lt;p caption=&quot;战神4中的巴德尔是个天生欠揍的神&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/FB51C6B1-E38C-4A33-9DA4-BD67EF016F94_2.png&quot; alt=&quot;战神4中的巴德尔是个天生欠揍的神&quot; title=&quot;战神4中的巴德尔是个天生欠揍的神&quot; /&gt;&lt;/p&gt;

&lt;p&gt;巴德尔没有痛觉（有人说是没有感觉，不过我想他连吃饱没吃饱、屎拉没拉干净都不知道没感觉的话就有点扯了，所以不对，应该就是没有痛觉而已），受伤后会很快恢复（算是九尾之力了），这个能力并不是天生的，而是爱子心切的老母求，北欧神话中的爱情与魔法的神——芙蕾雅求来的。当初儿子出生的时候看他幼小可怜又无助，加上关于诸神黄昏中的预言——巴德尔会是诸神黄昏中第一个死掉的神，于是她走遍九界，要求所有她遇到的生物都发誓不能够伤害他。也因此，九界没有任何东西能够伤害他，但是唯独一个叫做「槲（hu）寄生」的东西，被她的老母亲给忘了，于是后来被这东西给干死了。&lt;/p&gt;

&lt;p caption=&quot;槲寄生&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/B5F487CB-B1DA-47BB-91CC-02AFE23511DC_2.png&quot; alt=&quot;槲寄生&quot; title=&quot;槲寄生&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实巴德尔来找奎托斯是想按照奥丁的指示杀死每一个巨人的，至于为啥要这么做，别问，问就是预言说的。预言说巨人族会将奥丁所在的阿萨神族杀光，会引起诸神黄昏，所以奥丁让他的两个儿子，雷神和巴德尔，简单粗暴杀光巨人族就好了。&lt;/p&gt;

&lt;p&gt;另外，因为没有痛觉，他非常想感受痛是什么滋味，所以算是个 M，受虐狂。巴德尔也因为感受不到疼痛，又死不了，所以非常怨恨自己亲妈芙蕾雅，甚至想杀了自己亲妈（这些神话的神都TM什么德行？）。&lt;/p&gt;

&lt;p&gt;暂时击退了巴德尔后就赶紧出发了，然后儿子打猎的时候射到了一头猪，于是就遇到了「风韵犹存的&lt;del&gt;俏寡妇&lt;/del&gt;」芙蕾雅（我以为是寡妇其实不是，老公就是奥丁那个老头子，可恶的奥丁，该死！），一开始自称是女巫，我也不知道就跟着剧情走了，后来才知道她也是个神，属于北欧神话中的华纳神族。是爱情与魔法的女神：&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/1DEFDC70-07CB-4681-A2E2-6C660A6FF127_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里也就知道，北欧存在两个神族和三个半神，阿萨神族，为首的就是奥丁；和华纳神族，为首的是海洋之神尼奥尔德（没出现过）。当时俩&lt;del&gt;帮派&lt;/del&gt;神族打的不可开交，后来用和亲的方式停战了。按理说和亲停战一般都是一方的王子迎娶一方的公主，但是北欧神话再次与众不同起来，他是阿萨神族的老大奥丁娶了华纳神族的芙蕾雅（芙蕾雅是算是质子），然后阿萨神族是把奥丁的低智商（字面意思）弟弟弗雷（没有出场）和智慧巨人密米尔（后面有出场）送给华纳神族作为质子。除了这两个神族外还有三个半神族，分别是巨人、精灵和矮人。其中，矮人是众多神器的制造者，如利维坦之斧、雷神之锤都是矮人制造的。&lt;/p&gt;

&lt;p&gt;这里也遇到了两个矮人，在游戏中的作用就是为奎托斯的武器升级和推动剧情发展和支线人物的，比较搞笑的是其中一位矮人叫辛德里，居然有严重的洁癖，要知道矮人都是怕光而且生活在肮脏的地下的。他解释到是因为有一次遇到了一位华纳神族的女巫，她用魔法让辛德里看到了肉眼看不到的细菌，从那以后他就受不了了，因为他知道脏东西上面都爬满了数不清的细菌微生物（这位华纳神族的女巫考虑学医吧，魔法太好用了，都不用显微镜）。女巫告诉他橡木可以阻止细菌的繁衍和传播，于是这家伙把所有工具的把柄都用了橡木。&lt;/p&gt;

&lt;p&gt;值得一提的是路上会遇到一些乌鸦（叫渡鸦）和提尔的神殿、提尔的壁画之类的。这里的渡鸦就是奥丁的化身，奥丁之眼，因此奥丁也被叫做乌鸦神。奥丁出场或者瞬移都是一大群渡鸦围绕着他然后就消失不见。在北欧神话中，奥丁肩膀有两只渡鸦，叫福金和雾尼，分表代表思想和记忆。&lt;/p&gt;

&lt;p&gt;而提尔，则是北欧神话中的战神。但是刚才不是说洛基才是吗？因为洛基是后来才成战神的。北欧神话中洛基是诡计之神。&lt;/p&gt;

&lt;p&gt;上面遇到芙蕾雅的事件是儿子射到了一头猪，这个猪也是有名字的，叫「希尔帝斯维尼」是芙蕾雅的好朋友（随从），在战神5中变成人有出场。&lt;/p&gt;

&lt;p&gt;芙蕾雅一下就看出来奎托斯是个神以及儿子并没有意识到自己是神的事实，然后告诉他你不告诉你儿子真相的话是不对的，他早晚得知道。儿子可能是从小没妈，对芙蕾雅很有好感，这也为后来战神5中阿特柔斯单独找她，芙蕾雅却没杀他做了铺垫。然后奎托斯一行人离开了芙蕾雅后，来到了九界之湖，之后的剧情基本都是在这里。&lt;/p&gt;

&lt;p&gt;九界之湖我搜了一下在希腊神话体系中没有什么故事，应该只是杜撰的一个地方，说是九界的「游客集散地」，从这里可以通往九界的任意一个国度。因此这里有很多神的雕塑和神殿，也有很多支线剧情如渴望亲自见神一面却被神杀死了儿子于是决定弑神却没能做到而含恨西北的人类交代的任务等。&lt;/p&gt;

&lt;p&gt;为什么是九界而不是十界、十八界呢？因为在北欧神话中，世界都在一棵叫做「世界之树」的上面，九个世界分别就位于这棵大树的九个地方，分别为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;米德加尔德，人类居住的世界。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;阿斯加德，阿萨神族的国度，位于在天上的太阳和月亮之间，与人类世界可经过彩虹桥想通，位于世界之树的最上层。看到彩虹桥，是不是想到了漫威雷神里面的彩虹桥，没错，都是同一个神话背景的东西。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;海姆冥界，亡灵之国，位于世界之树的最下层。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尼福尔海姆，迷雾之国，冰天雪地的国度，病死及老死者的归宿，位于北方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;穆斯贝尔海姆，火之国，位于南方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;约顿海姆，巨人之国，位于东方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;华纳海姆，华纳神族的国度，位于西方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;亚尔夫海姆，光精灵的国度，位于人类世界和阿斯加德之间。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;尼德威阿尔，黑暗精灵或侏儒的国度，位于人类世界和冥界之间。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在九界之湖中遇到了世界之蛇耶梦加得——不得不说这名字听上去像是佛教里面的名字。在北欧神话中，耶梦加得是北欧战神洛基（就是奎托斯的儿子阿特柔斯在北欧的名字）的儿子，它是从未来的诸神黄昏时间穿越过来的——这是后来的智慧之神密米尔说的，北欧神话中耶梦加得的宿敌就是雷神索尔。&lt;/p&gt;

&lt;p&gt;世界之蛇躺在九界之湖里面，引得湖面上升，盖住了一些地方的入口，后来的剧情世界之蛇起身离开了，湖面水位因此下降，解锁了更多支线任务和剧情，从中可以看出蛇有多大。&lt;/p&gt;

&lt;p caption=&quot;世界之蛇耶梦加得&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/AA604C27-D76C-4F79-9CDE-E619E106EDD0_2.jpeg&quot; alt=&quot;世界之蛇耶梦加得&quot; title=&quot;世界之蛇耶梦加得&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后他们继续走，爬山想去山上，但是遇到了一团黑雾，过不去了&lt;/p&gt;

&lt;p caption=&quot;黑色的迷雾不知道是啥过不去&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/74932127-C234-4EEF-B335-0ABA1DFD5E64_2.png&quot; alt=&quot;黑色的迷雾不知道是啥过不去&quot; title=&quot;黑色的迷雾不知道是啥过不去&quot; /&gt;&lt;/p&gt;

&lt;p&gt;于是才知道，九界之湖的水中央就是提尔的神殿，里面有穿越九界国度的彩虹桥。于是通过彩虹桥，他们去精灵国度拿到光源来驱散迷雾，当时精灵国正在内斗，奎托斯秉着互不干涉原则不参与光精灵和暗精灵之间的战争，说他只要那个光源就行了，别的事儿不管。话虽这么说，但是最后还是帮光精灵干掉了暗精灵的 BOSS 取得了战争的胜利，然后顺利拿到光源继续爬山。&lt;/p&gt;

&lt;p caption=&quot;这暗精灵一看就不像正派啊&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/DFF90B48-7088-4C03-8FE6-DEF1825788C2_2.png&quot; alt=&quot;这暗精灵一看就不像正派啊&quot; title=&quot;这暗精灵一看就不像正派啊&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;拿到光源之后的奎托斯遇到了回去的光精灵&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/4D895C0C-82A1-4946-AEBC-6B19C2A8A0D1_2.png&quot; alt=&quot;拿到光源之后的奎托斯遇到了回去的光精灵&quot; title=&quot;拿到光源之后的奎托斯遇到了回去的光精灵&quot; /&gt;&lt;/p&gt;

&lt;p&gt;暗精灵 BOSS 死之前说「你不知道你的做法意味着什么」，我还以为会有什么伏笔，比如说其实长相丑陋的暗精灵才是正义被欺负的一方，但事实是我想多了，直到最后啥伏笔也没发生，无语子。&lt;/p&gt;

&lt;p&gt;光精灵这里应该只是简单的拉长剧情的，跟希腊神话没什么关系，所以也没什么希腊神话中的背景故事和人物介绍的。&lt;/p&gt;

&lt;p&gt;然后在山顶遇到了之前的巴德尔，跟另外两个也是雷神儿子的饭桶曼尼和摩迪。不知道在说啥，但是当时没打，等他们走后父子二人才出来，这里遇到了智慧之神密米尔，被奥丁囚禁了 100 年，想请求奎托斯父子解救一下他，他可以帮指路去巨人国度，但是他被嵌入到树里面跟树融为一体抠下不来，怎么办呢？&lt;/p&gt;

&lt;p caption=&quot;待会儿要被砍头的密米尔&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/D5B8BF1F-FE2D-43B7-BDE2-79A2683D5A51_2.png&quot; alt=&quot;待会儿要被砍头的密米尔&quot; title=&quot;待会儿要被砍头的密米尔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个剧情「程心」熟啊，方法就是→ 「只送大脑」&lt;/p&gt;

&lt;p caption=&quot;魔鬼配图&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/D3AC0F53-D1E2-40F7-B092-E374221AE4B2_2.png&quot; alt=&quot;魔鬼配图&quot; title=&quot;魔鬼配图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然只送大脑夸张了，不过类似，只需要头就行了，于是他的头被砍下来，然后送到芙蕾雅那里给复活了——当然，复活后也只有头，从此他变成了把头系到裤腰带上的人（字面意思）他之后一直被奎托斯绑在腰间带着，我常常想，奎托斯放屁岂不是第一个熏到他？&lt;/p&gt;

&lt;p caption=&quot;挂在腰间的密米尔&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/2955CCEC-5B1E-436D-BC5B-1A269E176827_2.png&quot; alt=&quot;挂在腰间的密米尔&quot; title=&quot;挂在腰间的密米尔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;密米尔是北欧神话中的巨人，负责看管智慧之泉，奥丁要来获取知识和智慧，最终他以牺牲一只眼睛为条件成功取得智慧。这也正是奥丁是独眼龙的原因。&lt;/p&gt;

&lt;p&gt;密米尔说九界最高峰根本不是他被困的那个山，最高山在巨人的国度约顿海姆。但是需要个什么东西（忘了），于是去找那个东西，遇到了索尔的两个儿子曼尼和摩迪。北欧神话中他们俩会在诸神黄昏后，雷神索尔跟耶梦加得同归于尽后继承雷神之锤，但是在战神4中，哥哥曼尼当场被干死了，摩迪赶紧逃跑了。&lt;/p&gt;

&lt;p&gt;之后儿子旧疾复发，需要亡灵国度赫尔海姆的一个看守者的心脏，来都来了，都是为了孩子，去就是了。但是在亡灵国度，现在用的这个武器「利维坦之斧」因为是蕴含冰冻魔法，在本来就是寒气逼人的亡灵国度不好使，得用本来就来自冥界的武器「混沌双刃」才行。&lt;/p&gt;

&lt;p caption=&quot;利维坦之斧&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/BF92D26C-6AF9-43A8-9536-82A9D3923D3C_2.png&quot; alt=&quot;利维坦之斧&quot; title=&quot;利维坦之斧&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说到利维坦之斧，它是由上面的矮人兄弟打造的，最开始是给劳菲，也就是奎托斯老婆在用，后来老婆死了他就用了，蕴含冰冻魔法。而「利维坦」这个名字，在北欧神话中并不存在，这个名字有迹可循的地方是在圣经中，意思是裂缝，是一头象征邪恶的巨大海怪。&lt;/p&gt;

&lt;p caption=&quot;战神前作中的混沌双刃&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/89385782-CB52-40DF-8A9D-F6DBD46C83D8_2.png&quot; alt=&quot;战神前作中的混沌双刃&quot; title=&quot;战神前作中的混沌双刃&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这段因为我没有玩过战神的前作，因此没什么感觉，于是搜了搜战神的前作相关剧情。原来在战神4之前，奎托斯杀光希腊众神的时候用的都是混沌双刃，后来为了过平凡的日子，发誓不再使用它，于是收藏了起来。&lt;/p&gt;

&lt;p caption=&quot;据说老玩家看到这个场景的时候老泪纵横&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/0CD92A68-DCB7-456B-B8DD-4C5712730CE9_2.png&quot; alt=&quot;据说老玩家看到这个场景的时候老泪纵横&quot; title=&quot;据说老玩家看到这个场景的时候老泪纵横&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以当奎托斯拿到混沌双刃的时候，外面的天气和背景音乐变的十分的恐怖，这个时候最后被他干死的希腊智慧女神雅典娜也若隐若现的出现在他的面前喊他：怪物！&lt;/p&gt;

&lt;p caption=&quot;雅典娜凡性的提醒&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/01BF0463-899F-4C45-8330-0E288F05C529_2.png&quot; alt=&quot;雅典娜凡性的提醒&quot; title=&quot;雅典娜凡性的提醒&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是奎托斯并没有什么退缩，还是拿出了弑神的武器——混沌双刃，毕竟都是为了孩子嘛。&lt;/p&gt;

&lt;p caption=&quot;战神4中的混沌双刃&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/77DC8423-9FE6-4382-9CCD-3B7759337202_2.png&quot; alt=&quot;战神4中的混沌双刃&quot; title=&quot;战神4中的混沌双刃&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后奎托斯就拿到了所需要的心脏，治好了儿子的病——这里其实孩子的病是不用治的，因为神是不会生病的，也不会病死，但是为什么儿子阿特柔斯就病了都走不动路了呢？因为他不知道自己是神啊！（唯心主义了算是，不觉得自己是神就不是神了？连神的基本属性不生病都没了，离谱），于是奎托斯为了救儿子，就听从了芙蕾雅的建议，告诉了儿子自己是神，他也是神的真相。&lt;/p&gt;

&lt;p&gt;知道自己是神之后，儿子阿特柔斯于是有点得意忘形，问自己是什么神？奎托斯说不知道，需要自己发掘，每个神都是独一无二的存在。好死不死，这里遇到了之前被干跑的摩迪，也就是索尔之子。&lt;/p&gt;

&lt;p caption=&quot;会用闪电的摩迪&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/465DDDDA-B586-4ADF-948F-462ED878CC8E_2.png&quot; alt=&quot;会用闪电的摩迪&quot; title=&quot;会用闪电的摩迪&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过此时他的状态不太好，因为他之前由于没打过奎托斯，而且自己兄弟死了自己却活着回来太丢人，被奥丁胖揍了一顿打了个半死，一点斗志都没了，而此时阿特柔斯作为新神斗志正盛，于是「彼竭我盈故克之」，不顾老父亲的反对直接把摩迪给杀了，还说自己是神，想干嘛就干嘛，但是奎托斯一直认为身为神就是一种诅咒。&lt;/p&gt;

&lt;p&gt;这里奎托斯十分生气，说：弑神是要付出代价的！儿子说：你怎么知道的？！玩家内心OS：你还是不知道的好！&lt;/p&gt;

&lt;p&gt;然后此时巴德尔又出现了，一顿打斗把通往最高山巨人国度的传送门给弄坏了，最后只好去巨蛇身体内拿到一个东西才能从九界之湖开启去巨人国度的通道，于是就进到了耶梦加得身体内。&lt;/p&gt;

&lt;p&gt;然后拿到东西出来后，又又又碰到了巴德尔，于是又打了起来。事不过三，因为之前阿特柔斯意外获得了槲寄生做的箭矢，于是阿特柔斯一无所知的把槲寄生做的箭——唯一能伤害巴德尔的东西——射向了巴德尔，于是巴德尔领了盒饭。&lt;/p&gt;

&lt;p caption=&quot;无效攻击中的阿特柔斯&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/6C3B65C8-9BFD-48FA-85E7-01FDA7B12415_2.png&quot; alt=&quot;无效攻击中的阿特柔斯&quot; title=&quot;无效攻击中的阿特柔斯&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然巴德尔十分恨自己妈芙蕾雅，甚至在这里要掐死她，奎托斯是为了救芙蕾雅才杀了巴德尔的，但是芙蕾雅还是因为杀了巴德尔而十分的憎恨奎托斯，誓要杀了他，哎，这梁子算是结下了。&lt;/p&gt;

&lt;p caption=&quot;奎托斯杀巴德尔时说：人要学会成长&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/91753C16-BE95-42B9-B669-DA299C6870DB_2.png&quot; alt=&quot;奎托斯杀巴德尔时说：人要学会成长&quot; title=&quot;奎托斯杀巴德尔时说：人要学会成长&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后奎托斯对自己儿子坦白了自己的过去。在知道了自己爹这么猛，杀了很多神之后，儿子乖了许多（其实并不是因为这个啦）。&lt;/p&gt;

&lt;p&gt;最终，上到了巨人国度约顿海姆的最高峰，洒下了骨灰。在去的路上还看到了预言壁画，有一幅画上画的是一个战神死在了儿子身边，但是这幅画被挡住了儿子没看到，但奎托斯看到了。难道说儿子杀爹是希腊神话绕不过去的坎？&lt;/p&gt;

&lt;p&gt;这一段撒骨灰的景色比较壮观，最高峰向远处看去，非常多的巨人的尸体，垒起来比山都高，一具挨着一具。这就是奥丁的杰作，也是母亲劳菲的目的：让他们知道奥丁对巨人族做过的事情，绝不原谅。&lt;/p&gt;

&lt;p caption=&quot;远处都是山一样的巨人的尸体&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/BA1A7CF4-F06F-4BE0-9485-BA17104B1C7E_2.png&quot; alt=&quot;远处都是山一样的巨人的尸体&quot; title=&quot;远处都是山一样的巨人的尸体&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过后来在战神5中才知道，聪明的巨人族其实并不是死光了，而是自杀了，然后灵魂躲了起来，为后来复活有了个借口。而耶梦加得就是靠被阿特柔斯在战神5中将一个巨人的灵魂注入一条死去的巨蟒而创造的。&lt;/p&gt;

&lt;p&gt;在游戏的最后，时间显示是在五年后的一天，奎托斯突然在睡梦中被惊醒，连忙出门查看，一个胖子带着帽子站在门口，奎托斯问他是谁，胖子没有说话，亮出了自己标志性的武器——一把带闪电的锤子：雷神之锤，至此全游戏完毕。&lt;/p&gt;

&lt;p caption=&quot;雷神之锤&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/30CE910E-60B1-4B3A-97FC-3AB54706F197_2.png&quot; alt=&quot;雷神之锤&quot; title=&quot;雷神之锤&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;在战神4中，九界中的一些国度被奥丁封锁因此无法前往，预计在战神5中会根据剧情开放，期待一下。&lt;/p&gt;

&lt;p caption=&quot;灵活的胖子雷神索尔&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/612C75AA-085D-47AA-A694-69C41561D1E0_2.png&quot; alt=&quot;灵活的胖子雷神索尔&quot; title=&quot;灵活的胖子雷神索尔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外据我目前云的战神5内容来看，会出场的有奎托斯父子就不说了，奥丁、索尔、芙蕾雅、芙蕾雅的猪变的人、战神提尔（提尔的著名特点是断了一只手臂）、巨狼芬里尔、俩矮人兄弟、密米尔（的头）、安格尔伯达（北欧神话的女巨人，北欧神话中洛基的外遇对象，他们俩的孩子会带来诸神黄昏）、海姆达尔（北欧神话中彩虹桥的操作员，光之神、破晓之神），其他的人物就没注意了。&lt;/p&gt;

&lt;p caption=&quot;安格尔伯达&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/6821BF6F-EB36-4668-8A48-DE700F4B1D4D_2.png&quot; alt=&quot;安格尔伯达&quot; title=&quot;安格尔伯达&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;但我还是更喜欢白人，游戏而已别政治正确了行吗？&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/7AE7E522-625A-4FD5-B549-EF745D6FF685_2.png&quot; alt=&quot;但我还是更喜欢白人，游戏而已别政治正确了行吗？&quot; title=&quot;但我还是更喜欢白人，游戏而已别政治正确了行吗？&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后的最后，战神5结尾，奎托斯干掉了奥丁，成了新的北欧神王，重建九界秩序。而儿子去寻找之前说的自杀的躲起来的巨人族的灵魂而来到了埃及（因为儿媳妇儿女朋友安格尔伯达有埃及背景，在游戏中是个黑人女孩）。战神6奎托斯寻子去埃及屠杀众神也不是不可能。&lt;/p&gt;

&lt;p&gt;战神7中，奎托斯也许会来到神秘的东方，来寻找真正的大乘佛法以寻求自己内心的平静，顺便为儿子追寻长生不老之术，然后遇到了以「维稳」为名残暴统治众生的玉皇大帝等一众神；或者遇到了以极乐为诱饵，实则以苍生为食纵容手下杀人放火的西天佛祖；亦或者遇到了宣扬殉教后能升天堂，有8万奴隶和72个一直常为处女的新娘服侍的真主（不是我说瞎说的，自己去搜72处女）？不堪忍受比北欧神残暴和希腊神乱伦+弑父还恶心的奎托斯愤而全灭这些恶心又虚伪的东方神明？&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/269D345E-04FD-4ED7-9F55-2C96C8D0ECD8_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;盲猜奎托斯会和「&lt;del&gt;风暴&lt;/del&gt;岩石降生孙悟空、不焚者、&lt;del&gt;弥林的女王&lt;/del&gt;花果山的猴王、水帘洞的&lt;del&gt;卡丽熙&lt;/del&gt;洞主、定海神针的主人、齐天大圣、天宫大闹者暨十万天兵毁灭者、斗战胜佛，石之猴」并肩作战，科科~&lt;/p&gt;

&lt;p caption=&quot;连画风都跟奎托斯很像&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/god-of-war-4/CC5A9AD5-F908-492B-8664-AC9582ED3502_2.png&quot; alt=&quot;连画风都跟奎托斯很像&quot; title=&quot;连画风都跟奎托斯很像&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Nov 2022 11:51:11 +0800</pubDate>
        <link>https://www.xheldon.com/life/god-of-war-4.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/life/god-of-war-4.html</guid>
        
        <category>生活</category>
        
        <category>游戏</category>
        
        <category>战神</category>
        
        <category>希腊神话</category>
        
        <category>北欧神话</category>
        
        <category>奎托斯</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>家庭网络折腾之路由器</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;花了一周时间研究了一下路由器，浪费的时间如果不记录一下就白白浪费了，遂有此文。&lt;/p&gt;

&lt;p&gt;之前写过&lt;a href=&quot;/tech/my-home-network-2022.html&quot;&gt; 我的家庭网络拓扑结构&lt;/a&gt;，当时使用的路由器是联通宽带送的中兴 WiFi6 双频，速度说实话也还可以，有线大概能到 500M，但是无线就比较差了，把路由器放到客厅，卧室信号就不满格，厕所干脆就没信号了，而且媳妇儿经常抱怨说淘宝、抖音，刷着刷着打不开（断流？）。因此想趁着双十一，考虑入手一款路由器。&lt;/p&gt;

&lt;h2 id=&quot;我的需求&quot;&gt;我的需求&lt;/h2&gt;

&lt;p&gt;有了意向，第一步就是明确需求，我列了一下新路由器必须要满足的地方：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;信号强。这也是这次换路由器的原因。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;5 个网口，且均为千兆+。家里对网速有要求的有 Mac、PS、Swtich，都必须插网线，再加上 R4S 软路由，这就四个网口了，因此路由器必须有第五个网口才能接光猫。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;稳定性（低可玩性）。因为已经有 R4S 软路由了，因此其他花里胡哨的功能如内置 UU 加速器、可刷 Openwrt 等路由器附加功能就都不是必须的了，甚至，可玩性高意味着价格高，可玩性高还意味着不稳定。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WiFi 6。这是趋势，就不多说了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;500 以内的预算。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;技术调研&quot;&gt;技术调研&lt;/h2&gt;

&lt;p&gt;基于以上需求，开始了路由器的研究。&lt;/p&gt;

&lt;p&gt;虽然我是做技术的，但是并不懂网络硬件，所想图简单省事儿，看到同事买了个 AX3000， 于是我也想买个小米路由器。看了一圈京东上的各种宣传加上论坛、百科，了解了一些基本概念，下面用大白话解释一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AX NNNN，其中「NNNN」表示的就是无线速率，所以如果你在网上搜索AX3000、AX5400、AX6000，会搜出来各种不同的品牌，也就是说这并不是某一款路由器的型号，而是标识着速率、档位，数字越大，价格越贵。另外 AX 表示的是使用了 IEEE 802.11AX 技术的路由器，也叫 WiFi6 路由器。AC 表示的是使用了 IEEE 802.11AC 技术的路由器，也叫 WiFi5 路由器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/DF84BD30-BBB9-4AD0-B78B-1F476F90E478_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;mesh 组网，基本就是局域网漫游的意思，就是你家比较大，300平（夸张了，100多平的时候也需要），一台路由器覆盖不完全，那就需要多台路由器，但是在不同的路由器之间进行切换的时候就需要先断开再连接，于是 mesh 组网应运而生。原理是多个路由器相互连接，数据共享，信号覆盖全面，因此你一开始连接其中一台路由器，然后走到另一台路由器的时候，网不会断。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2.5G/1G 网口，1G 就是 1千兆，表示这个网口能传输的最大带宽。目前家庭带宽普遍都是在500~1000以内的，太大的 10G 的网口仅存在于局域网的 NAS 传输，如果家里没有 NAS 需求等家庭影音需求，就没必要。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;链路聚合，WLAN 口链路聚合，说是可以同时插入两条网线，比如同时插入两条 500M 带宽的联通宽带，然后网速可以叠加；LAN 口链路聚合同理，我没这个需求，没研究。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/1F612049-D1F1-4678-B7F3-A57C939B0CF8_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;双频，就是 2.4G 和 5G 频段同时存在，5G 这么快为啥还需要 2.4G 呢？是因为有些旧设备和智能家居只支持 2.4G。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;160MHZ 频宽，WiFi6 才有的这个东西，说是更快，之前都是 80MHZ。我看了下中兴的那款，确实 5G 也才到 80MHZ，越大越好。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/86D19FCB-F1F2-4F41-801A-39376CEA0F8C_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4K QAM，没明白什么鬼说是能加快下载速度，但是目前说是只有小米手机有 20% 的提升，其他手机都不支持。&lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/557A4571-8D26-4562-9EBD-8DA7A2F3E560_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OFDMA 和 MU-MIMO，不知道什么东西，说是能降低多设备打游戏的延迟，奇怪的是 TP-Link 的这个选项默认是关闭的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/E6B29FAB-C3A7-4930-A5C1-A3FDBCE0329D_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;多核，说是核越多越好（不是废话嘛），提高加解密的速度，咱也不知道，问了大佬的意见，高通的芯片方案就比较成熟，别用什么博通、联发科的方案，都是垃圾。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;信号放大器，顾名思义，说是能放大信号用的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1G 超大内存，基本上内存大就表示可玩性强，因为内存大了，就可以变着法儿的折腾了，比如刷 Openwrt 机之类的，有些路由器只有 16M 内存，不存在可玩性（说的就是 XDR5480）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;USB 3.0 接口，路由器要 USB 接口，用来连接外置硬盘的，搞什么家庭文件传输。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;内置游戏加速器，基本都是跟网易 UU 合作，内置了游戏加速插件，可以在 Switch、PS5 联机的时候加速，不用单独再像我一样用软路由搞加速器了，本质是 VPN。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主动散热，就是加了个风扇，被动散热，就是啥也不加，散热靠天意。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IPV6，基本没用，路由器有这个功能也建议关闭，没普及的技术等于没有。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;回程，分有线回程和无线回程，mesh 组网需要的东西，说是用来提高传输效率和稳定性的，不懂。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/07ECFB04-C903-48AA-99D2-8835968488D2_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多频合一，就是 2.4G 和 5G 合为一个网络信号，设备连的时候先试试支不支持 5G，不支持就让它连 2.4G，这个看了一圈，都建议不要开，开了的话一些智障家居用不了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;技术选型&quot;&gt;技术选型&lt;/h2&gt;

&lt;p&gt;OK，以上是路由器购买的时候，商家宣传的一些内容，对于我来说实际是按我的需求来买的，对比了其他的路由器后，我买了TP-Link XDR5480，买它的时候有以下考虑：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;其实一开始是想买小米的，看了一圈它都是所有产品中相同价位用料最足和相同用料价格最便宜的。但是最后没买的原因有：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;鸡贼，旧的型号是 AX3600，下架了，说是搞了个 AX6000 的升级版，然后被人拆解后发现用料还不如 AX3600。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;只有四个 Lan 口，而且它的四个 Lan 口是共享的千兆的，离谱。加上小米的产品的其他尿性，当场放弃。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;可能是因为销量太大，因此我在各大平台上都看到有人说断流之类的，加上我同事买的 AX3000，也说有这个现象，但是他不确定是他家的网的问题还是路由器的问题，我秉持着宁可不买不可买错的原则，不买了！&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;对比上一代同定位机型硬件&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/6AEAAF56-6280-4259-9379-766209C1DF02_2.png&quot; alt=&quot;对比上一代同定位机型硬件&quot; title=&quot;对比上一代同定位机型硬件&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;再然后问了同事，他用的是传说中的华硕 AC86U，在 WiFi5 时代很能打，口碑不错，一个是因为华硕就是专业做路由器的，并不是像某些厂家贴牌代工之类的。另一个是因为华硕一般出品的都是高端路由器，上千的那种，所以给人一种很吊的印象，再加上其路由器可玩性很强，可以刷梅林、刷 Openwrt，因此由专业玩家圈传出来的口碑还是不错的。但是我最终没买的原因有：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;贵。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;可玩性太强，我不需要可玩性，因此由于可玩性而带来的附加缺点「贵」，就成了最大的障碍。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;华硕&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/EE73309D-B6BE-4E40-ACD5-4742D1EAD1A4_2.png&quot; alt=&quot;华硕&quot; title=&quot;华硕&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;后来逛各种帖子的时候，如 V2EX、acwifi 等，经常有人在推 xdr5480，而且我研究了一圈，决定下单了，原因如下：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;我特意搜了一圈，很少有看到说有问题的。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;TP-Link 老牌子了，之前都说他做低端市场，然后出 5480 是想打个翻身仗，因为该机器的 CPU 一般都是上千元机型上才有的，性能很强，而且 5G 信号非常强。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;可玩性低，可玩性低就表示稳定，我正需要的就是稳定。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;除了四个千兆 Lan 口外，额外带 SFP 接口，可以买猫棒直插光纤，或者当 2.5G 网口使用。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;不到 500 的价格，在预算以内。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lan 口可以作为 IPTV 口用，也就是说可以扔掉光猫了（当然我没这么做）。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;买！&lt;/p&gt;

&lt;p caption=&quot;买贵了，后来价格保护了 60块&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/FB076D86-7E45-49B9-83BB-6930571BD834_2.png&quot; alt=&quot;买贵了，后来价格保护了 60块&quot; title=&quot;买贵了，后来价格保护了 60块&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;继续折腾&quot;&gt;继续折腾&lt;/h2&gt;

&lt;p&gt;路由器到手之后，打开界面看了下，确实没什么好折腾的。不过这么强的路由器，什么也不做太可惜了，于是又开始了捣鼓。&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/210C2B71-DA81-4D73-A064-21F90B814979_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当前我的网络拓扑结构是，光纤入户插光猫，光猫是一级路由，然后分出来一个二级路由也就是现在买的这个 TP-Link 路由器，家里的设备都接的是 TP-Link 的无线/有线，但是仍然打开了光猫的 WiFi 功能，以便于网络故障的时候，可以连光猫的 WiFi 用来排查是路由器的问题还是光猫的问题。&lt;/p&gt;

&lt;p&gt;另外因为我没有路由翻墙的需求，因此将光猫的另一个千兆口（光猫有两个有线口，一个接二级路由了），接了索尼的电视，在上面装了安卓 TV 版的 Clash 看 YouTube，这个操作后来证明是很明智的，因为折腾路由的时候，可以保证电视是一直可用的。&lt;/p&gt;

&lt;h2 id=&quot;光猫-路由器连接方式&quot;&gt;光猫-路由器连接方式&lt;/h2&gt;

&lt;h3 id=&quot;名词解释&quot;&gt;名词解释&lt;/h3&gt;

&lt;h4 id=&quot;nat-地址转换&quot;&gt;NAT 地址转换&lt;/h4&gt;

&lt;p&gt;设备直接连接公网不行吗？为什么要NAT 地址转换呢？简单来说它存在的原因是，就是 IPV4 地址有限，因此运营商不会给你每家一个 IPV4 地址，所以你家里的上层网络其实还是个局域网，只不过是运营商的局域网。从你的设备发请求，请求经过路由器到光猫，需要一层 NAT 地址转换，然后从光猫到运营商的服务器又是一层 NAT 地址转换，但其实路由到光猫的这层转换这个过程是不必要的，下面说。&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/AB32DBA7-416B-4D17-B135-C603F6879C2D_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;网段&quot;&gt;网段&lt;/h4&gt;

&lt;p&gt;ipv4 中有四段（所以叫 v4），倒数第二个段不同即为不同网段，如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.0.1&lt;/code&gt; 其中倒数第二段一个是1一个是2就是不同网段，不同网段之间不能直接互相访问。&lt;/p&gt;

&lt;h4 id=&quot;dhcp&quot;&gt;DHCP&lt;/h4&gt;

&lt;p&gt;就是动态分配 ip 的服务，一个网段只能有一个这个服务，否则会冲突导致上不了网。&lt;/p&gt;

&lt;h3 id=&quot;光猫路由-路由器路由&quot;&gt;光猫路由-路由器路由&lt;/h3&gt;

&lt;p&gt;这个就是普通的默认模式，光纤插光猫，从光猫的 Lan 口出来一根线插路由器的 WLAN 口，形成一二级路由。&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/E0465A42-43AC-4158-8D21-FDDD9A007089_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;简单，不需要任何设置。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设备需要两级 NAT 地址转换才能到公网，会造成不必要的延迟。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;光猫路由-路由器-ap&quot;&gt;光猫路由-路由器 AP&lt;/h3&gt;

&lt;p&gt;就是将路由器当做光猫的信号放大器，可以将多个网络连接起来，可以两两连接。&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;简单，简单设置一下即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;光猫负载大，需要承担拨号、DHCP、NAT 等功能，浪费了路由器的性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;光猫路由-路由器桥接&quot;&gt;光猫路由-路由器桥接&lt;/h3&gt;

&lt;p&gt;跟 AP 模式差不多，也是用来放大光猫的信号的，其可以将多个网络连接起来，但是不能两两连接。优缺点同上。&lt;/p&gt;

&lt;h3 id=&quot;光猫桥接-路由器拨号&quot;&gt;光猫桥接-路由器拨号&lt;/h3&gt;

&lt;p&gt;就是光猫只作为光纤入户后，光信号转换成电信号的设备，其他的所有任务都交给性能更强的路由器。这也是我目前使用的方案。&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;性能差的光猫只负责光电转换（就是上面说的 SFP 猫棒的作用），不做其他作用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;家庭网络里面只有一个网段，方便管理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过申请公网 ip，加上路由器的端口映射（一般路由器都有这功能）方便外网管理局域网设备和软路由应用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;只有路由器一次的 NAT 地址转换，延迟更低，带宽跑满。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;略麻烦，需要找运营商改光猫的配置，如果像网上一样自己悄悄改完了，运营商会自动下发配置改回去，需要一点点网络基础。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;路由器直插光纤&quot;&gt;路由器直插光纤&lt;/h3&gt;

&lt;p&gt;这个就需要上面说的 SFP 猫棒了，可以直接插到这个猫棒上，然后猫棒插入路由器的 SFP 口，让路由器既做光电转换，又拨号。但是据说这样做的话，SFP 会很烫，而且把风险都集中到一台设备上不合理，于是我没有这么做，因为：可以，但没必要。另外需要注意的是，据说 XDR 5480 这台设备只能用 TP-Link 自己出的猫棒，网上买的华为的猫棒不能用，不知道真假。猫棒也分 2.5G 和 10G（万兆）的，越大越贵。&lt;/p&gt;

&lt;p caption=&quot;SFP 光口（猫棒）&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/7E5DC73E-42DB-40C0-992E-3252AB123DDB_2.png&quot; alt=&quot;SFP 光口（猫棒）&quot; title=&quot;SFP 光口（猫棒）&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;SFP 电口&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/C043F804-0595-4202-8BC1-72B5CE413FE1_2.png&quot; alt=&quot;SFP 电口&quot; title=&quot;SFP 电口&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;如何让路由器拨号&quot;&gt;如何让路由器拨号？&lt;/h3&gt;

&lt;p&gt;坐标北京联通。网上搜了一堆的帖子，都是比较旧的，当时还是可以找联通师傅要光猫的超级密码来修改光猫的配置，让其从路由模式变为桥接模式。&lt;/p&gt;

&lt;p&gt;还有的地区，死活不让光猫桥接。&lt;/p&gt;

&lt;p&gt;但是现在都 2022 年了，于是我打电话跟联通，以下是对话：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我：你好，我家宽带需要公网 ip。 客服回复：好的稍等，我给您转接技术专家坐席。 技术专家：你是要公网 ip 吗？ 我：是的。 技术专家：好的，我这边后台给你改一下，十分钟后你重启一下光猫就可以了。 我：好的谢谢。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;完事儿。&lt;/p&gt;

&lt;p&gt;改完了公网 ip，还要让光猫改桥接（忘了一起给人说了），于是我又给客服打了个电话：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我：你好，我家的光猫想桥接，我应该怎么做？ 客服：我给您约了维修师傅上门，明天八点半前联系您。 我：你们不能直接后台操作，然后我这边配置一下吗？必须要师傅上门吗？  客服：是的。 我：好的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第二天，师傅联系我：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;师傅：你是想改桥接是吧？ 我：是的，想外网访问局域网的设备和服务。 师傅：行，你等会儿，五分钟后我让后台给你改，我这边配置下发就行。 我：您不用上门吗？ 师傅：不用，有什么需要我上门的吗？你要搞桥接肯定懂这个呀，自己操作就行了。 我：我虽然懂，但是光猫上的一些设置不需要你们来操作吗？  师傅：不用，后台配置下发就行，光猫都不用重启，你就在路由器填光猫里面的那个宽带账号和密码就行，我这边配置改完了再联系你。 我：好的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;两分钟后，师傅联系我说，好了，于是我就直接在 TP-Link 的上网方式里面，选拨号上网，然后输入宽带账号密码拨号即可。宽带账号密码不知道的问联通师傅给你查，也可以进光猫查看，虽然里面的密码加密的，但是有 F12，改 input 元素的 type 即可，问题不大。&lt;/p&gt;

&lt;p caption=&quot;配置界面&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/ACC3C6BD-1248-48E4-A418-CE9EDAB86924_2.png&quot; alt=&quot;配置界面&quot; title=&quot;配置界面&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tp-link-的简单玩法&quot;&gt;TP-Link 的简单玩法&lt;/h2&gt;

&lt;p&gt;DDNS + 端口映射是唯一可以玩的，不过对我来说已经足够了，因为我有 R4S，在外网通过端口映射和 TP-Link 自带的 DDNS 服务，访问 R4S 的界面和其上的各种服务，非常方便。以下是 TP-Link 的设置。&lt;/p&gt;

&lt;h3 id=&quot;ddns&quot;&gt;DDNS&lt;/h3&gt;

&lt;p&gt;原理示意图：&lt;/p&gt;

&lt;p caption=&quot;示意图&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/6EF8D96C-F524-4208-9C6D-654ED16C6E5B_2.png&quot; alt=&quot;示意图&quot; title=&quot;示意图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;公网 ip 有了，但是运营商给你家宽带的 ip 地址并不固定，每次访问都要查 ip，如何方便的访问呢？答案就是 DDNS。路由器肯定知道你家的公网地址，然后再在路由器内将一个域名跟这个地址绑定一下，每次访问这个域名，就是访问最新的你家宽带的公网地址。&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/C0057015-EBE9-4C59-A281-BFDE21E4FB28_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://service.tp-link.com.cn/detail_article_2444.html&quot; target=&quot;_blank&quot;&gt;[云路由器] TP-LINK DDNS动态域名的使用方法 - TP-LINK 服务支持&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;虚拟端口映射&quot;&gt;虚拟端口映射&lt;/h3&gt;

&lt;p&gt;示意图：&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/A55C6EDD-239D-4B07-9B1D-2F1255FB42FF_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运营商为了安全，给你的公网 ip，一般是会封掉 web 服务常用的 80、8080 端口的，而且内网离会有多个服务分布在不同的端口，因此你需要端口映射，即从外网访问的端口，映射到内网中的端口，设置如下：&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/F9B87721-ED75-4A54-8BDC-E97D98C27373_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://service.tp-link.com.cn/detail_article_2441.html&quot; target=&quot;_blank&quot;&gt;[云路由器] 如何映射服务器到外网 - TP-LINK 服务支持&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/E071C9FF-3F98-4883-9E58-C137BD1A916C_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;实际应用&quot;&gt;实际应用&lt;/h2&gt;

&lt;p&gt;目前用到的有 qBittorrent 下载、FileBrowser 文件管理、Aria2 下载，阿里云盘我没有开放端口，因为毕竟只有在内网访问的需求:&lt;/p&gt;

&lt;p caption=&quot;qBittorrent用来bt下载&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/3484C433-2CA9-471C-9DBC-84A2B124DCA6_2.png&quot; alt=&quot;qBittorrent用来bt下载&quot; title=&quot;qBittorrent用来bt下载&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;有了FileBrowser可以抛弃网盘了&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/57B2FF81-7BEA-414B-B72F-12E30F4692C1_2.png&quot; alt=&quot;有了FileBrowser可以抛弃网盘了&quot; title=&quot;有了FileBrowser可以抛弃网盘了&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;Aria2下载工具&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/DAB8FBBA-A635-45AD-AA0E-B8DE4F132D71_2.png&quot; alt=&quot;Aria2下载工具&quot; title=&quot;Aria2下载工具&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aria2用来普通下载，可以代替 Chrome 浏览器默认的下载工具，多线程下载快的不是一点半点，相同资源对比：&lt;/p&gt;

&lt;p caption=&quot;Aria2下载速度&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/8B1970F4-35B8-44A3-90A6-F9D94BA3A977_2.png&quot; alt=&quot;Aria2下载速度&quot; title=&quot;Aria2下载速度&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;浏览器下载速度&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/E8B6B0AE-F316-4E7C-B0F6-45E68EFC02E0_2.png&quot; alt=&quot;浏览器下载速度&quot; title=&quot;浏览器下载速度&quot; /&gt;&lt;/p&gt;

&lt;p&gt;日常使用场景就是，媳妇儿让我下载的东西我下载好后，通过 FileBrowser 的分享给她，还可以设置分享链接有效期，非常方便：&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/home-network-router/D2560A89-D1C2-4208-AB08-D63DB4FC2492_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结束语&quot;&gt;结束语&lt;/h2&gt;

&lt;p&gt;网络拓扑的知识真的挺有意思的。在互联网刚诞生的阶段，谁也不会也想不到互联网会发展成如今的样子。而每个系统都是从简单，到复杂；从低等，到高等一步步发展来的，因此你可以在一些简单的设备中，发掘到在互联网设计之初，设计者们是如何思考的，然后遇到了什么问题（比如 ipv4 枯竭和对应的解决方案 NAT 地址转换技术），然后他们是如何解决的，如果是你的话，会如何解决呢？非常有意思。&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Nov 2022 23:38:20 +0800</pubDate>
        <link>https://www.xheldon.com/tech/home-network-router.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/home-network-router.html</guid>
        
        <category>技术</category>
        
        <category>路由器</category>
        
        <category>折腾</category>
        
        <category>网络</category>
        
        <category>千兆</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>关于 Clash 使用的一点记录</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;⚠️ 本文涉及的节点、机场订阅服务，都是子虚乌有个人杜撰的，实际并不存在，此处只是一个 Demo 示例，请大家知晓。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Clash 是一款好用的富强工具，它只是一个内核叫 Clash core，本质是一款命令行工具（谁又说任何软件本质不是命令行呢？），大神们据此开发了各式各样的 GUI 界面以方便设置和使用。我曾经使用过 Mac 上的 ClashX 和 Clash For Windows For Mac（你没有看错），也即通常所说的 CFW。因为方便开发的原因，它使用的是 Electron 的架构来实现的 GUI，所以它可以打包成 Mac 版和 Window 版本，非常好用。&lt;/p&gt;

&lt;p&gt;我目前使用的是 Clash For Windows 这个。&lt;/p&gt;

&lt;p caption=&quot;Clash for Windows For Mac 界面&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/958140EE-7CCB-4D5B-8CAD-1B6358AAAB57_2.png&quot; alt=&quot;Clash for Windows For Mac 界面&quot; title=&quot;Clash for Windows For Mac 界面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，国际惯例，本篇文章除了简单介绍常用设置的用处外，还简单介绍了下如何更新订阅链接和切换节点，防止某些人一有问题就来责怪我：「为什么 behance 又打不开了啊！」「为什么翻个墙这么麻烦啊！」「你花那么多钱买梯子怎么还这么难用啊！」的时候，我把这篇文章摔给她，然后继续打游戏。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚠️ 名词解释：富强 = 翻q&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一些设置的用处&quot;&gt;一些设置的用处&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;这些说明基本都在它的使用说明里面，我这里结合自己的真实使用场景介绍一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;geoip-database&quot;&gt;GeoIP Database&lt;/h3&gt;

&lt;p&gt;它的功能是可以基于 IP 的地理位置来判断是否需要走代理，原理是维护了一个数据库到本地，然后查询即可。因为 IP 地址是不断更新的，所以这个数据库也是需要偶尔更新一次的（不频繁）。&lt;/p&gt;

&lt;p caption=&quot;GeoIP 数据库下载&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/F70734A2-11A9-43F7-BA74-BE599A4B4632_2.png&quot; alt=&quot;GeoIP 数据库下载&quot; title=&quot;GeoIP 数据库下载&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tun-mode&quot;&gt;TUN Mode&lt;/h3&gt;

&lt;p&gt;有些软件不遵循系统代理，如终端、iTerm、Infuse。TUN 模式就是为了解决这个问题的，它对于不遵循系统代理的软件，它可以接管其流量并交由 CFW 处理。&lt;/p&gt;

&lt;p&gt;我个人的实际使用是为了看 Infuse 中的 Emby。因为我的 Emby 服务是需要机场特定节点的，然而 Infuse （似乎）内置了自己的请求工具，并未走系统代理，因此即使将 CFW 设置为系统代理，同时指定了正确的节点，却还是无法打开机场提供的 Emby 服务，此时只需要打开 TUN 模式即可解决。&lt;/p&gt;

&lt;p&gt;还一个使用场景是，打开了 TUN 模式后，iTerm 终端的命令也会走代理流量了；如果没有打开 TUN 模式的话，git clone 等是不会走代理流量的，我之前的办法是是手动创建一个 alias 命令来指定终端代理，需要的时候按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ppp&lt;/code&gt; 回车，不需要的时候按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sss&lt;/code&gt; 回车（我的代理端口是 7890）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;alias ppp=&quot;export https_proxy=http://127.0.0.1:7890;export http_proxy=http://127.0.0.1:7890;export all_proxy=socks5://127.0.0.1:7890&quot;
alias sss=&quot;unset all_proxy;unset https_proxy;unset http_proxy&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启用 TUN 模式需要 Service Mode，具体方式可以见文档：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.cfw.lbyczf.com/contents/tun.html#macos&quot; target=&quot;_blank&quot;&gt;TUN 模式 | Clash for Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不过我个人遇到的一个情况是，CFW 提示我 Service Mode 已经打开，但是那个小地球图标是红色的。于是我先关闭了一下 Service Mode，CFW 自动重启后显示 Service Mode 未激活，同时只有两个按钮可以点 install 和 uninstall，于是我就点那个 install，重启后还是红色的小地球图标，于是我先 uninstall 后再 install，CFW 自动重启后就变成绿色小地球了。说这一点是说，可能 GUI 有 bug，遇到问题最好多尝试几次不同的方式来解决。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 记得关闭软件的安全 DNS 功能，才能正常使用 TUN 模式。如果你发现 TUN 模式下软件不好使，可能跟该软件的这个功能原因。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p caption=&quot;Chrome 关闭安全 DNS&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/F81A0395-B1AE-40AC-B414-15EB8E5714DE_2.png&quot; alt=&quot;Chrome 关闭安全 DNS&quot; title=&quot;Chrome 关闭安全 DNS&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;parser&quot;&gt;Parser&lt;/h3&gt;

&lt;p&gt;也即「配置文件预处理」。&lt;/p&gt;

&lt;p&gt;有些时候你想在 CFW 的分流规则生效之前，设置自己的规则。比如大多数人用的都是机场订阅链接，机场的订阅链接都自带了自己的分流规则，类似全球直连、全球拦截、漏网之鱼这种：&lt;/p&gt;

&lt;p caption=&quot;机场的内置分流规则&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/A4BA694C-B4B1-4964-9D6C-EFB8E3C12184_2.png&quot; alt=&quot;机场的内置分流规则&quot; title=&quot;机场的内置分流规则&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而你想有自己自定义的规则，如某个特定链接走代理。如果你直接修改订阅链接下载的配置文件，那么下次订阅链接更新的时候，&lt;strong&gt;你的修改就会被覆盖&lt;/strong&gt;。于是 Parser 应运而生。&lt;/p&gt;

&lt;p&gt;简单来说，Parser 会在机场订阅规则应用前，首先应用你配置的规则，并将你的规则合并到最终生效的规则中。比如我经常访问的一个网站，它有两套域名，如果访客是大陆用户，则直接返回大陆内容；如果是海外 ip 访问该网站，该网站会跳转到海外地址上。&lt;/p&gt;

&lt;p&gt;而尴尬的是，一旦开启了 TUN  模式，该网站就会判定你是海外用户，就无法以大陆用户的身份来访问该网站了（账号不互通）。于是我就可以使用 Parser 功能，将该网站的大陆版地址加入然后设置直连即可：&lt;/p&gt;

&lt;p caption=&quot;只支持针对特定节点列表配置文件进行预处理&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/8B575173-C01D-4E41-8213-1540979CC691_2.png&quot; alt=&quot;只支持针对特定节点列表配置文件进行预处理&quot; title=&quot;只支持针对特定节点列表配置文件进行预处理&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是，比较尴尬的是，它只针对某个特定的 yaml（也即下面说的订阅节点列表）生效，因此如果你有多个订阅节点列表（机场），那就需要写多个 url。&lt;/p&gt;

&lt;p&gt;更新：好消息是 CFW 支持一个规则匹配多个订阅节点列表了，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reg&lt;/code&gt; 字段正则匹配即可，如下我使用的是匹配全部配置文件：&lt;/p&gt;

&lt;p caption=&quot;reg 匹配多个 yaml 配置文件&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/01CDE02A-C3F4-48D1-B4D0-53E6A7C57D84_2.png&quot; alt=&quot;reg 匹配多个 yaml 配置文件&quot; title=&quot;reg 匹配多个 yaml 配置文件&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;点击查看配置文件的Parser&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/71687212-4376-4A13-B7C6-304066D33D6F_2.png&quot; alt=&quot;点击查看配置文件的Parser&quot; title=&quot;点击查看配置文件的Parser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击订阅节点列表，查看该配置对应的 Parser。&lt;/p&gt;

&lt;p caption=&quot;该 Parser 能匹配上配置文件&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/499B32EF-5C31-4E35-A0D4-B61198B8578C_2.png&quot; alt=&quot;该 Parser 能匹配上配置文件&quot; title=&quot;该 Parser 能匹配上配置文件&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：订阅转换服务可能使 Parser 失效。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：设置完 Parser 后需要点一下当前代理的更新按钮才会生效。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;diff&quot;&gt;Diff&lt;/h3&gt;

&lt;p&gt;该功能作用给上面的 Parser 类似，但它会作用于 Parser 之后生效。原理是先手动生成一个文件（类似于 git 的 base 版本），该文件可以是你基于当前订阅配置文件修改后的文件。然后每当订阅配置文件更新的时候就会将新的与旧的 diff 一次，如果发现有问题就需要手动解决一次冲突。&lt;/p&gt;

&lt;p&gt;该功能目的也是为了保证每次更新不会覆盖你对当前配置文件的修改。&lt;/p&gt;

&lt;h3 id=&quot;mixin&quot;&gt;Mixin&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚠️ &lt;strong&gt;注意：此功能只适合注入「&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;功能属性」&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;，同时 mixin 中的规则会覆盖机场订阅列表中的其他规则！因此，你只应该在 mixin 中设置注入 dns 等的信息，而不应该设置 rules 等的信息，因为其会使机场订阅的节点无效。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p caption=&quot;Mixin 设置&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/5BD8837D-D779-462F-8C7A-4E4AEC024B8B_2.png&quot; alt=&quot;Mixin 设置&quot; title=&quot;Mixin 设置&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有一个设置入口在 Setting 里面，这里可以选择 JavaScript 格式的 Mixin 设置，具体可以参看文档：&lt;/p&gt;

&lt;p caption=&quot;Mixin 总设置&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/D1C4A8E9-A706-4CF1-A19F-FBD2DD439A34_2.png&quot; alt=&quot;Mixin 总设置&quot; title=&quot;Mixin 总设置&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;system-proxy&quot;&gt;System Proxy&lt;/h3&gt;

&lt;p&gt;顾名思义，就是将 Clash 设置为系统代理。如果关闭的话，有些依赖系统代理的软件，就不能富强了，比如 Safari。因此如果你想让你的 Safari 富强，务必打开 System Proxy。&lt;/p&gt;

&lt;h2 id=&quot;无法正常富强时排查方式&quot;&gt;无法正常富强时排查方式&lt;/h2&gt;

&lt;p&gt;当访问需要富强的网站确发现无法富强的时候，可以按下面几点简单排查一下：&lt;/p&gt;

&lt;h3 id=&quot;第一步检查-proxies&quot;&gt;第一步：检查 Proxies&lt;/h3&gt;

&lt;p&gt;点击菜单栏中的小猫咪&lt;/p&gt;

&lt;p caption=&quot;小猫咪被点击啦&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/FB1C6B63-F79E-424B-87E7-E3909A39697E_2.png&quot; alt=&quot;小猫咪被点击啦&quot; title=&quot;小猫咪被点击啦&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在打开的界面中点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Proxies&lt;/code&gt; tab 栏，然后点击节点选择：&lt;/p&gt;

&lt;p caption=&quot;点击节点选择会展开节点&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/3814EF32-EA61-4D8E-BB07-2414E4CF55AD_2.png&quot; alt=&quot;点击节点选择会展开节点&quot; title=&quot;点击节点选择会展开节点&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 自动选择：CFW 会自动选择可用节点&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此时注意查看节点选择后面的文字是不是自动选择（默认应该是的，你不应该动这个地方），确保是自动选择，然后点击测速查看当前自动选择节点的速度：&lt;/p&gt;

&lt;p caption=&quot;测速结果在右侧&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/F9BC2145-EE96-43CD-BABF-EE31506E35AE_2.png&quot; alt=&quot;测速结果在右侧&quot; title=&quot;测速结果在右侧&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里如果节点不可用的话，会显示是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timeout&lt;/code&gt; 超时，如果延迟过高如 1000+ 会以红色数字显示，会表示富强的网速慢。&lt;/p&gt;

&lt;h3 id=&quot;第二步检查-profiles&quot;&gt;第二步：检查 Profiles&lt;/h3&gt;

&lt;p&gt;一般情况下，你的 Profiles 都应该有多个，诸如这样的：&lt;/p&gt;

&lt;p caption=&quot;在多个节点列表中切换&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/0B0E0986-FEC8-4233-B5AB-8FB688E90654_2.png&quot; alt=&quot;在多个节点列表中切换&quot; title=&quot;在多个节点列表中切换&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果在第一步发现节点测速显示都是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timeout&lt;/code&gt; ，那么可以考虑更换节点列表，上图中点击一个新的 block，如果其左侧变绿，就表示切换为当前 block 的节点列表了。然后此时再重新执行第一步检查节点的速度是否正常即可。&lt;/p&gt;

&lt;p&gt;另外如果上图中的节点列表很久没更新（括号中显示更新时间），那么点击上面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update All&lt;/code&gt; 尝试更新。此时可能更新失败，可以换其他 block 点击后，再次点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update All&lt;/code&gt; 尝试更新即可：&lt;/p&gt;

&lt;p caption=&quot;更新节点列表&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/22A4E748-9C2C-4DC2-8641-EEC3BD0D6F7A_2.png&quot; alt=&quot;更新节点列表&quot; title=&quot;更新节点列表&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意，不要在多个节点列表之间切换过快，可能会导致错误，切换一个后，等个 3~4 秒再切换其他的（如果必要的话）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;第三步断开全部链接&quot;&gt;第三步：断开全部链接&lt;/h3&gt;

&lt;p&gt;如果发现上面两步执行过后，都没问题，但是就是无法打开页面，那么可能是因为此时浏览器还保持着之前的连接未断开，故而没有重新通过代理监理链接。此时只需要在 CFW 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connections&lt;/code&gt; tab 中，点击断开全部链接，然后刷新你打不开的页面即可：&lt;/p&gt;

&lt;p caption=&quot;断开全部连接&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/FC7E6C7A-35B6-4004-92C6-E9ABE547CF7A_2.png&quot; alt=&quot;断开全部连接&quot; title=&quot;断开全部连接&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;添加新的机场订阅&quot;&gt;添加新的机场订阅&lt;/h2&gt;

&lt;p&gt;新的机场订阅即上面说的「节点列表」。&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profiles&lt;/code&gt; tab 中，将你拿到的链接粘贴到当前唯一的输入框，然后点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download&lt;/code&gt; 即可，如果下载成功会有提示：&lt;/p&gt;

&lt;p caption=&quot;添加新的节点列表&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/3F3F03C3-CE8A-4D96-9EA8-9237D4C55A35_2.png&quot; alt=&quot;添加新的节点列表&quot; title=&quot;添加新的节点列表&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;h3 id=&quot;富强模式&quot;&gt;富强模式&lt;/h3&gt;

&lt;p&gt;Clash 有不同的富强模式，如全局，即所有网络链接都富强；有 Rule，即按照你定的规则，不同的网络链接有的富强有的直连；有 Direct 表示全部网络链接都直接连接，效果等同于没有开 Clash 富强；有 Script，可以写一个 JavaScript脚本，让自定义脚本判断哪些链接走富强，哪些直连。这些配置可以在这里切换：&lt;/p&gt;

&lt;p caption=&quot;切换富强方式&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/DC0BF45B-91D3-45DF-B230-254A2648EDD6_2.png&quot; alt=&quot;切换富强方式&quot; title=&quot;切换富强方式&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;代理局域网的其他设备&quot;&gt;代理局域网的其他设备&lt;/h3&gt;

&lt;p&gt;Clash 可以代理当前局域网同一网段的其他设备的网络链接，让无法富强的其他设备也能富强，最典型的用法就是代理 Apple TV 的。因为 Apple TV 系统没有开放相关代理接口，因此其不像手机一样可以直接安装富强软件进行富强，因此要么借助路由器富强，要么就是将其代理服务器设置为 Clash 所在的设备，然后在 Clash 中打开 Allow LAN 即可：&lt;/p&gt;

&lt;p caption=&quot;允许本地局域网连接&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-using-of-cfw/C48B8690-F44B-4465-9BF7-8A2F4960F904_2.png&quot; alt=&quot;允许本地局域网连接&quot; title=&quot;允许本地局域网连接&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;什么是机场订阅链接&quot;&gt;什么是机场订阅链接？&lt;/h3&gt;

&lt;p&gt;机场订阅链接就是机场给你一个链接，然后 Clash 会解析这个链接，该链接会让 Clash 下载一个 yaml 格式的配置文件，来指示 Clash 如何功能。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Oct 2022 18:52:22 +0800</pubDate>
        <link>https://www.xheldon.com/tech/the-using-of-clash-for-windows.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/the-using-of-clash-for-windows.html</guid>
        
        <category>技术</category>
        
        <category>富强</category>
        
        <category>Clash</category>
        
        <category>教程</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>2022 我的家庭网络拓扑结构</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在预算有限的情况下，尽可能满足自己的需求是折腾的乐趣之一；换句话说，有钱当然可以直接买最好的，性能过剩不要紧，最重要的是要能覆盖目前用不到但将来可能用到的一些使用场景。&lt;/p&gt;

&lt;p&gt;这里简单分享下本人在折腾网络过程中的一些记录和心得，当然主要还是为了在媳妇儿发现我花了钱但是家里的网并没有很好用的时候，我就把这篇文章甩给她，让她自己看钱花到哪儿而写的。&lt;/p&gt;

&lt;h2 id=&quot;网络拓tuo扑pu图&quot;&gt;网络拓(tuo)扑(pu)图&lt;/h2&gt;

&lt;p&gt;废话不说，直接上图：&lt;/p&gt;

&lt;p caption=&quot;家庭网络拓扑图&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/my-home-network-2022/7FB3F86F-60A4-4E21-BFFC-E399977692A2_2.png&quot; alt=&quot;家庭网络拓扑图&quot; title=&quot;家庭网络拓扑图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我的需求是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;有网口或对网络要求高的，尽量连有线。如 PS5、Switch、Mac Studio 等，毕竟有线更稳定和快速。无线再快、5G 再快，空间传输的损耗也比有线大得多。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;已连接路由器的设备不要再次连接，如各种智障家居、电视手机等，因为太麻烦了（十几个设备一个一个输入密码要死了）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主机如 Switch、PS5 等，需要使用 UU 加速器联网，且这些主机设备没有翻墙需求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;智能设备如手机、iPad、电脑自带翻墙软件，无需翻墙环境。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apple TV 也没有看 NetFlix、YouTube 的需求，因此也无需翻墙环境，只需要访问阿里云盘服务和外接硬盘资源即可。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因为有光猫和路由的存在，因此有两个网段，光猫是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.x&lt;/code&gt; ，而路由器是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.5.x&lt;/code&gt; ，两个网段设备不互通。&lt;/p&gt;

&lt;p&gt;下面按上图的设备顺序说一下细节。&lt;/p&gt;

&lt;h2 id=&quot;网络连接&quot;&gt;网络连接&lt;/h2&gt;

&lt;h3 id=&quot;互联网--光猫&quot;&gt;互联网 → 光猫&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;花费：149元/月（宽带费用）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;联通融合宽带 500M 光纤入户，宽带和手机号绑定，融合宽带的意思即手机不停机宽带就一直用，只是需要每年存 1000 块，然后按月返还。另外还送了一条 500M 的宽带让我卖给同事回回血了。办宽带的时候还送了个 WiFi 6 的 中兴路由器，网上查了查 200 块左右，还算稳定，所以一直用着。&lt;/p&gt;

&lt;h3 id=&quot;光猫--路由器&quot;&gt;光猫 → 路由器&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;花费：0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;路由器就是上面说的，办宽带送的。网上很多人说不建议使用光猫拨号，让用路由器拨号，这样可以省下来一个网段，而且光猫的性能显然没有路由器强。不过这些场景都是需要万兆宽带的大佬才搞的，我是觉得没必要，而且多一个网段刚好可以把一些需要直连的智障设备隔离开，索性就没搞了。更何况送的路由器也没有很好。&lt;/p&gt;

&lt;h2 id=&quot;光猫--无线设备&quot;&gt;光猫 → 无线设备&lt;/h2&gt;

&lt;p&gt;有些智障硬件，走复杂网络的时候会出现无法连接的情况，如 360智障看家相机，因此这里我没有关闭光猫的无线功能。光猫的无线也可以在网络出问题的时候作为一个检测手段，来看看是路由器的问题还是光猫的问题。&lt;/p&gt;

&lt;h2 id=&quot;路由器--多个设备&quot;&gt;路由器 → 多个设备&lt;/h2&gt;

&lt;p&gt;路由器只有四个网口，我曾经在京东搜过目前流行的路由器，发现都是最多只有四个网口。因此，路由器除了连接光猫、连接 R4S，就只剩下两个网口供设备连有线了，我选择把这两个口给 Mac Studio 和 PS 5。&lt;/p&gt;

&lt;h3 id=&quot;路由器--r4s&quot;&gt;路由器 → R4S&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;花费：620元（满血R4S配置）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;R4S 使用旁路由的方式连接，这种非侵入式的接入方式比较符合我的需求。旁路由也即将 R4S 当成一个路由器下的设备，需要使用 R4S 中服务的设备如主机加速器服务，就把主机网络设置中的网关和 DNS 指向与它同网段的 R4S 的地址即可。&lt;/p&gt;

&lt;h3 id=&quot;路由器--ps5mac-studio&quot;&gt;路由器 → PS5/Mac Studio&lt;/h3&gt;

&lt;p&gt;实测 PS5 连接有线比无线下载游戏快的多的多。而我的 Mac Studio，这么强的配置不得配个有线的网？&lt;/p&gt;

&lt;h3 id=&quot;路由器--无线设备&quot;&gt;路由器 → 无线设备&lt;/h3&gt;

&lt;p&gt;剩下的就是一些无线设备，如手机、Pad、Apple TV、其他电脑、电视了，直接连 WiFi 即可。&lt;/p&gt;

&lt;h2 id=&quot;细节说明&quot;&gt;细节说明&lt;/h2&gt;

&lt;p&gt;这里的细节主要是 R4S 的，因为之前使用旁路由的时候需要各种设置比较费劲，于是这里记录一下。&lt;/p&gt;

&lt;h3 id=&quot;旁路由的设置&quot;&gt;旁路由的设置&lt;/h3&gt;

&lt;h3 id=&quot;r4s-wan-口变-lan-口&quot;&gt;R4S Wan 口变 Lan 口&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;花费：79元（USB 转千兆网口线）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为 R4S 自带了两个网口，且作为旁路由使用，因此就浪费了一个 Wan 口，又得知其实它的 Wan 口和 Lan 口都是通用的，于是就简单设置了一下，将 Wan 口变 Lan 口了。关于如何将 R4S 作为旁路由的设置，见下面这个视频，讲解的比较清楚，按照视频一步一步设置即可：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=w7rwNF2Q3lM&amp;amp;t=399s&quot; target=&quot;_blank&quot;&gt;软路由做旁路由三步搞定！openwrt软路由 R2S R4S openwrt软路由科学上网设置&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而 Wan 口变 Lan 口更简单，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;网络-接口&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;接口总览&lt;/code&gt; 中，将 WAN 口删除，然后在 LAN 口中的物理设置中，勾选上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;桥接接口&lt;/code&gt;，再将下面的两个物理接口 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth0&lt;/code&gt; （原 wan 物理接口）和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth1&lt;/code&gt; （现有的 lan 物理接口）都勾选上，保存并应用即可。&lt;/p&gt;

&lt;p caption=&quot;删除WAN口接口&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/my-home-network-2022/99893BE3-9853-4B8D-ACA6-A8F49ABD1040_2.png&quot; alt=&quot;删除WAN口接口&quot; title=&quot;删除WAN口接口&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;物理接口桥接&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/my-home-network-2022/EDACBD7C-2FA3-4713-9090-DAEEBEA6E8E8_2.png&quot; alt=&quot;物理接口桥接&quot; title=&quot;物理接口桥接&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此就大功告成了。我将 Switch 连接了这个 Lan 口，但是因为 Switch 并没有网口，因此使用的是 USB 转千兆网口，京东买的：&lt;/p&gt;

&lt;p caption=&quot;绿联USB转网口线&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/my-home-network-2022/FE060576-56CF-45CB-8D48-73B03A392CAF_2.png&quot; alt=&quot;绿联USB转网口线&quot; title=&quot;绿联USB转网口线&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://item.jd.com/100023032574.html&quot; target=&quot;_blank&quot;&gt;【绿联50922】绿联 USB3.0千兆有线网卡转RJ45网线接口转换头 适用苹果华为笔记本任天堂Switch外置网口扩展坞分线器转接器【行情 报价 价格 评测】-京东&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;r4s-装阿里云盘-webdav&quot;&gt;R4S 装阿里云盘 WebDav&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;花费：98元/年（阿里云盘服务）+ 9.9 美元/年 （Infuse 7 订阅）费 + 1399 元（Apple TV）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不赘述，详见：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xheldon.com/life/the-way-to-watching-tv.html#%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98&quot; target=&quot;_blank&quot;&gt;我的家庭观影之路 - Xheldon Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;（如果访问速度慢，中文博客地址是上述域名 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.com&lt;/code&gt; 改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cn&lt;/code&gt; 即可。）&lt;/p&gt;

&lt;h3 id=&quot;r4s装-uu-路由器插件&quot;&gt;R4S装 UU 路由器插件&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;花费：30元/月（UU 加速器费用）+ 599港元/年（PS 高级会员） + 30.6元/年（任天堂会员）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;买 R4S 的时候内置了该插件，如果需要可以自己装。但神奇的是我曾经因为执念而觉得官方的安装会更好，于是就把 R4S 内置的 UU 加速器插件删了，用官方的方式安装（官方安装方式不带 luci 界面）：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://uu.163.com/router/direction.html&quot; target=&quot;_blank&quot;&gt;网易UU加速器——玩出超快感，全球加速72小时免费体验&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是加速效果很差（也可能是心理作用，毕竟我没有专业的测速和控制变量对比，只是感觉），于是怒重置 R4S 系统，重新用回了预装的带界面的 UU 加速器路由插件，感觉还不错。&lt;/p&gt;

&lt;p caption=&quot;UU加速器路由插件&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/my-home-network-2022/8C970209-06FC-4D2B-BAAC-9FA0A049C41B_2.png&quot; alt=&quot;UU加速器路由插件&quot; title=&quot;UU加速器路由插件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过说是带界面的，其实也就一个开关🥲。&lt;/p&gt;

&lt;p&gt;看下 Switch 的加速效果：&lt;/p&gt;

&lt;p caption=&quot;使用UU加速器前&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/my-home-network-2022/B0B44A63-E971-4E65-A5BD-05C5F32C7168_2.jpeg&quot; alt=&quot;使用UU加速器前&quot; title=&quot;使用UU加速器前&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;使用UU加速器后&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/my-home-network-2022/402B4436-D2F3-4353-BF06-A9F6D5225F9F_2.jpeg&quot; alt=&quot;使用UU加速器后&quot; title=&quot;使用UU加速器后&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到加速的效果还是很明显的，玩喷射战士3和马里奥卡丁车8 一下午，只发生了 2 次连接失败的情况（喷射战士基本几分钟一局，打一下午有几十局）。&lt;/p&gt;

&lt;h3 id=&quot;r4s装-qbittorrent&quot;&gt;R4S装 qBittorrent&lt;/h3&gt;

&lt;p&gt;不赘述，详见：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.xheldon.com/life/the-way-to-watching-tv.html#qbittorrent&quot; target=&quot;_blank&quot;&gt;我的家庭观影之路 - Xheldon Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;（如果访问速度慢，中文博客地址是上述域名 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.com&lt;/code&gt; 改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cn&lt;/code&gt; 即可。）&lt;/p&gt;

&lt;h2 id=&quot;翻墙服务&quot;&gt;翻墙服务&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;花费：241元/年（忍者云） + 137元/年（AgentNEO）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;之前在 R4S 上用过翻墙服务，诚然可以让 Apple TV、PS5 等设备直接访问 YouTube，或者可以直接将主机相册内容分享到 Twitter，但是这些功能一个是并不是必须的，一个是在 R4S 上使用翻墙插件会与 UU 游戏加速器的 VPN 服务冲突（也许可以共存，但是我没折腾了），于是我就只保留了加速器功能，毕竟 YouTube、Netflix 等服务本来看的就少，而且也可以在电脑端看。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;其实更多的是建议有线连接在路由器里面设置一下 IP 和 Mac 地址绑定，这样的话无论是加速器还是各种服务都是有好处的，防止断网等情况 IP 重新获得的时候有变更导致某些服务失败的情况，我懒得搞了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;想让设备尽可能使用有线连接，可以将有线接光猫的 Lan 口。但是这有两个问题：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;我家的垃圾联通光猫型号是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;烽火 HG2543c1&lt;/code&gt; ，只有一个千兆的口，接路由器了，因此即使用光猫的百兆有线，还不如路由器的千兆 5G WiFi 快。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;光猫和路由器是两个网段（光猫的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; ，路由器的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.5.1&lt;/code&gt; ）因此需要在光猫处设置一个静态路由表，才能将接在光猫 Lan 口的设备访问其下级路由器上的设备（如软路由），但还是因为联通光猫的原因，这款光猫并没有静态路由表的设置，捣鼓了半天尝试进入光猫的超级管理员界面（地址是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://192.168.1.1/CU.html&lt;/code&gt; ，显示的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;维修管理员账号&lt;/code&gt; ，无果。打电话问联通的师傅得知：&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;他们都用维修人员专用的 app 进后台，密码都是动态下发的，他们也不知道是否有维修管理员账号/超级账号，或许有，但是厂家并提供给他们。&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;如果我想做路由拨号、家里搞个服务器之类的功能，可以找他上门弄。&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;联通的光猫都没有静态路由表的功能，换个光猫也没用，想多接有线只能用交换机。&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p caption=&quot;维护管理员账户&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/my-home-network-2022/81680F6F-4272-41F3-9F34-0D397717D5DF_2.png&quot; alt=&quot;维护管理员账户&quot; title=&quot;维护管理员账户&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;我的家庭网络比较简单，没有复杂的 NAS、路由拨号、内网穿透、家庭影音的复杂功能，有的只是简单：理解简单、操作简单、排查简单，最重要的，让家人使用起来简单。&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Sep 2022 23:56:02 +0800</pubDate>
        <link>https://www.xheldon.com/tech/my-home-network-2022.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/my-home-network-2022.html</guid>
        
        <category>技术</category>
        
        <category>网络</category>
        
        <category>拓扑</category>
        
        <category>R4S</category>
        
        <category>软路由</category>
        
        <category>折腾</category>
        
        <category>旁路由</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>「译」官方指南系列：JavaScript 调试指南（一）</title>
        <description>&lt;p&gt;希望通过这篇全面的 Chrome DevTools debugging 功能介绍，能让你的 debugging 过程更上一层楼。&lt;/p&gt;

&lt;p&gt;首先你可能需要先在 &lt;a href=&quot;https://developer.chrome.com/docs/devtools/javascript/&quot;&gt;这里&lt;/a&gt; （英文，待译）学习基本的 debugging 技巧。&lt;/p&gt;

&lt;h2 id=&quot;用断点暂停代码&quot;&gt;用断点暂停代码&lt;/h2&gt;

&lt;p&gt;通过设置一个断点，可以让代码在执行途中暂停。&lt;/p&gt;

&lt;p&gt;查看 &lt;a href=&quot;https://developer.chrome.com/docs/devtools/javascript/breakpoints/&quot;&gt;这里&lt;/a&gt; （英文，待译）来学习如何设置一个断点。&lt;/p&gt;

&lt;h3 id=&quot;在鼠标悬浮的时候查看类函数属性&quot;&gt;在鼠标悬浮的时候查看类/函数属性&lt;/h3&gt;

&lt;p&gt;当代码执行暂停的时候，将鼠标悬浮在一个类或者函数名上的时候可以预览它的属性。&lt;/p&gt;

&lt;p caption=&quot;1&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/EA456FA6-9331-41E3-96DC-3FCCFFA82C2E_2.png&quot; alt=&quot;1&quot; title=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;逐步运行代码&quot;&gt;逐步运行代码&lt;/h2&gt;

&lt;p&gt;你的代码暂停后，你就可以一次只运行一行代码，以搞清楚代码的调用栈以及相关的属性值。&lt;/p&gt;

&lt;h3 id=&quot;跳过step-over当前代码行&quot;&gt;跳过（Step over）当前代码行&lt;/h3&gt;

&lt;p&gt;当你的断点暂停在一个与你当前调查的问题无关的代码行，且该代码行包含一个函数的时候，你可以点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step Over&lt;/code&gt; 来不进入该函数以继续执行代码。&lt;/p&gt;

&lt;p caption=&quot;step_over&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/63AE5442-D0AD-46C5-8DB0-36452E2842D2_2.png&quot; alt=&quot;step_over&quot; title=&quot;step_over&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图一👆🏻，上图中蓝色方框中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step Over&lt;/code&gt; 的含义解释：&lt;/p&gt;

&lt;p&gt;举个例子，假设你正在 debugging 下面的代码：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;updateName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// D&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// B&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// C&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时你的断点停在了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; 的位置。通过点击 &lt;strong&gt;Step over&lt;/strong&gt; ，Devtools 将会执行你「Step over」的位置中的所有代码，在上述示例中「Step over」的是 A 位置的 getName 函数中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; 的位置，于是 Devtools 会将代码停在 D 的位置。&lt;/p&gt;

&lt;h3 id=&quot;进入step-into当前代码行&quot;&gt;进入（Step into）当前代码行&lt;/h3&gt;

&lt;p&gt;如果断点停在一个跟你要调查的问题有关系的地方，而且这个地方包含一个函数调用的时候，点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step into&lt;/code&gt; ，可以更进一步的检查这个函数。&lt;/p&gt;

&lt;p caption=&quot;step_into&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/0B7F9CB7-7EA3-44A2-8808-8E23F9E0D786_2.png&quot; alt=&quot;step_into&quot; title=&quot;step_into&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图二👆🏻，上图中蓝色方框中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step into&lt;/code&gt; 的含义解释：&lt;/p&gt;

&lt;p&gt;举个例子，假设你正在 debugging 下面的代码：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;updateName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// B&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你的断点正停在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; 的位置，此时点击 &lt;strong&gt;Step into&lt;/strong&gt; ，Devtools 将会执行这行代码，然后停在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; 的位置。&lt;/p&gt;

&lt;h3 id=&quot;跳出step-out当前代码行&quot;&gt;跳出（Step out）当前代码行&lt;/h3&gt;

&lt;p&gt;当断点停在一个与你正在调查的问题不相关的函数内部的时候，你可以点击 &lt;strong&gt;Step out&lt;/strong&gt; 来执行该函数中剩余的代码。&lt;/p&gt;

&lt;p caption=&quot;step_out&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/6E97FB74-E73D-4189-9A21-3771A1DF27AF_2.png&quot; alt=&quot;step_out&quot; title=&quot;step_out&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图三👆🏻，上图中蓝色方框中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step out&lt;/code&gt; 的含义解释：&lt;/p&gt;

&lt;p&gt;举个例子，假设你正在 debugging 下面的代码：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;updateName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// C&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// B&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你的断点正停在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; 的位置，此时点击 &lt;strong&gt;Step out&lt;/strong&gt; ，DevTools 将会把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getName()&lt;/code&gt; 函数中的剩余代码执行完，也就是 B 位置的代码，然后断点停在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; 的位置上。&lt;/p&gt;

&lt;h3 id=&quot;继续运行代码到指定行&quot;&gt;继续运行代码到指定行&lt;/h3&gt;

&lt;p&gt;当 debugging 一个很长函数的时候，函数中会有很多与你正在调查的问题不相关的代码。&lt;/p&gt;

&lt;p&gt;你可以选择一步一步的执行这些无关的行，但是这个过程会很枯燥。你也可以选择在一个想断点的代码行处设置一个断点，然后按下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resume Script Execution&lt;/code&gt; （恢复脚本执行），不过除此之外，还有一个更快的方式。&lt;/p&gt;

&lt;p&gt;你可以在你想要断点的代码行上右键，然后选择 &lt;strong&gt;Continue to here&lt;/strong&gt; （继续执行到此处）。Devtools 将会恢复断点执行代码直到此处，然后停在这一行。&lt;/p&gt;

&lt;p caption=&quot;continue_to_here&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/01C96466-2B8C-4088-9E66-7408708B0401_2.png&quot; alt=&quot;continue_to_here&quot; title=&quot;continue_to_here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图四👆🏻，选择 &lt;strong&gt;Continue to here&lt;/strong&gt; 。&lt;/p&gt;

&lt;h3 id=&quot;恢复脚本执行&quot;&gt;恢复脚本执行&lt;/h3&gt;

&lt;p&gt;你可以通过点击 &lt;strong&gt;Resume Script Execution&lt;/strong&gt; 来继续在你断点暂停的位置执行代码。Devtools 会将代码一直执行下去直到遇到下一个断点（如果有）。&lt;/p&gt;

&lt;p caption=&quot;resume_script_execution&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/E67463E2-9D01-48BB-A743-28A189DF68CD_2.png&quot; alt=&quot;resume_script_execution&quot; title=&quot;resume_script_execution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图五👆🏻，&lt;strong&gt;Resume Script Execution&lt;/strong&gt; ，蓝框处。&lt;/p&gt;

&lt;h4 id=&quot;强制执行&quot;&gt;强制执行&lt;/h4&gt;

&lt;p&gt;可以通过长按 &lt;strong&gt;Resume Script Execution&lt;/strong&gt; ，然后选择 &lt;strong&gt;Force Script Execution&lt;/strong&gt; ，来忽略剩下的所有断点，直接执行全部代码。&lt;/p&gt;

&lt;p caption=&quot;force_script_execution&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/DAB9BD94-70F7-4464-8609-3016E8B40A44_2.png&quot; alt=&quot;force_script_execution&quot; title=&quot;force_script_execution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图六👆🏻，选择 &lt;strong&gt;Force Script Execution&lt;/strong&gt; 。&lt;/p&gt;

&lt;h3 id=&quot;改变当前线程的上下文&quot;&gt;改变当前线程的上下文&lt;/h3&gt;

&lt;p&gt;当 debugging 设计到 Web Worker 或者 Service Worker 的时候，可以通过点击出现在 &lt;strong&gt;Threads&lt;/strong&gt; 栏中的上下文列表项，来转换上下文。蓝色箭头表示当前选择的上下文。&lt;/p&gt;

&lt;p caption=&quot;change_threads_context&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/1474933D-3F44-4D93-9909-FF4245545704_2.png&quot; alt=&quot;change_threads_context&quot; title=&quot;change_threads_context&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图七👆🏻，&lt;strong&gt;Threads&lt;/strong&gt; （线程）栏，蓝色框的位置。&lt;/p&gt;

&lt;p&gt;举个例子，假设有这么个场景，你的断点同时存在于你的主脚本和你的 service worker 脚本中。你想要查看 service worker 中的本地变量和全局变量，但是 &lt;strong&gt;Source&lt;/strong&gt; 栏当前正显示的是你的主脚本的上下文。此时你就可以通过点击在 &lt;strong&gt;Threads&lt;/strong&gt; 栏中的 service worker 入口来切换上下文以查看你想了解的变量了。&lt;/p&gt;

&lt;h2 id=&quot;查看和编辑局部闭包以及全局作用域中的变量属性&quot;&gt;查看和编辑局部、闭包以及全局作用域中的变量/属性&lt;/h2&gt;

&lt;p&gt;当暂停在某一行的时候，使用 Scope 栏来查看和编辑位于局部、闭包和全局变量。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;双击属性值以修改之。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;非可枚举的属性会以灰色突出显示。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;查看和修改变量&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/40A93D0F-ACA8-4128-A695-E502565253AD_2.png&quot; alt=&quot;查看和修改变量&quot; title=&quot;查看和修改变量&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图八👆🏻，&lt;strong&gt;Scope&lt;/strong&gt; （作用域）栏，蓝色框的位置。&lt;/p&gt;

&lt;h2 id=&quot;查看当前调用栈&quot;&gt;查看当前调用栈&lt;/h2&gt;

&lt;p&gt;当暂停在某一行的时候，使用 &lt;strong&gt;Call Stack&lt;/strong&gt; 栏来查看从代码执行一直到你当前暂停点以来的函数调用栈。&lt;/p&gt;

&lt;p&gt;如果你的代码中有异步代码，可以将 &lt;strong&gt;Async&lt;/strong&gt; 复选框勾选上，来启用异步函数调用栈。&lt;/p&gt;

&lt;p&gt;点击其中的一个条目，来跳转到该条目所表示的函数的调用处。蓝色箭头图标表示当前正在高亮的函数。&lt;/p&gt;

&lt;p caption=&quot;查看函数调用栈&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/1168318B-1CFA-493D-9AE6-2CF79930C58C_2.png&quot; alt=&quot;查看函数调用栈&quot; title=&quot;查看函数调用栈&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图九👆🏻，&lt;strong&gt;Call Stack&lt;/strong&gt; （调用栈）栏，蓝色框的位置。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：如果代码没有暂停在某一行，那 Call Stack 栏是空的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;重新执行堆栈中的函数&quot;&gt;重新执行堆栈中的函数&lt;/h3&gt;

&lt;p&gt;有时候想观察某一个函数的运行情况，但是又不想重新运行整个 debugging 流程，你可以在断点暂停在这个函数内部的时候重新只单独执行这个函数，换句话说，你可以在调用栈中重新放入该函数的调用上下文。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：你可以重头执行在 Call Stack （调用栈）中的任何函数，除了 WebAssembly、async、和 generator 函数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了重新执行一个函数：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用断点暂停函数，&lt;strong&gt;Call Stack&lt;/strong&gt; 栏会记录函数的调用顺序。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;strong&gt;Call Stack&lt;/strong&gt; 栏，右键一个函数，然后在出现的菜单中选择 Restart frame（重头执行函数）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p caption=&quot;重新执行断点所在的函数&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/DFF3FAC8-B00F-415A-A581-50A299F1884D_2.png&quot; alt=&quot;重新执行断点所在的函数&quot; title=&quot;重新执行断点所在的函数&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了理解 Restart frame 如何执行，我们假设有以下代码：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; 函数接受 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; 作为参数，然后通过 log 打印到控制台，然后调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar()&lt;/code&gt; 函数。相应的，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt; 函数会将这个值自增1。&lt;/p&gt;

&lt;p&gt;尝试以下面的方式重头执行这两个函数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;复制上面的代码到一个 &lt;a href=&quot;https://developer.chrome.com/docs/devtools/javascript/snippets/#createsources&quot;&gt;snippet&lt;/a&gt; （未翻译）中，然后 &lt;a href=&quot;https://developer.chrome.com/docs/devtools/javascript/snippets/#runsources&quot;&gt;运行&lt;/a&gt; （未翻译）它。断点会停在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debugger&lt;/code&gt; 的所在的 &lt;a href=&quot;https://developer.chrome.com/docs/devtools/javascript/breakpoints/#debugger&quot;&gt;代码行&lt;/a&gt;。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;⚠️ 注意：当代码执行暂停的时候，不要在控制台执行当前调用栈中的函数，因为这可能会引起意外的错误。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;你会注意到当前的 debugger 会在其所在的函数的函数声明的右侧显示当前值：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value = 1&lt;/code&gt; 。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;注意函数声明处右侧的值&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/9111BA1D-AA80-4C2F-B54E-123FC66A5C17_2.png&quot; alt=&quot;注意函数声明处右侧的值&quot; title=&quot;注意函数声明处右侧的值&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重头执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar()&lt;/code&gt; 函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;重头执行bar&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/036AAE1B-CA41-4627-A9D6-A4F7E6302C0C_2.png&quot; alt=&quot;重头执行bar&quot; title=&quot;重头执行bar&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F9&lt;/code&gt; ，然后代码可以经过值自增的那一行，然后再次断到 debugger 处。&lt;/p&gt;

    &lt;p&gt;注意看，值变成了 2： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value = 2&lt;/code&gt; 。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;重头执行debugger&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/09D36505-821B-4392-8DD3-BDE9D05F0210_2.png&quot; alt=&quot;重头执行debugger&quot; title=&quot;重头执行debugger&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;除此之外，你还可以在 Scope 栏，双击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; 值来编辑它将其设置成想要的值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;双击编辑值&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/9481CF99-8735-43A4-8A57-D2F953C289BC_2.png&quot; alt=&quot;双击编辑值&quot; title=&quot;双击编辑值&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;尝试重新执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar()&lt;/code&gt; 函数多次，会发现值会一直增加。&lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;多次重复执行后值会一直增加&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/AEE7EEA3-2150-431B-980C-6FCF03527DC7_2.png&quot; alt=&quot;多次重复执行后值会一直增加&quot; title=&quot;多次重复执行后值会一直增加&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 震惊！为什么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; 不会重置成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; ？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;函数重头执行的时候不会重置参数。换句话说，重头执行不会恢复该函数被调用时候的初始状态。因此，它只是简单的在调用栈中移动当前调用的指针到函数的开始位置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;因此，当前的参数值 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; 会在内存中一直随着相同函数的重复执行而一直存在。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;现在，在 &lt;strong&gt;Call Stack&lt;/strong&gt; 中重头执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo()&lt;/code&gt; 函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p caption=&quot;重头执行foo函数&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/11D4B549-3006-4564-B92D-4D1727913D74_2.png&quot; alt=&quot;重头执行foo函数&quot; title=&quot;重头执行foo函数&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意看，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; 重新变成了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; 。&lt;/p&gt;

&lt;p caption=&quot;value重新变为0&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/9F706F35-0041-41E3-BB4A-70A5BFFEFE06_2.png&quot; alt=&quot;value重新变为0&quot; title=&quot;value重新变为0&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 再次震惊！为什么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; 这次被重置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; 了？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;很简单（此处意译了）在 JavaScript 中，参数是按值传递的，因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; 是原始值，因此在函数内修改它的值不会影响到函数外它的值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;复制调用栈执行路径&quot;&gt;复制调用栈执行路径&lt;/h3&gt;

&lt;p&gt;在 &lt;strong&gt;Call Stack&lt;/strong&gt; 栏的任意位置右键，然后选择 &lt;strong&gt;Copy Stack Trace&lt;/strong&gt;（复制栈追踪），你会将当前调用栈复制到粘贴板。&lt;/p&gt;

&lt;p caption=&quot;复制调用栈&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/7EF33B00-5F90-4D0D-8979-B18ED3CD1527_2.png&quot; alt=&quot;复制调用栈&quot; title=&quot;复制调用栈&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图十👆🏻，选择 &lt;strong&gt;Copy Stack Trace&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;复制的内容大致会是这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-other&quot;&gt;getNumber1 (get-started.js:35)
inputsAreEmpty (get-started.js:22)
onClick (get-started.js:15)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;忽略某个脚本或者满足某种条件的脚本&quot;&gt;忽略某个脚本或者满足某种条件的脚本&lt;/h2&gt;

&lt;p&gt;当 debugging 的时候，忽略某个脚本以跳过它。你通常会在当该脚本的函数比较复杂难懂而且跟你当前 debugging 的内容无关的时候选择忽略之。&lt;/p&gt;

&lt;p&gt;例如，假设你正在 debugging 如下代码：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doFancyStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; 是一个你信任的第三方库。如果你十分确定你所调查的问题跟这个第三方库没有关系，那忽略它就是一个明智决定。&lt;/p&gt;

&lt;h3 id=&quot;从-source-编辑器栏中忽略某个脚本&quot;&gt;从 Source 编辑器栏中忽略某个脚本&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;打开文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;右键任何位置&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择 &lt;strong&gt;Add script to ignore list&lt;/strong&gt;（将脚本添加到忽略列表）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p caption=&quot;忽略脚本&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/39DA9D92-C270-4705-8920-7BC248703936_2.png&quot; alt=&quot;忽略脚本&quot; title=&quot;忽略脚本&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图十一👆🏻，从编辑器栏中忽略一个脚本。&lt;/p&gt;

&lt;h3 id=&quot;从-call-stack-调用栈栏忽略某个脚本&quot;&gt;从 Call Stack （调用栈）栏忽略某个脚本&lt;/h3&gt;

&lt;p&gt;如果想从调用栈中忽略某个脚本，你需要：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在调用栈中的某个函数中右键。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择 &lt;strong&gt;Add script to ignore list&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p caption=&quot;从调用栈中忽略脚本&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/73837AF8-CB34-4B72-AE5C-1B266E15B8EB_2.png&quot; alt=&quot;从调用栈中忽略脚本&quot; title=&quot;从调用栈中忽略脚本&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图十二👆🏻，从 Call Stack（调用栈）中忽略某个脚本。&lt;/p&gt;

&lt;h3 id=&quot;从-settings设置中忽略某个脚本&quot;&gt;从 Settings（设置）中忽略某个脚本&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;译者注：此处的设置为 Devtools 的设置，不是浏览器的设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果想从设置中忽略某一个脚本或者满足某种条件的脚本，你需要：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;打开设置：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;点击 &lt;strong&gt;Ignore List&lt;/strong&gt; Tab。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;点击 &lt;strong&gt;Add pattern&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输入脚本名或者正则来匹配需要忽略的脚本名。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;点击 &lt;strong&gt;Add&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p caption=&quot;devoools设置界面&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/54F9290D-CE6A-4630-9387-34DE7EA6266F_2.png&quot; alt=&quot;devoools设置界面&quot; title=&quot;devoools设置界面&quot; /&gt;&lt;/p&gt;

&lt;p caption=&quot;devtools忽略脚本&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/65A0FE7C-D5BB-4329-B978-1C7184F6C1B6_2.png&quot; alt=&quot;devtools忽略脚本&quot; title=&quot;devtools忽略脚本&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图十三👆🏻，从 Setting 中忽略脚本。&lt;/p&gt;

&lt;h2 id=&quot;从任何页面运行-debug-代码-snippets片段&quot;&gt;从任何页面运行 debug 代码 Snippets（片段）&lt;/h2&gt;

&lt;p&gt;如果你发现你正在 Console 中反复运行一些 deubg 代码，那么可以考虑一下 Snippets。Snippets 是一种你可以存储在 Devtools 中并执行的脚本。&lt;/p&gt;

&lt;p&gt;参见 &lt;a href=&quot;https://developer.chrome.com/docs/devtools/javascript/snippets/&quot;&gt;https://developer.chrome.com/docs/devtools/javascript/snippets/&lt;/a&gt; （未翻译）来了解更多。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;译者注：Snippets 在执行的时候是携带当前上下文的，比如你在 debug 的时候暂停了，然后执行 Snippets 代码，此时的 Snippets 代码拥有当前上下文的变量访问权限。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;watch监听自定义的-javascript-表达式的值&quot;&gt;Watch（监听）自定义的 JavaScript 表达式的值&lt;/h2&gt;

&lt;p&gt;使用 Watch 栏来监听自定义表达式的值。你可以监听任何有效的 JavaScript 表达式。&lt;/p&gt;

&lt;p caption=&quot;监听JavaScript表达式&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/02D81797-A39F-4837-B402-648AA39E5C21_2.png&quot; alt=&quot;监听JavaScript表达式&quot; title=&quot;监听JavaScript表达式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图十四👆🏻，蓝色圈住的即是 Watch 栏。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;点击 Add Expression（添加表达式）来新建一个监视表达式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;点击 Refresh（刷新）来刷新所有已经存在的表达式。当执行代码的时候，值会自动更新。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;鼠标悬浮在一个表达式上，然后点 Delete Expression（删除表达式），来删除它。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;格式化压缩后的代码以可读&quot;&gt;格式化压缩后的代码以可读&lt;/h2&gt;

&lt;p&gt;点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fromat {}&lt;/code&gt;  来让一个压缩后的代码变成人类可读的格式。&lt;/p&gt;

&lt;p caption=&quot;格式化压缩后的文件&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/572D9BCF-DC18-460E-8B23-62398391ED92_2.png&quot; alt=&quot;格式化压缩后的文件&quot; title=&quot;格式化压缩后的文件&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;编辑一个脚本&quot;&gt;编辑一个脚本&lt;/h2&gt;

&lt;p&gt;当修复一个 bug 的时候，你经常会需要测试你的 JavaScript 代码的修改效果。你不要在一个外部的编辑器中编辑 JavaScript 代码后，再回到当前页面刷新后查看效果。你可以直接在 Devtools 中编辑你的 JavaScript 代码。&lt;/p&gt;

&lt;p&gt;如果想编辑脚本，你需要：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在 Source 栏中打开你想要编辑的文件（会出现在 Editor 栏中）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 Editor 栏中做出修改。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cmmand + S&lt;/code&gt; （Mac）或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + S&lt;/code&gt; （Windows，Linux）来保存修噶。Devtools 将会以打补丁的形式将整个 js 文件加入到 Chrome 的 JavaScript 引擎中去。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p caption=&quot;直接编辑js文件&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/6DC1E149-D2D2-4005-A2B9-451CF0456112_2.png&quot; alt=&quot;直接编辑js文件&quot; title=&quot;直接编辑js文件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中蓝框圈出来的就是编辑器栏。&lt;/p&gt;

&lt;h2 id=&quot;实时编辑一个暂停的函数&quot;&gt;实时编辑一个暂停的函数&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：此功能自 Chrome 105 版本往上才可用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当代码暂停的时候，你可以编辑当前函数然后实时应用修改，不过有以下限制：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;你只能编辑在 &lt;strong&gt;Call Stack&lt;/strong&gt; 最顶上的函数（也即当前断点所在的函数——译者注）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调用栈中不能有对相同函数的递归调用（否则也相当于是修改了非当前调用栈的函数——译者注）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 实时编辑暂停函数的真相是…
当你应用一个修改的时候，debugger 工具自动重新执行（和前面的「重新执行堆栈中的函数」一样）。因此，对重新执行函数的限制与实时编辑暂停函数并生效的限制是一样的。你不能重头执行 WebAssembly、async以及generator（迭代器）函数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果想实时编辑一个函数，你需要：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;用断点暂停。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编辑断点所在的正在暂停的函数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;按下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command/Control+S&lt;/code&gt;  来应用更改，debugger 将会自动重新执行该函数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;继续执行&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p caption=&quot;实时重新执行函数&quot;&gt;&lt;video controls=&quot;&quot; muted=&quot;&quot;&gt;&lt;source src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/37CA2680-5D00-477F-A1CF-161AD18F2A5E_2.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;/video&gt;&lt;/p&gt;

&lt;p&gt;在这个示例中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addend1&lt;/code&gt; 和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addend2&lt;/code&gt; 变量在起始的时候有一个不正确的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 类型。因此，字符串被错误的连接在一起而不是数字相加。为了修复此问题，在实时编辑的时候添加了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseInt()&lt;/code&gt; 函数。&lt;/p&gt;

&lt;h2 id=&quot;搜索和替换在脚本中的文本&quot;&gt;搜索和替换在脚本中的文本&lt;/h2&gt;

&lt;p&gt;如果想要在脚本中搜索一段文本，你需要：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在代码源（Sources）-编辑器（Editor）栏中打开文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;按下 &lt;strong&gt;Command+F&lt;/strong&gt;（Mac）或者 &lt;strong&gt;Ctrl+F&lt;/strong&gt;（Windows、Linux）来打开内置的搜索栏。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在搜索栏中，输入你想要查询的字符串：&lt;/p&gt;

    &lt;p&gt;另外你还可以：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Aa&lt;/code&gt; 来匹配大小写，来让你的搜索大小写敏感。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.*&lt;/code&gt; 来使用正则匹配。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;按下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enter&lt;/code&gt; 键来执行搜索。可以按下 up/down 来跳转到下一个/上一个搜索结果。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p caption=&quot;搜索字符&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/6D3D4E4D-22CD-4095-8773-1DFD4F3089A5_2.png&quot; alt=&quot;搜索字符&quot; title=&quot;搜索字符&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果想替换你搜索到的结果，你需要：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;打开搜索栏，点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A→B&lt;/code&gt; （手敲的不形象，看下面的图）即替换按钮来替换文本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输入想要替换的文本，然后点击 &lt;strong&gt;Replce&lt;/strong&gt; 或者 &lt;strong&gt;Replace all&lt;/strong&gt; 即可。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p caption=&quot;按下替换按钮&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/javascript-debugger-reference-series01/4CFF9F79-2118-4DA6-AF12-1440A520C6F8_2.png&quot; alt=&quot;按下替换按钮&quot; title=&quot;按下替换按钮&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;禁用-javascript&quot;&gt;禁用 JavaScript&lt;/h2&gt;

&lt;p&gt;具体参见：&lt;a href=&quot;https://developer.chrome.com/docs/devtools/javascript/disable/&quot;&gt;Disable JavaScript With Chrome DevTools&lt;/a&gt;（未翻译）。&lt;/p&gt;

</description>
        <pubDate>Tue, 13 Sep 2022 09:29:30 +0800</pubDate>
        <link>https://www.xheldon.com/tech/javascript-debugger-reference-series01.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/javascript-debugger-reference-series01.html</guid>
        
        <category>技术</category>
        
        <category>调试</category>
        
        <category>技巧</category>
        
        <category>JavaScript</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>博客自动化流程及体验优化——第二弹</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;之前搞了个 &lt;a href=&quot;/tech/my-blog-ci.html&quot;&gt;博客自动化流程&lt;/a&gt;，及后来的 &lt;a href=&quot;/tech/my-blog-ci-in-2022.html&quot;&gt;2022 博客自动化流程&lt;/a&gt; 但是总的来说，还有以下痛点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;从 Github CI 上传从 Craft 拉的图片到腾讯云经常会遇到网络错误，流程不可控。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;博客中图片传到腾讯云的时候，都被强制转为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;png&lt;/code&gt; ，但是其实应该支持更多格式如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gif&lt;/code&gt; 。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Craft 转 Markdown 的结果，有很多与标准 Markdown 不同的地方，如：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;不支持嵌套列表。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;引用块内嵌套列表的时候，渲染结果列表居然在外层。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Craft 的 「焦点」（block）和「块」（focus）只有后者被识别成 blockquote （引用块），预期应该是二者都是。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Craft 中的 bookmark 信息量很多，如页面描述、页面 title等，但是转成 Markdown 的之后，仅剩下一个段落中包裹着链接，相当于信息丢失了。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Craft 中图片本身就不支持图片说明。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Craft 生成的代码块，并不会自动在反引号之后添加语言，导致一些语言被识别为了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plaintext&lt;/code&gt; 没有高亮。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;于是本次优化针对这些痛点，又又又又进行了改造。&lt;/p&gt;

&lt;h2 id=&quot;优化一使用自己的-craftblocktomarkdown-函数&quot;&gt;优化一：使用自己的 CraftBlockToMarkdown 函数&lt;/h2&gt;

&lt;p&gt;因为给 Craft 反馈了他们的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;craft.markdown.craftBlockToMarkdown&lt;/code&gt; 无法正确转换的问题：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forum.developer.craft.do/t/wrong-render-of-markdown-with-decoration-focus-and-image-question/235&quot; target=&quot;_blank&quot;&gt;Wrong render of markdown with Decoration focus and image question&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是官方似乎丝毫没有要解决的意思，于是自己写了一个简单的函数用来手动转换：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/Xheldon/036d9b187bd83303205001e8af97eda7&quot; target=&quot;_blank&quot;&gt;craftBlockToMarkdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;需要注意的是，该函数因为是自己用来适配 Jekyll 的来进行下一步处理的（见下面的优化三），因此特殊处理了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imageBlock&lt;/code&gt;  和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urlBlock&lt;/code&gt; 类型的 Block：&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/optimize-of-my-blog-2/FE4436B8-B16D-4CA7-9041-E2F5F831CC80_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此函数已经被我放到官方插件开发者论坛了，欢迎交流：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forum.developer.craft.do/t/a-better-implementation-of-craft-blocks-to-markdown-transformation-methods/554&quot; target=&quot;_blank&quot;&gt;A better implementation of craft blocks to Markdown transformation methods&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;优化二将-github-ci-流程挪到本地&quot;&gt;优化二：将 Github CI 流程挪到本地&lt;/h2&gt;

&lt;p&gt;之前的流程，点击插件的发布按钮（当然，需要先填写 GitHub Token、填写 COS 等相关信息才行），然后等着就可以了。&lt;/p&gt;

&lt;p&gt;本次优化，为了保持与之前流程的一致，于是又写了个 Craft 插件，点击后会获取文档内容，简单处理后（如获取 header-img 的图片版权信息到 meta 中），会调用特定链接，链接参数带上文档信息：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;craft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;editorApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`xhelper://&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;btoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unescape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而这个特定链接的作用，就是调用 Apple Script 写的 Application，置于如何写一个 Application 应用和如何响应链接调用，可以看我写的 &lt;a href=&quot;/tech/applescript-simple-use.html&quot;&gt;这篇文档&lt;/a&gt;，里面会调用 node，执行的其实也是之前放到 Github CI 执行的代码，这里放一个简单的截图：&lt;/p&gt;

&lt;p caption=&quot;Xhelper截图👆🏻&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/optimize-of-my-blog-2/BC93AD26-26C5-4AD1-A8AC-2BB3B2AD2945_2.png&quot; alt=&quot;Xhelper截图👆🏻&quot; title=&quot;Xhelper截图👆🏻&quot; /&gt;&lt;/p&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p caption=&quot;Image&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/optimize-of-my-blog-2/5E5FDC00-D081-4B50-91FE-61946A453356_2.png&quot; alt=&quot;Image&quot; title=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之前的流程因为我贪图简单，加上 Craft 上传的图片不一定都有后缀（如通过拖拽、图片上传等方式上传的图片，则有后缀，若通过复制粘贴来的或者 Web 上传的图片，则无后缀），于是我将所有图片都转成了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;png&lt;/code&gt; 格式，本次我移除了这个逻辑，先判断如果自身带后缀则使用其后缀；如果没有后缀，则再将其强制转为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;png&lt;/code&gt; ，推荐使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sharp&lt;/code&gt;  这个库，非~常~好~用~：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sharp.pixelplumbing.com/&quot; target=&quot;_blank&quot;&gt;sharp - High performance Node.js image processing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所以…上 Gif！&lt;/p&gt;

&lt;p caption=&quot;支持gif啦&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/optimize-of-my-blog-2/59E358FD-2A7A-4125-8223-1A51FFCCC8A3_2.gif&quot; alt=&quot;支持gif啦&quot; title=&quot;支持gif啦&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：之前贪图方便（不用鉴权、不用固定 ip 的服务器），用了 &lt;a href=&quot;https://cloud.weixin.qq.com/cloudrun&quot;&gt;微信云托管&lt;/a&gt;，还顺便实现了将摘要往微信公众号发送的逻辑。但是坑爹的是，这个服务器仅仅是我为了方便发布公众号而弄的，但是按我性子一般三个月就用一次，每次用的时候还是冷启动（它服务器默认 30 分钟无请求进来自动关闭实例，因为他们是按实例运行时间计费的），会经常性的失败，有这排查的功夫我都自己都复制粘贴文档到微信公众号的编辑器了。所以，我放弃了微信公众号，手动粘贴…也挺好！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;优化三实现-craft-中的-bookmark-和图片-caption&quot;&gt;优化三：实现 Craft 中的 Bookmark 和图片 Caption&lt;/h2&gt;

&lt;p&gt;能在基于 Jekyll 的博客系统来实现这个效果是因为我并没有直接用 Github 的 Jekyll 服务，而是自己用 Jekyll build 成 HTML 后，再 push 到仓库中实现的，原因及过程见 &lt;a href=&quot;https://www.xheldon.com/tech/my-blog-ci.html#%E9%85%8D%E7%BD%AE-github-actions-build-%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;实现 Bookmark和图片 Caption 是利用了上一步生成的 Markdown 中含有的特殊 Jekyll 标签，配合自定义的 Jekyll 插件实现的，渲染 Bookmark 就用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render_bookmark&lt;/code&gt; ，渲染图片 caption 用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render_caption&lt;/code&gt; 实现（用了刚学了两小时的 ruby 脚本语言）：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RenderBookMarkBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Block&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/url\=\&quot;(.*)\&quot;\stitle\=\&quot;(.*)\&quot;\simg\=\&quot;(.*)\&quot;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;p&amp;gt;&amp;lt;a class='link-bookmark' href='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@url&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&amp;gt;&amp;lt;span&amp;gt;&amp;lt;img src='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@img&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@desc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@url&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RenderImageCaptionBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Block&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/caption\=\&quot;(.*)\&quot;\simg\=\&quot;(.*)\&quot;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;p caption='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&amp;gt;&amp;lt;img src='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@img&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' alt='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' title='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@caption&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' /&amp;gt;&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
&lt;span class=&quot;no&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'render_caption'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RenderImageCaptionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'render_bookmark'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RenderBookMarkBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jekyll 使用插件非常简单，在根目录新建一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_plugins&lt;/code&gt; 目录，将用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt; 写的 Jekyll 插件放进去即可在 Jekyll Build 的时候加载该插件。&lt;/p&gt;

&lt;h2 id=&quot;其他细节&quot;&gt;其他细节&lt;/h2&gt;

&lt;p&gt;之前的内容算是标准 Markdown 生成的 HTML，因此一些 RSS 阅读器抓取内容后格式良好，但是本次优化加了个 Bookmark 之后，RSS 格式就乱了（截图来自 Reeder 5）：&lt;/p&gt;

&lt;p caption=&quot;Reeder5中Bookmark格式错乱&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/optimize-of-my-blog-2/B1E25DC1-17C1-45D8-8721-8160FDCA1676_2.jpeg&quot; alt=&quot;Reeder5中Bookmark格式错乱&quot; title=&quot;Reeder5中Bookmark格式错乱&quot; /&gt;&lt;/p&gt;

&lt;p&gt;于是又写了个 ruby 插件，过滤该标签，将其转成普通的 HTML 链接：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;BookmarkFilter&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bookmark_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^\&amp;lt;p\&amp;gt;\&amp;lt;a\s+class=\&quot;link-bookmark\&quot;\shref=(.*)\starget=\&quot;_blank\&quot;\&amp;gt;\&amp;lt;span\&amp;gt;(.*)\&amp;lt;\/span\&amp;gt;\&amp;lt;span\&amp;gt;\&amp;lt;span\&amp;gt;(.*)\&amp;lt;\/span\&amp;gt;\&amp;lt;span\&amp;gt;\n(.*)\n\&amp;lt;\/span\&amp;gt;\&amp;lt;span\&amp;gt;(.*)\&amp;lt;\/span\&amp;gt;\&amp;lt;\/span\&amp;gt;\&amp;lt;\/a\&amp;gt;\&amp;lt;\/p\&amp;gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;p&amp;gt;&amp;lt;a href=\1 target=&quot;_blank&quot;&amp;gt;\4&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
&lt;span class=&quot;no&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BookmarkFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再在  feed.xml 中使用即可： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.content | bookmark_filter&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;欢迎交流！&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Aug 2022 00:13:32 +0800</pubDate>
        <link>https://www.xheldon.com/tech/optimize-of-my-blog-2.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/optimize-of-my-blog-2.html</guid>
        
        <category>技术</category>
        
        <category>优化</category>
        
        <category>Jekyll</category>
        
        <category>插件</category>
        
        <category>Craft</category>
        
        <category>CI</category>
        
        <category>AppleScript</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Chrome 常用调试方法及其他</title>
        <description>&lt;p&gt;Chrome 是一款浏览器，对前端工程师来说也是一款调试利器，下面的几个功能是我在工作中最常用到的几个，下面逐个介绍。&lt;/p&gt;

&lt;h3 id=&quot;断点&quot;&gt;断点&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个应该是用的最多的基础功能，但是我面试过的很多外包同学并不知道如何使用 Chrome 的断点调试，或者听说过，但是不知道怎么用，下面简单介绍一下基本操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加断点可以直接在代码中硬编码，增增加一行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debugger&lt;/code&gt; 表达式即可，代码执行到此处会断到此处：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/B64AFAEF-676F-4AB6-BFD9-163096FFD511_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 VSCode 中，黄色下划线表示警告。一般不会使用此方式，因为此方式跟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt;  并没有明显的优势，甚至还不如前者简单，因为你用完之后还得删了，不然代码是不可用的。&lt;/p&gt;

&lt;p&gt;还有一种方式是直接在 devtools 中的 source tab 中找到源码，一般是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt; 输出后，点击控制台右侧的文件名，可以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sources&lt;/code&gt; tab 中看到源码，点击左下角格式化之后，在代码左侧行号出点击标记断点，即可调试，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/C987CDFD-FF9E-45BE-AE3B-BADD657DE1B9_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;断点后，图中红色部分的按钮，从左向右依次的含义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;继续执行&lt;/code&gt; ：点击后，断点将直接执行到下一个断点处。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setp over&lt;/code&gt; ：如果当前断点所在位置不是函数，则跟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; 一样，执行到下一行；如果是函数，则会跳过该函数继续执行到下一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setp into&lt;/code&gt; ：如果没有异步代码，则跟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setp&lt;/code&gt; 一样，执行到下一行；如果有异步代码，但它会进入到异步代码的内部第一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step out&lt;/code&gt; ：点击后，跳出当前函数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setp&lt;/code&gt; ：执行下一行同步代码，跟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step into&lt;/code&gt; 不一样， 它会跳过异步代码的执行；如果当前断点在函数处的话，会进入到函数调用内部第一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;暂时停用/激活断点&lt;/code&gt; ：首次点击后会临时禁止断点功能，就像没有打断点一样代码不会停止执行，下方的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Breakpoints&lt;/code&gt; 中的断点会整体置灰：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/91E6FC8D-D932-4412-9D5D-EBC5E92BD8EA_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/0AC85FEA-3449-49A8-8BF9-A619CF2D924E_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;将断点停在报错处&lt;/code&gt; 点击高亮后启用，代码将会自动停止到任何 throw error 的地方，无论是否是被 catch 住，也无论是 http 错误还是什么错误。注意必须把下面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pause on caught exceptions&lt;/code&gt; 勾选才行，不勾选等于无效：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/D99CEF49-A530-412E-B632-307C291C75E0_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此功能最好是在代码执行一遍完成后，页面载入完成后，开始交互的时候打开，否则可能一进入页面就会报错，包括 React 中的合法报错等，导致无法正常加载页面。&lt;/p&gt;

&lt;p&gt;直接放一张官方断点的图：&lt;/p&gt;

&lt;p caption=&quot;官方图👆🏻&quot;&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/17ED1675-13EA-42A3-8B4D-83587390D7EF_2.png&quot;  alt=官方图👆🏻 title=官方图👆🏻 /&gt;&lt;/p&gt;

&lt;p&gt;上图中上述的按钮下面有一系列的 toggle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;‣&lt;/code&gt; 三角号可以点击，依次为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Watch&lt;/code&gt; 可以监测断点处的任何可访问到的上下文变量以供显示，如果变量不存在或者无法访问，如访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.b.c&lt;/code&gt; 的时候，a 不存在，那么会显示不可用。当断点断的时候，该位置输入的变量会自动显示，而不用鼠标悬浮上去（像上面官方图一样）查看变量，很方便。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Breakpoints&lt;/code&gt;  表示已经有的断点。checkbox 打勾的是可用的断点，未打勾的是暂时忽略的断点（可以临时打勾或者取消掉）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/5F3A5468-63E9-47EF-9E80-461D5988E2C3_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当前执行到的断点，背景是黄色的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Threads&lt;/code&gt; 表示当前调用的文件线程，当期页面 JavaScript 线程表示为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main&lt;/code&gt; 中。此部分一般用不到，只是用来调试&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web Worker&lt;/code&gt; 比较有用，也可以用来在当前页面调试 Chrome 浏览器插件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scope&lt;/code&gt; 显示当前断点处的可访问到的变量值。因为 JavaScript 的闭包和调用栈的特性，会显示很多闭包中的变量：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/54D3E302-A251-4411-B366-D69B4C7B6CEE_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Call Stack&lt;/code&gt; 即函数的调用栈，最顶层的是最近的调用，可以通过点击不同的函数在其之间来回跳。需要注意的是，跳转的时候不会真的再次执行到那个位置，只是方便你查看那个位置的闭包变量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ui-断点&quot;&gt;UI 断点&lt;/h3&gt;

&lt;p&gt;有些情况下，你不知道或者无从定位一个 UI 问题为什么会这么变化。比如，你的同事写了一个 hover 到按钮上之后，按钮颜色变化的代码。你需要为这个逻辑添加新的逻辑，但是你并不知道他的代码逻辑写在哪个文件（他没有交接工作就休假了，可恶！）。&lt;/p&gt;

&lt;p&gt;你发现 hover 到按钮上的时候，按钮会增加个 class 类名，于是你可以使用 dom 断点进行调试，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elements&lt;/code&gt; tab 中，你需要检查的那个元素上右键：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/C9A19CAE-BEC6-4180-B618-73CA95E0CA90_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UI 断点可以将代码停到你指定的 UI 事件所执行的代码发生之前的那一刻，UI 事件包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;子树修改：如果子树有任何修改，如增加、属性变更等，会将代码断到该逻辑即将执行的地方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;属性修改：如果当前右键的元素有任何修改，会将代码断到该逻辑即将执行的地方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;节点移除：如果当前右键的元素移除，会将代码断到该逻辑即将执行的地方。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个例子，飞书文档中，如果 block 聚焦，则会在节点上添加一个 focus 类名：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/3690BB50-7AB1-4798-AEE3-98D1EEC495B3_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/C7500F06-2A4D-47A5-8DE6-2ED7CB43868B_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时就可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attribute modifications&lt;/code&gt; 进行断点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/9A783370-A839-4995-A5E3-2C1D4421ED7D_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，默认情况下线上代码是压缩后的，点击左下角的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; 就会格式化：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/A4049060-72F8-476F-A1D2-A21B099EF177_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;格式化之后，Chrome 会新建一个 tab，在文件后面加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:formatted&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/CD25F7CA-7ABD-4B32-A28D-0E60935DB707_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要注意的是，如果你右键的元素在变更的时候是父节点变更，如父节点整体移除，则 UI 断点不会执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;overwrite&quot;&gt;Overwrite&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Charles 有类似的功能叫 Map js（没记错的话），ProxyMan 的类似功能叫 Map Local，都是一个意思。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有时候，因为上线/测试链路比较长（尤其是编辑器这种基础工具组件，需要发包），想快速验证一个 case 的时候就会比较麻烦，因此可以使用 Chrome 的 Overwrite 功能。&lt;/p&gt;

&lt;p&gt;此功能类似于 Charles 的 Map js 功能，即可以将本地文件作为页面的请求进行响应，你需要先在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sources&lt;/code&gt; 中启用该功能，当然，如果没有执定本地的文件存储的位置，需要先让你指定位置才行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/B5ADFA65-51E3-44AD-967F-311A3604D016_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时 Chrome 会提醒你需要本地该路径的完全访问权限，同意即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/416C9680-96DF-40AF-861B-6C74EFC6C1DF_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择一个本地文件夹后，（这里我选用的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Developer/Overwrite&lt;/code&gt; 文件夹）就可以启用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Overwrite&lt;/code&gt; 功能：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/362CACE4-9BBD-41B3-80FD-A69C85EF8209_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后转到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network&lt;/code&gt; tab，选择一个资源，如 css/js，我这里选择的是 js：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/31AB1FF1-4016-4818-AFB3-3B823209319E_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意，如果没有在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sources&lt;/code&gt; 中启用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Overwrite&lt;/code&gt; 的话，这里是不会显示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save for overrides&lt;/code&gt; 的。&lt;/p&gt;

&lt;p&gt;之后就可以各种修改该文件，然后刷新页面查看修改后的效果了。&lt;/p&gt;

&lt;p&gt;需要注意的是，如果 js 文件请求后有时间戳，则 Overwrite 不会生效，因为 Chrome 是使用严格的路径匹配来 map 文件的。&lt;/p&gt;

&lt;h3 id=&quot;snippet&quot;&gt;Snippet&lt;/h3&gt;

&lt;p&gt;准确说，这个不算是「调试方法」，但是平常有个代码验证的片段，我也会存到这个里面，相当于一个 Sublime（可以对输入过的变量进行自动补全），挺好用的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/E231449D-FED8-4E4E-8446-D6A3AAEC87A4_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;filesystem&quot;&gt;Filesystem&lt;/h3&gt;

&lt;p&gt;该功能跟上面几个在同一个位置，用来实时同步浏览器中的修改到本地文件系统。该功能适合一个简单的 HTML Web 服务，如 Express 这种服务端返回 js/css/html 等的本地调试时候用。&lt;/p&gt;

&lt;p&gt;但是该功能官方明确说了，不适合 React App。因为现在基本项目都是 React、Vue 等的现代框架构建的，因此此功能用的较少，这里仅放个官方截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/image.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;h3 id=&quot;macvim&quot;&gt;MacVim&lt;/h3&gt;

&lt;p&gt;上面的 Overwrite 来的 js 一般都是压缩后的线上代码，有些可能会比较大，所以我一般会用 Vim 打开后格式化一下。Vim 配置起来太费劲，而 MacVim 提供了开箱即用的体验，稍加改造即可为己更好的所用。为什么用 MacVim 是因为它性能非常强，格式化大到几十 Mb 的文件都是几秒钟的事情。我一般都会配置一个 js-beautify 进行格式化，虽然叫 js-beautify，但是它可以格式化 js、css、html。&lt;/p&gt;

&lt;p&gt;使用 js-beautify 需要先安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim-plug&lt;/code&gt; ，它是一款 vim 插件管理器：&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;https://github.com/junegunn/vim-plug&lt;/a&gt;，使用步骤见：&lt;a href=&quot;https://github.com/junegunn/vim-plug/wiki/tutorial&quot;&gt;https://github.com/junegunn/vim-plug/wiki/tutorial&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：安装需要魔法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js-beautify&lt;/code&gt; 使用这个：&lt;a href=&quot;https://github.com/beautify-web/js-beautify&quot;&gt;https://github.com/beautify-web/js-beautify&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这是我的 vim 配置，我使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; 快捷键作为调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js-beautify&lt;/code&gt; 的方式，这样就不用每次都输入命令了：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;set number
set relativenumber
set smartindent
set autoindent
set hlsearch
set display=lastline
set scrolloff=3
set laststatus=2
set showmatch
set ruler
set guifont=Monaco:h12
syntax on
autocmd FileType *.js setlocal equalprg=js-beautify\ --stdin
nmap [] :%!js-beautify&amp;lt;CR&amp;gt;
colorscheme evening
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')
Plug 'jelera/vim-javascript-syntax'
call plug#end()
if !has('gui')
    set term=$TERM
endif

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vscode&quot;&gt;VSCode&lt;/h3&gt;

&lt;p&gt;VSCode 也有断点调试功能（感谢 Chrome 内核），但是只能调试 Node 应用（可以配合浏览器插件调试 Web 应用，但是没必要，因为已经有 Chrome 了），基本使用方法跟 Chrome 类似，这里就不介绍了，放个图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-use-of-chrome-devtools/D7AD7683-F0C4-46D2-8632-2ADB519B230C_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Aug 2022 20:39:47 +0800</pubDate>
        <link>https://www.xheldon.com/tech/the-use-of-chrome-devtools.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/the-use-of-chrome-devtools.html</guid>
        
        <category>技术</category>
        
        <category>Chrome</category>
        
        <category>调试</category>
        
        <category>技巧</category>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>差生的学习问题</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文是作为职业高中的教师老爹写的，虽然不是教语文，但是平常也爱写点教学感悟、生活体会什么的。此类文章也许投稿到某个报纸的教育专栏会更好，但是一方面苦于没有这方面的门路，一方面即使投稿后也想将其放到网上以让更多人看到，因此他让我帮他放到我的博客中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;差生是指那些听不懂课，看不懂书，作业不会做，考试成绩差的学生。这样的学生一般学习态度差，给人的感觉是不求上进。其实这只是表面现象，其背后的原因是学习困难。因为听不懂课，看不懂书，做作业太难，所以不愿意做作业。别的学生几分钟就能完成的作业，他需要很长的时间也做不好。由于学习困难，产生了厌学的情绪。这种情况首先找到学习困难的原因，帮助他克服困难，使学习过程变得轻松愉快，克服厌学情绪，他的成绩才能有所提高。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1560785496-3c9d27877182.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;一听不懂课怎么办&quot;&gt;一、听不懂课怎么办?&lt;/h2&gt;

&lt;h3 id=&quot;听不懂课是常见的现象&quot;&gt;听不懂课是常见的现象&lt;/h3&gt;

&lt;p&gt;原因是基础知识有欠缺，理解能力差，如果听不懂课，那一定要趁课下时间把课本看懂，遇到不懂的地方，就问老师，或同学。老师会及时发现教学中的一些问题，以改善以后的教学工作。老师讲课，要降低学生理解知识的难度，要从简单的、初步的、直观的知识开始讲起，多补习基础知识。&lt;/p&gt;

&lt;p&gt;教师的教学语言，要贴近学生的生活经验，让学生有真情实感。只有真情实感才能触动学生的内心，才能抓住学生的注意力。&lt;/p&gt;

&lt;h3 id=&quot;教学要符合认识的规律&quot;&gt;教学要符合认识的规律&lt;/h3&gt;

&lt;p&gt;理性认识必须以感性认识为基础，教学上要先建立感性认识，没有条件也要积极创造条件，让学生在实践中学习，实地观察，动手操作，通过思考分析原因，对观察到的现象做出准确的描述和科学合理的解释，从而总结出概念和规律。在感性认识的基础上建立理性认识。举例说明问题不能脱离学生的生活经验。&lt;/p&gt;

&lt;p&gt;要经常对教学效果进行检测，及时发现学生的掌握情况不断改进教学方法。&lt;/p&gt;

&lt;p&gt;不能让困难积累，遇到困难要及时解决，一些同学听不懂课，下课也不看书，不会就算了。这样知识欠缺就会越来越多，学习就会越来越困难。&lt;/p&gt;

&lt;p&gt;课能听懂，书能看懂，题通过努力能够做会，学习是件快乐的事情。有个学生在普通高中上学，因为学习成绩差，听不懂课，学校要求又严格，就不愿上学了。他的家长就把他送到职高上学，在职高上一段时间，他家长发现孩子变得快乐了，每天唱歌回家，以前在家从不学习，家长怎么劝都不听，现在居然开始学习了，做作业看书到夜里十点多。他爸说职业高中的老师比普通高中的老师教的好。不是职高的老师教的好，而是他的孩子能学会，职高的教材比普高的教材简单，孩子在普高学不会所以不学，在职高能够学会，所以开始学习了。&lt;/p&gt;

&lt;h3 id=&quot;学习难度应与学习能力相匹配&quot;&gt;学习难度应与学习能力相匹配&lt;/h3&gt;

&lt;p&gt;学习内容不能太简单，也不能太难，要让学生感觉通过努力可以学会。学习能力强，可以跳级，学习能力差就要留级，人们喜欢做具有一定挑战性的活动，从中能获得快感。如果学习内容难度太大，通过努力也学不会，就会产生厌学的情绪。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1605711285791-0219e80e43a3.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二正确的学习方法读书与做题&quot;&gt;二、正确的学习方法：读书与做题&lt;/h2&gt;

&lt;h3 id=&quot;书山有路勤为径学海无涯题作舟&quot;&gt;书山有路勤为径，学海无涯题作舟&lt;/h3&gt;

&lt;p&gt;学习方法是多读书多做题。首先把课本读懂，一遍一遍地读，读一遍是不行的，多读几遍才能记住，才能把知识融会贯通。书读懂了就等于学会了。如果书读不懂怎么办？那是因为你的知识有欠缺的地方，就像看电视剧，如果不是一集接着一集连着看的，故事情节看着看着就看不懂了。你需要把欠缺的知识补起来。&lt;/p&gt;

&lt;p&gt;其次是做题，看懂书还要多做题，才能灵活运用所学的知识。从简单的题开始做。如果感觉做题比较困难，就先看例题，看有答案的习题，要看那种有详细分析和解题步骤的学习资料。看会了，自己再做一遍，再思考一下有没有其他的解题方法，做到能举一反三。&lt;/p&gt;

&lt;p&gt;要做到每做一道题，要达到真正会做，不要似懂非懂，真正弄明白方法原理，而不是死记硬背。有时候感觉自己学会了，再做一遍还不会做。做数学题的时候经常发生这种现象。数学差的学生特别擅长死记硬背，学习数学也使用死记硬背的方法。数学有数学的思维方法，数学是不需要死记硬背的，而更强调的是思维方法和运算。结果是根据条件用用公式，定理数学方法算出来的。采用死记硬背的方法学习数学就不灵了。&lt;/p&gt;

&lt;p&gt;小学初中高中的知识是相互连贯的，如果有一部分有欠缺，遇到这方面的问题就无法理解，学习就会遇到困难，就会产生听不懂课，看不懂书，题不会做的情况。哪里有欠缺就从哪里开始补起。&lt;/p&gt;

&lt;p&gt;有位在大学教数学的教授介绍他的学习经验，他上高中时刚刚恢复高考，由于小时候不重视学习，他的基础知识很差，做数学题时感觉困难很大，这也不会那也不会，连乘法口诀都忘了，就从小学开始自学乘法，遇到解方程等不会的问题，就把初中的书找来看，从基础知识开始学起，基础知识掌握牢固之后，做题越来越容易了，学习上遇到的困难也少了。如果你能够自己学习，任何困难都不能阻挡你的进步。&lt;/p&gt;

&lt;h3 id=&quot;温故而知新学而时习之&quot;&gt;温故而知新，学而时习之&lt;/h3&gt;

&lt;p&gt;「习」的意思就是多复习过去学过的东西，把基础知识打牢。基础知识扎实了，理解新事物的能力就会增强。学习之后要经常练习，练习多了才能记得牢，才能灵活运用。学过知识要经常复习，把新学的知识和过去的知识进行融会贯通，总结出规律，便于理解和记忆。&lt;/p&gt;

&lt;h3 id=&quot;学而不思则罔思不学则殆&quot;&gt;学而不思则罔，思不学则殆&lt;/h3&gt;

&lt;p&gt;一道题不会所有类型的题都不会，一道题会了所有类型的题都会了。做一道题一定要彻底搞明白做题的方法和步骤，不要似懂非懂，一知半解。做题不一定要多但一定要做到能够消化吸收。&lt;/p&gt;

&lt;p&gt;读书是学习的过程，做题时思考的过程，把读书和做题结合起来，也就是把学习和思考相结合，自古以来都被当作最有效的学习方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1560785477-d43d2b34e0df.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三背书的方法先记住文字的意思再记怎样叙述&quot;&gt;三、背书的方法：先记住文字的意思，再记怎样叙述&lt;/h2&gt;

&lt;h3 id=&quot;正确理解&quot;&gt;正确理解&lt;/h3&gt;

&lt;p&gt;如果要背一段文字就先理解文字的意思，记住文字的意思，再记怎样叙述。先用自己的话把意思说出来，再按课本上的叙述把意思说出来。如果说不出来，是因为关键词没有掌握。关键的名称，动作，状态，不知道用什么词语描述。&lt;/p&gt;

&lt;p&gt;在背书时，理解文字的意思很重要，如果不理解文字的意思就记不住文字的意思，记不住文字的意思也就不能叙述文字的意思，记忆起来就比较难。经常出现叙述混淆颠倒甚至逻辑错误的情况。叙述的和原来的意思大相迳庭。例如在物理上要叙述电磁继电器的工作原理，书上是这样叙述的，电磁继电器的线圈通电产生磁场，将街铁吸合，带动开关动作。线圈断电，磁场消失，衔铁在拉力弹簧的作用下释放，开关复位。如果理解意思了就知道电磁继电器事实上是电磁力控制的开关，就可以用自己的话来叙述：线圈通电产生电磁吸力，将开关吸合，线圈断电磁吸力消失，开关复位。&lt;/p&gt;

&lt;p&gt;有个同学不理解意思，他叙述说线圈通电开始膨胀，开关闭合，线圈断电收缩，在弹簧的作用下开关断开。还有同学说线圈通电开关闭合，产生磁场，线圈断电，开关断开，磁场消失，把因果关系搞错了。为什么会出现这种现象呢？那是几年以前的事情，学校的仪器设备十分缺乏，该做的实验不能做，上课全靠老师在黑板上写画，教学中用到的东西学生都没有见过，该动手操作的没有动手操作，没有产生对知识的感性认识，上课就是要求学生死记硬背课本上的内容。不求甚解的死记硬背，记起来非常难，好不容易记住了，明天就忘了。现在情况好多了，国家很重视教育，教学上所用的仪器设备学校都有了，教室里还有大屏幕电子白板，通过实物演示和电脑动画学生一看就知道工作原理。&lt;/p&gt;

&lt;h3 id=&quot;准确叙述&quot;&gt;准确叙述&lt;/h3&gt;

&lt;p&gt;知道工作原理，下一步就是叙述。但是，知道电磁继电器的工作原理不一定会叙述，就像我们看到的现象不一定能把它很好地叙述出来。因为你还得记住一些事物的名称，不知道哪个部分叫线圈，哪个部分叫衔铁，虽然知道意思，但不知道关键的东西叫什么名字，只能说那个东西通电，那个东西动作，就像看一场篮球比赛，看着很热闹，但一个人也不认识怎么去说呢，只能说那个人，这个人，或者那个高个，那个胖子，那个穿什么衣服的人等等。文学大师能写出好文章，为什么我们写不出来呢？因为虽然是我们天天见到的现象，但是在我们知识库里没有足够的词汇来描述。所以记住关键词很重要，一些东西怎样称呼，一些动作用什么语言描述，一些状态用什么语言形容。意思弄明白了，关键词也记住了，叙述起来就不会出错了。&lt;/p&gt;

&lt;p&gt;记忆是对感觉的记忆，感觉越丰富，记忆越牢固。回忆起来就越容易。如果感觉比较单一，就越容易遗忘，因为联想的线索太少了。感觉越丰富，联想的线索就越多，越容易联想，所以就不容易忘记。有时拿在手里的东西，刚放下一小会儿就找不到了，不是因为你得了健忘症，而是联想的线索太少了。记不住的东西就通过一件事去记忆。实地观察，动手操作，和别人讨论，这样会增加联想的线索，回忆起来就容易。&lt;/p&gt;

&lt;p&gt;不求甚解的死记硬背，不仅占用大量的学习时间，而且非常耗费精力，是造成学生厌学的原因。遇到必须要背的东西要弄明白道理，记住一些关键的词语，和事物之间的逻辑关系。这些做到了，记起来就简单了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1599493782407-2fe53235d2c8.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;四教与学态度决定一切&quot;&gt;四、教与学：态度决定一切&lt;/h2&gt;

&lt;p&gt;教学过程是教师和学生双向互动的过程。教师教学就是帮学生理解所学的知识，记住所学的知识，达到灵活运用的目的。学生对知识理解了，记住了，会灵活运用了，就学会了。&lt;/p&gt;

&lt;h3 id=&quot;学生是教学的主体教学以学生为主&quot;&gt;学生是教学的主体，教学以学生为主&lt;/h3&gt;

&lt;p&gt;只有学生积极主动的学习，教师的教学才能起到作用。就像鸡蛋在外部条件下变成小鸡，教师教学是外因，学生主动学习是内因。外因通过内因起作用。教师讲课一定要让学生能够理解，能够听懂。学生听不懂，不理解，就不能启发学生思考，教学是没有效果的。学生要主动积极的学习，如果学生不愿意学习，对所学的内容不感兴趣，就不会认真听课，老师讲的再多也没有用。无论外界条件怎样，石头不会变成小鸡。学习是学生自己的事，是不可强求的，也是不可代替的。&lt;/p&gt;

&lt;h3 id=&quot;学生要主动学习态度积极教学才有意义&quot;&gt;学生要主动学习，态度积极，教学才有意义&lt;/h3&gt;

&lt;p&gt;子曰：不愤不启，不悱不发。举一偶不以三偶反则不复也。翻译过来就是，孔子说：教导学生不到他想弄明白而不得的时候就不去开导他，不到他想说出来而说不出来的时候就不去启发他，交给他一方面的东西他却不能举出其他三方面的东西就不要再教他了。意思是如果学生不主动积极的学习，对学习不感兴趣，就不要去教他。教他他也不学，他不学你教不会，徒劳无功。学习态度非常重要。学习态度积极的学生，有不会的问题会主动向老师问，这样的学生自学能力很强，能主动积极的学习。从来不问问题的学生，遇到不会的问题，不会就算了。也没有打算学会。刚考过的试卷再做一遍还是不会，该考多少分还是考多少分。考试就是查漏补缺的，好不容易发现一个自己不会的问题应该立即解决才对，自己不去解决，该不会的还是不会，永远也进步不了。学习是自己的事，要靠自己努力，就像学习体育的运动员，如果自己不刻苦训练，力量和技术就不会进步。学习也是这样，是不能由别人代替的，老师教的再好也教不会不学习的学生。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/the-problem-of-poor-student/photo-1546410531-bb4caa6b424d.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;差生成绩差不是一朝一夕形成的。长期的学习困难没有克服，困难日积月累就会越来越多，就会对学习失去信心，从而放弃学习，上课看小说，下课玩手机，作业不做，成绩越来越差。遇到学习困难要及时解决，才不至于积累起来，困难越来越大。&lt;/p&gt;
</description>
        <pubDate>Thu, 26 May 2022 19:10:28 +0800</pubDate>
        <link>https://www.xheldon.com/life/the-problem-of-poor-student.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/life/the-problem-of-poor-student.html</guid>
        
        <category>生活</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>AppleScript 初体验</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;最近新买了 Mac Studio，配备了 M1 Max 芯片和 64G 的内存，性能非常强。与此同时，之前的 &lt;a href=&quot;/tech/my-blog-ci-in-2022.html&quot;&gt;博客处理流程&lt;/a&gt; 中，因为需要使用 Github Action 将从 Craft 拉取的图片（这一步很快，毕竟二者都在国外），往腾讯云 COS传的时候，经常遇到网络过慢的问题&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/FBB4B556-8472-4C92-8EFD-E07015DC5FBB_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;调研了一番发现，Github 貌似 &lt;a href=&quot;https://github.community/t/is-there-a-way-to-specify-virtual-machine-region/120438&quot;&gt;不支持设置 Action 服务器的区域&lt;/a&gt;。鉴于此，所以打算之后将发布流程放到本地，，以加快构建流程，遂有此文。下面的 AppleScript 简称 AS。&lt;/p&gt;

&lt;h2 id=&quot;为什么用-applescript-而不是其他&quot;&gt;为什么用 AppleScript 而不是其他？&lt;/h2&gt;

&lt;p&gt;首先，我当然是想尽可能的缩短操作路径和复杂度，因此先规定了操作步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;点击 Craft 中的发布按钮。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;本地构建，同时显示出构建 log 在终端。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将构建结果推送到 github。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于需要在一个 App 中通过链接调用另一个 App，因此使用 AppleScript 是唯一选择。不过，虽然使用的是 AS，但是其实执行的还是已有的 js 文件，只是将 &lt;a href=&quot;https://github.com/Xheldon/craft_publish_ci/blob/master/.github/workflows/publish.yml&quot;&gt;craft_publish_ci 中的 workflow任务&lt;/a&gt; 挪到了本地执行而已。&lt;/p&gt;

&lt;h2 id=&quot;applescript-简介&quot;&gt;AppleScript 简介&lt;/h2&gt;

&lt;p&gt;概念图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/6C1FA0DD-5875-4C15-BCA8-495B34F5F699_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;applescript-能做什么&quot;&gt;AppleScript 能做什么&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;能与用户交互，如响应用户输入、通知中心发送通知等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;能控制其他 app ，如果其他 app 提供了相关 AS 接口可以直接控制，如果没有提供相关接口则需要通过 AS 语法来获取界面上的按钮等操作元素进行操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;能执行自动化任务如发送邮件、执行定时脚本、打开音乐播放器、锁屏、响应自定义的 URL Scheme 后执行脚本等。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;基本语法&quot;&gt;基本语法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;每行的前面加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;---&lt;/code&gt;（三个短横线）或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; 表示注释本行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(*&lt;/code&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxx*&lt;/code&gt;&lt;/em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt; （括号+星号）包裹的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxx&lt;/code&gt; 表述块注释掉 xxx 的内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他的基本跟口头预类似，不过如果你对英文语法不自信，比如不清楚 besides against over 等在具体语境中的意思，建议还是老老实实使用基本语法。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;applescript-的形式&quot;&gt;AppleScript 的形式&lt;/h3&gt;

&lt;p&gt;AppleScript 常用的有两种形式，Script（脚本）、Application（应用），这里只介绍前两种，Script bundle 和 Text 我没用这里不展开。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/08F57517-C6AC-49C1-9B5E-9606F2DD2A8E_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：这里需要说明一点的是，即使是相同的代码，保存成脚本运行和保存成应用运行，界面是不一样的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;脚本&quot;&gt;脚本&lt;/h4&gt;

&lt;p&gt;脚本顾名思义就是像 js 一样的可执行文件，不同的是 as 是在 Mac 桌面环境执行，而 js 是在 Chrome 中执行的。双击即可运行。下图是脚本 process 显示进度的界面，通过点击脚本右上角的「运行」按钮运行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/A8E4D5D2-C4A6-4E6D-80DA-7E3A0EFA7D41_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;应用&quot;&gt;应用&lt;/h4&gt;

&lt;p&gt;保存成 Application 的 AS 的后缀名跟普通的应用如 Safari、Chrome、微信等应用一样，会以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.app&lt;/code&gt; 结尾，也可以查看包内容。有多种运行方式如 URL Scheme 调用、双击、拖拽内容到 app 图标上，你需要写相关的事件函数来响应相关用户操作。下图是 应用process 显示进度的界面，通过双击 「xxx.app」运行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/E0B4F2DA-21AA-4EF1-B059-9C500E18B67C_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;p&gt;除了上述两者，其他的不常用，不过如果你需要将 script 保存成服务以在状态栏或者任意界面的右键的服务中能够调用该脚本，这需要上述两者之外的形式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/D09A2EEB-72DC-4CA1-8812-59E4BC4206DB_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你可以选择将脚本保存成系统 Service，此时上述 process 代码运行的时候，进度条会显示在顶部状态栏：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/B936F8C6-DCA3-4B98-B995-7F4F3F013E74_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;常用操作代码&quot;&gt;常用操作代码&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;以下操作基于「应用」类型的 AS，下列的语法在终端中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osascript -e '语法内容'&lt;/code&gt; 可以快速验证。需要注意的是，类似于多行的表达如 process 进度条的显示，osascript 是没办法做到的，虽然你可以在很多多行命令如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tell&lt;/code&gt; 中使用多个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; 参数来串联如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osascript -e ‘tell application “Finder”’ -e ‘end tell’&lt;/code&gt; ，但是此语法对 process 进度条无效。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;用户交互&quot;&gt;用户交互&lt;/h3&gt;

&lt;h4 id=&quot;在通知中心显示信息&quot;&gt;在通知中心显示信息&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;display notification &quot;通知内容&quot; with title &quot;通知 title&quot; subtitle &quot;通知副标题&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/AC96218F-E238-4695-9220-7933C27BC841_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;弹窗&quot;&gt;弹窗&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;display dialog &quot;这是个通知&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/B945A1B9-4704-4F39-9A68-C0287846A061_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;获取用户输入&quot;&gt;获取用户输入&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;display dialog &quot;What's your name?&quot; default answer &quot;&quot; with icon note buttons {&quot;取消&quot;, &quot;确认&quot;} default button &quot;确认&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/F4002573-AD3C-4D4E-BF98-9B6696788442_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：AS 没有办法生成类似表单一样的组件，只能生成上面这种对话框，类似网页中的 prompt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;播放给定文本&quot;&gt;播放给定文本&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;say &quot;What is your name?&quot; using &quot;Alex&quot; speaking rate 140 pitch 42 modulation 60
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;其他-1&quot;&gt;其他&lt;/h4&gt;

&lt;p&gt;让用户选择文件夹、文件、颜色、从列表中选择一项等，暂时省略。&lt;/p&gt;

&lt;h3 id=&quot;执行命令行&quot;&gt;执行命令行&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;do shell script &quot;echo $PATH&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意，命令行中的 PATH 环境变量为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin:/bin:/usr/sbin:/sbin&lt;/code&gt; ，因此无法在其中执行诸如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt; 、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvm&lt;/code&gt; 等后来安装的命令，这些命令执行的时候需要手动指定命令所在位置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;执行 node 脚本：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;set node to &quot;/Users/x/.nvm/versions/node/v14.19.1/bin/node&quot;
set appPath to &quot;/Applications/Xhelper.app/Contents/Resources/Scripts/&quot;
do shell script node &amp;amp; &quot; &quot; &amp;amp; appPath &amp;amp; &quot;index.js&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;获取上一个语句的输出结果&quot;&gt;获取上一个语句的输出结果&lt;/h3&gt;

&lt;p&gt;直接在上一句语句后立即使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result&lt;/code&gt; 表示结果即可：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;do shell script &quot;echo $PATH&quot;
display dialog result with title &quot;通知&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/6214E292-E4CB-49BC-B8D2-945C135E5B45_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;显示调试信息&quot;&gt;显示调试信息&lt;/h3&gt;

&lt;p&gt;直接使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; 语句即可，然后在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Script Editor&lt;/code&gt; 下方的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Replies&lt;/code&gt; 中获取输出信息，可以在这里看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell script&lt;/code&gt; 命令执行的过程中，脚本向控制台输出的内容，如执行 js 脚本的时候的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt; 等。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;log do shell script &quot;echo $PATH&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/1089533E-DE38-418F-A20C-592669941C2D_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;显示进度&quot;&gt;显示进度&lt;/h3&gt;

&lt;p&gt;显示进度用到 progress ，语句相对来说比较复杂，因为需要显示不同的状态进度，需要多行：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;set progress total steps to 3
set progress completed steps to 0
set progress description to &quot;处理中...&quot;
delay 1
set progress completed steps to 1
delay 1
set progress completed steps to 2
delay 1
set progress completed steps to 3
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;相关的截图可以在上面看到。&lt;/p&gt;

&lt;h3 id=&quot;延迟一段时间后执行&quot;&gt;延迟一段时间后执行&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;delay n
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;  表示秒数，支持小数。一般用来模拟用户操作的时候的延迟操作，否则可能因为脚本操作过快页面还未来得及显示等。一些奇怪的问题也可以通过延迟执行来解决，此语句可以类比于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; 大法。&lt;/p&gt;

&lt;h3 id=&quot;调用其他应用&quot;&gt;调用其他应用&lt;/h3&gt;

&lt;p&gt;注意，此处会有系统警告，需要你确认才能执行:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/898D7F67-700E-40F2-AC6C-D999F5543578_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;确认后可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;设置-安全与隐私-隐私-自动化&lt;/code&gt;中确认：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/47444D53-68E4-4518-87FD-521AE42B737F_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以调用其他应用来执行相应的操作，下面是唤起 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Terminal&lt;/code&gt; 应用后，激活然后执行命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;tell application &quot;Terminal&quot;
	if not (exists window 1) then reopen
	activate
	do script &quot;echo $PATH&quot; in window 1
end tell
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此语句做了一个判断，如果第一个打开的窗口存在，则激活之，然后在其内执行命令（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do script&lt;/code&gt; ）；如果不存在的话则会新建一个窗口然后在其内执行命令。因为每个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do script&lt;/code&gt; 都会打开一个新的 Terminal 这个判断可以保证复用窗口。不过需要注意的是，如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window 1&lt;/code&gt; 内已经有一个已经存在的进程（如 server 未中断），那么这个命令是不会执行的，还需要额外的判断，此处不展开。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/8701C38B-8CE9-479A-816A-9126692B313D_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;响应-url-scheme&quot;&gt;响应 URL Scheme&lt;/h3&gt;

&lt;p&gt;有些时候你不想先找到 AS 脚本，然后双击运行；或者有时候你需要从另一个应用中调起你写的 AS 应用，这个时候就用到了 URL Scheme，少数派有 &lt;a href=&quot;https://sspai.com/post/31500&quot;&gt;一篇介绍&lt;/a&gt;，可以看看。&lt;/p&gt;

&lt;p&gt;首先你需要修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; 文件，可以在 Script Editor 的右侧，右键 「显示在 Finder」 中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/E1F3DFE5-54E3-4615-9A74-1B084686CC37_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后向上一级，可以看到该文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/DE5F9B08-4F60-4B2A-9645-DF37B420C96B_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;内容是一个类似 XML 的东西编辑之，在其内加入如下字段：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;array&amp;gt;
	&amp;lt;dict&amp;gt;
		&amp;lt;key&amp;gt;CFBundleURLName&amp;lt;/key&amp;gt;
		&amp;lt;string&amp;gt;Open File&amp;lt;/string&amp;gt;
		&amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
		&amp;lt;array&amp;gt;
			&amp;lt;string&amp;gt;xhelper&amp;lt;/string&amp;gt;
		&amp;lt;/array&amp;gt;
	&amp;lt;/dict&amp;gt;
&amp;lt;/array&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后确认一下，用 XCode 打开该文件可以看到类似的条目：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/901047E8-38AA-4B9C-BA60-680EC60864F5_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;表示添加成功。&lt;/p&gt;

&lt;p&gt;这个操作的意思是，将该 AS 应用响应以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xhelper&lt;/code&gt; （可以任意修改成你想要的开头，不要与已有的重复即可）开头的 URL。&lt;/p&gt;

&lt;p&gt;设置完成后，需要在 Script Editor 中保存一下，或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd + L&lt;/code&gt; 一下或者运行一次（或者都做一遍），重新编译，然后才能生效。&lt;/p&gt;

&lt;p&gt;然后，为了让 AS 响应该 URL，需要设置一个事件监听：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;on open location this_URL
	display dialog this_URL
end open location
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this_URL&lt;/code&gt; 即为以你 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xhelper&lt;/code&gt; 打开的链接。&lt;/p&gt;

&lt;p&gt;此时在浏览器中（截图是 Chrome）测试一个链接：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/01F724A1-041B-4143-80CC-5F4F3D6ECFC8_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后 AS 应用就会响应然后弹窗显示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xhelper://你好！&lt;/code&gt; ，注意这里是不用 encode 编码的。&lt;/p&gt;

&lt;h2 id=&quot;我的使用&quot;&gt;我的使用&lt;/h2&gt;

&lt;p&gt;在这里放出我自己的 Craft build 代码，用的是上述的 URL Scheme，其中的 node 执行的 js 都是从 &lt;a href=&quot;/tech/my-blog-ci-in-2022.html&quot;&gt;之前的工作流&lt;/a&gt; 改造的，没有什么新逻辑。另外 AS 的语法比较口语化，直接看就能看懂每句话是什么意思，这里就不一一解释了。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;on open location this_URL
	try
		set startOffset to offset of &quot;://&quot; in this_URL
		set the content to text from (startOffset + 3) to -1 of this_URL
		set node to &quot;/Users/x/.nvm/versions/node/v14.19.1/bin/node&quot;
		set appPath to &quot;/Applications/Xhelper.app/Contents/Resources/Scripts/&quot;
		--- 如果有两个参数表示需要发布到 wechat，如果只有一个参数则参数即为 base64 编码的内容
		set AppleScript's text item delimiters to &quot;&amp;amp;&quot;
		set arguments to every text item of the content
		set AppleScript's text item delimiters to &quot;&quot;
		set listLength to the length of arguments
		if listLength = 2 then
			set realContent to item 2 of arguments
			do shell script &quot;echo &quot; &amp;amp; realContent &amp;amp; &quot; &amp;gt; &quot; &amp;amp; appPath &amp;amp; &quot;content.base64.txt&quot;
			tell application &quot;Terminal&quot;
				if not (exists window 1) then reopen
				activate
				set alive to do script node &amp;amp; &quot; &quot; &amp;amp; appPath &amp;amp; &quot;index.js&quot; in window 1
				--- 等待上一个脚本执行完毕后再执行下一个脚本
				repeat
					delay 0.1
					if not busy of alive then exit repeat
				end repeat
				beep
				do script node &amp;amp; &quot; &quot; &amp;amp; appPath &amp;amp; &quot;wechat.js&quot; in window 1
			end tell
		else
			do shell script &quot;echo &quot; &amp;amp; content &amp;amp; &quot; &amp;gt; &quot; &amp;amp; appPath &amp;amp; &quot;content.base64.txt&quot;
			tell application &quot;Terminal&quot;
				if not (exists window 1) then reopen
				activate
				do script node &amp;amp; &quot; &quot; &amp;amp; appPath &amp;amp; &quot;index.js&quot; in window 1
			end tell
		end if
	on error error_message
		display dialog error_message buttons {&quot;Cancel&quot;} default button 1
	end try
	
end open location
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://static.xheldon.cn/img/in-post/2022/applescript-simple-use/F7A4DDFF-2698-4E1E-8D72-C8B3D0EC5020_2.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html#//apple_ref/doc/uid/TP40016239-CH56-SW1&quot;&gt;Mac Automation Scription Guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/releasenotes/AppleScript/RN-AppleScript/RN-10_10/RN-10_10.html#//apple_ref/doc/uid/TP40000982-CH110-SW8&quot;&gt;AppleScript 10.10 Changes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983-CH208-SW1&quot;&gt;Introduction to AppleScript Language Guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42815166/customize-applescript-app-icon&quot;&gt;Customize AppleScript app icon&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ohdoylerules.com/snippets/using-node-in-applescript/&quot;&gt;Using Node.js in an AppleScript&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://apple.stackexchange.com/questions/21602/where-can-i-access-official-applescript-documentation&quot;&gt;Where can I access official AppleScript documentation?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://apple-dev.groups.io/g/jxa/wiki/3202&quot;&gt;关于使用 JavaScript 写 AS 的相关资料&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.notion.so/AppleScript-c07b90f850ea42e990b3ea2333f9b252&quot;&gt;AppleScript 教程&lt;/a&gt; （Write on Notion）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://sspai.com/post/44425&quot;&gt;在 macOS 中制作自己的 URL Schemes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AppleScripe 简明基础教程（iDoraemon Nathan 编著）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 03 May 2022 13:38:32 +0800</pubDate>
        <link>https://www.xheldon.com/tech/applescript-simple-use.html</link>
        <guid isPermaLink="true">https://www.xheldon.com/tech/applescript-simple-use.html</guid>
        
        <category>技术</category>
        
        <category>AppleScript</category>
        
        <category>初体验</category>
        
        
        <category>tech</category>
        
      </item>
    
  </channel>
</rss>
